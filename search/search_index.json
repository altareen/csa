{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AP Computer Science A Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes. Announcements Problem Set 9 is due on Monday, November 18th. Quiz 4: Java Arrays is due on Wednesday, November 20th. Course Calendar: Semester One Academic dates are in italics , course assessment deadlines are in bold . November 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Lab 5 Due 2 SAT II 3 4 PSet 7 Due 5 6 Quiz 3 Due 7 8 End of First Quarter Lab 6 Due 9 10 11 Remembrance Day PSet 8 Due 12 13 14 15 16 17 18 PSet 9 Due 19 20 Quiz 4 Due 21 22 23 24 25 26 27 28 Thanksgiving 29 30 December 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 Junior Week 3 Junior Week 4 Junior Week 5 Junior Week 6 Junior Week 7 SAT 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Xmas Break 24 Xmas Break 25 Xmas Break 26 27 28 29 30 31 NYE Carnival January 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 New Year's Day 2 3 4 5 6 Final Exams 7 Final Exams 8 Final Exams 9 Final Exams 10 Final Exams 11 12 13 Final Exams 14 15 16 17 Winter Break Begins 18 19 20 21 22 23 24 25 Chinese New Year 26 27 28 29 30 31 September 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Opening Ceremony 2 First Day of School 3 4 5 6 7 8 9 PSet 1 Due 10 Teachers' Day 11 12 Lab 1 Due 13 Mid-Autumn Holiday 14 15 16 PSet 2 Due 17 Quiz 1 Due 18 19 20 Lab 2 Due 21 22 23 PSet 3 Due 24 25 Senior Week 26 Senior Week 27 Senior Week 28 29 Make-up Day Senior Week 30 Senior Week October 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 National Day Holiday 2 National Day Holiday 3 National Day Holiday 4 National Day Holiday 5 SAT 6 7 National Day Holiday 8 PSet 4 Due 9 10 11 12 Make-up Day Lab 3 Due 13 14 15 16 PSet 5 Due 17 18 Lab 4 Due 19 20 21 Quiz 2 Due 22 23 PSet 6 Due 24 Test 1: Java Syntax & Strings 25 Field Trip 26 27 28 29 30 31 Halloween Course Calendar: Semester Two Academic dates are in italics , course assessment deadlines are in bold . February 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 School Resumes 18 19 20 21 22 23 24 25 26 27 28 29 March 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 St. Patrick's Day 18 19 20 21 22 23 24 25 26 27 28 29 30 31 April 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 Tomb Sweeping Day 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 May 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 May Day 2 3 4 5 6 7 8 AP CSA Exam 12:00PM 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 June 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Dragon Boat Festival 26 27 28 29 30 July 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 Summer Break Begins 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"Home"},{"location":"#ap-computer-science-a","text":"Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes.","title":"AP Computer Science A"},{"location":"#announcements","text":"Problem Set 9 is due on Monday, November 18th. Quiz 4: Java Arrays is due on Wednesday, November 20th.","title":"Announcements"},{"location":"#course-calendar-semester-one","text":"Academic dates are in italics , course assessment deadlines are in bold .","title":"Course Calendar: Semester One"},{"location":"#november-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Lab 5 Due 2 SAT II 3 4 PSet 7 Due 5 6 Quiz 3 Due 7 8 End of First Quarter Lab 6 Due 9 10 11 Remembrance Day PSet 8 Due 12 13 14 15 16 17 18 PSet 9 Due 19 20 Quiz 4 Due 21 22 23 24 25 26 27 28 Thanksgiving 29 30","title":"November 2019"},{"location":"#december-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 Junior Week 3 Junior Week 4 Junior Week 5 Junior Week 6 Junior Week 7 SAT 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Xmas Break 24 Xmas Break 25 Xmas Break 26 27 28 29 30 31 NYE Carnival","title":"December 2019"},{"location":"#january-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 New Year's Day 2 3 4 5 6 Final Exams 7 Final Exams 8 Final Exams 9 Final Exams 10 Final Exams 11 12 13 Final Exams 14 15 16 17 Winter Break Begins 18 19 20 21 22 23 24 25 Chinese New Year 26 27 28 29 30 31","title":"January 2020"},{"location":"#september-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Opening Ceremony 2 First Day of School 3 4 5 6 7 8 9 PSet 1 Due 10 Teachers' Day 11 12 Lab 1 Due 13 Mid-Autumn Holiday 14 15 16 PSet 2 Due 17 Quiz 1 Due 18 19 20 Lab 2 Due 21 22 23 PSet 3 Due 24 25 Senior Week 26 Senior Week 27 Senior Week 28 29 Make-up Day Senior Week 30 Senior Week","title":"September 2019"},{"location":"#october-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 National Day Holiday 2 National Day Holiday 3 National Day Holiday 4 National Day Holiday 5 SAT 6 7 National Day Holiday 8 PSet 4 Due 9 10 11 12 Make-up Day Lab 3 Due 13 14 15 16 PSet 5 Due 17 18 Lab 4 Due 19 20 21 Quiz 2 Due 22 23 PSet 6 Due 24 Test 1: Java Syntax & Strings 25 Field Trip 26 27 28 29 30 31 Halloween","title":"October 2019"},{"location":"#course-calendar-semester-two","text":"Academic dates are in italics , course assessment deadlines are in bold .","title":"Course Calendar: Semester Two"},{"location":"#february-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 School Resumes 18 19 20 21 22 23 24 25 26 27 28 29","title":"February 2020"},{"location":"#march-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 St. Patrick's Day 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"March 2020"},{"location":"#april-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 Tomb Sweeping Day 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30","title":"April 2020"},{"location":"#may-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 May Day 2 3 4 5 6 7 8 AP CSA Exam 12:00PM 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"May 2020"},{"location":"#june-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Dragon Boat Festival 26 27 28 29 30","title":"June 2020"},{"location":"#july-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 Summer Break Begins 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"July 2020"},{"location":"frqs/","text":"Free Response Questions The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip apline.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB pair.zip tester.zip apCSA2019.pdf 279KB","title":"FRQs"},{"location":"frqs/#free-response-questions","text":"The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip apline.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB pair.zip tester.zip apCSA2019.pdf 279KB","title":"Free Response Questions"},{"location":"lab01/","text":"Lab 1: Easter Sunday Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears. Code Distribution Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE . Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#lab-1-easter-sunday","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#background","text":"Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears.","title":"Background"},{"location":"lab01/#code-distribution","text":"Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab01/#specification","text":"Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE .","title":"Specification"},{"location":"lab01/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab01/#submission","text":"Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab02/","text":"Lab 2: Movie Critic Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie. Background Theory You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned. Code Distribution Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#lab-2-movie-critic","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#task-outline","text":"Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie.","title":"Task Outline"},{"location":"lab02/#background-theory","text":"You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned.","title":"Background Theory"},{"location":"lab02/#code-distribution","text":"Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab02/#specification","text":"Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested","title":"Specification"},{"location":"lab02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab02/#submission","text":"Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab03/","text":"Lab 3: Coin Change Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Saturday, October 12, 2019 Total Points: 10 Implement a Java program that calculates the minimum number of coins required to give a user change. Background Theory A greedy algorithm is one, \"that always takes the best immediate, or local, solution while finding an answer.\" Suppose a cashier owes a customer some change, and that cashier wishes to minimize the quantity of quarters, dimes, nickels and pennies that are dispensed to the customer. A greedy algorithm is one that would take, on each pass, the biggest bite out of this problem as possible. For example, if a customer is owed 41 cents, the biggest first(i.e., best immediate, or local) bite that can be taken is 25 cents. That bite is the \"best,\" as it gets us closer to 0 cents faster than any other coin would. Note that a bite of this size would reduce what was a 41 cent problem down to a 16 cent problem, since 41 - 25 = 16 . Another 25 cent bite would be too big, so our cashier would move on to a bite of size 10 cent, resulting in a 6 cent problem. At that point, the greedy algorithm calls for one 5 cent bite followed by one 1 cent bite, at which point the problem is solved. The result of this greedy algorithm is that the customer receives one quarter, one dime, one nickel, and one penny: four coins in total. Hints There are a few different ways in which this assignment can be solved. One of the ways is with a clever use of the integer division operator. Code Distribution Description File Size File Name Java Source Code for Coin Change 4.4KB lab03.zip Contents of lab03.zip : Lab03CoinChange/ \u251c\u2500\u2500 CoinChange.class \u251c\u2500\u2500 CoinChange.ctxt \u251c\u2500\u2500 CoinChange.java \u251c\u2500\u2500 CoinChangeJUnitTest.class \u251c\u2500\u2500 CoinChangeJUnitTest.ctxt \u251c\u2500\u2500 CoinChangeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file CoinChange.java that outputs the minimum number of coins that can be dispensed from a given quantity of cents. Assume that the only coins available are quarters(25 cents), dimes(10 cents), nickels(5 cents), and pennies(1 cent). You will write your solution in a function called minimumCoins(int cents) right below the place where it says: YOUR CODE HERE When the function call minimumCoins(41) is executed, the output of the program should be: 4 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CoinChange.java to the Web-CAT automated grading platform.","title":"Lab 3: Coin Change"},{"location":"lab03/#lab-3-coin-change","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 3: Coin Change"},{"location":"lab03/#task-outline","text":"Due Date: Saturday, October 12, 2019 Total Points: 10 Implement a Java program that calculates the minimum number of coins required to give a user change.","title":"Task Outline"},{"location":"lab03/#background-theory","text":"A greedy algorithm is one, \"that always takes the best immediate, or local, solution while finding an answer.\" Suppose a cashier owes a customer some change, and that cashier wishes to minimize the quantity of quarters, dimes, nickels and pennies that are dispensed to the customer. A greedy algorithm is one that would take, on each pass, the biggest bite out of this problem as possible. For example, if a customer is owed 41 cents, the biggest first(i.e., best immediate, or local) bite that can be taken is 25 cents. That bite is the \"best,\" as it gets us closer to 0 cents faster than any other coin would. Note that a bite of this size would reduce what was a 41 cent problem down to a 16 cent problem, since 41 - 25 = 16 . Another 25 cent bite would be too big, so our cashier would move on to a bite of size 10 cent, resulting in a 6 cent problem. At that point, the greedy algorithm calls for one 5 cent bite followed by one 1 cent bite, at which point the problem is solved. The result of this greedy algorithm is that the customer receives one quarter, one dime, one nickel, and one penny: four coins in total.","title":"Background Theory"},{"location":"lab03/#hints","text":"There are a few different ways in which this assignment can be solved. One of the ways is with a clever use of the integer division operator.","title":"Hints"},{"location":"lab03/#code-distribution","text":"Description File Size File Name Java Source Code for Coin Change 4.4KB lab03.zip Contents of lab03.zip : Lab03CoinChange/ \u251c\u2500\u2500 CoinChange.class \u251c\u2500\u2500 CoinChange.ctxt \u251c\u2500\u2500 CoinChange.java \u251c\u2500\u2500 CoinChangeJUnitTest.class \u251c\u2500\u2500 CoinChangeJUnitTest.ctxt \u251c\u2500\u2500 CoinChangeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab03/#specification","text":"Write a Java program in the file CoinChange.java that outputs the minimum number of coins that can be dispensed from a given quantity of cents. Assume that the only coins available are quarters(25 cents), dimes(10 cents), nickels(5 cents), and pennies(1 cent). You will write your solution in a function called minimumCoins(int cents) right below the place where it says: YOUR CODE HERE When the function call minimumCoins(41) is executed, the output of the program should be: 4","title":"Specification"},{"location":"lab03/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab03/#submission","text":"Upload the file CoinChange.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab04/","text":"Lab 4: Gene Detection Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, October 18, 2019 Total Points: 10 Implement a Java program that determines which gene is present in a DNA sequence. Background Theory DNA is often described as a double helix of molecules known as nucleotides . Only four DNA nucleotides exist, and they are known by the labels A, C, G, and T. This means that we can conveniently represent a DNA sequence with a Java text string. A cluster of three nucleotides is called a codon , and they represent amino acids which are present in DNA. For example, ATG is a codon which occurs throughout a DNA sequence. Codons are significant, because they are markers which indicate the presence of a gene . ATG is the start codon which marks the beginning of a gene sequence. All of the nucleotides which are present, right up to, and including the stop codon are part of the gene. Example Case Consider the following DNA sequence: ATATGTAGCTAGCATAATA The start codon is ATG , and the stop codon for this example is TAA . Note that there are 9 nucleotides between these codons: AT ATGTAGCTAGCATAA TA Therefore, the gene sequence which results from these codons is: ATGTAGCTAGCATAA Hints Note that we will not consider the case where a gene is absent from a DNA sequence. All of the DNA sequences used in the test benches have exactly one gene for you to find. Also, each of the DNA sequences will have exactly one stop codon for your program to locate. In other words, there will not be multiple stop codons in the gene sequences. Code Distribution Description File Size File Name Java Source Code for Gene Detection 5.2KB lab04.zip Contents of lab04.zip : Lab04GeneDetection/ \u251c\u2500\u2500 GeneDetection.class \u251c\u2500\u2500 GeneDetection.ctxt \u251c\u2500\u2500 GeneDetection.java \u251c\u2500\u2500 GeneDetectionJUnitTest.class \u251c\u2500\u2500 GeneDetectionJUnitTest.ctxt \u251c\u2500\u2500 GeneDetectionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file GeneDetection.java that finds and displays a single gene which is present in a DNA sequence. You will write your solution in a function called findGene(String dna, String stopCodon) right below the place where it says: YOUR CODE HERE When the function call findGene(\"ATATGTAGCTAGCATAATA\", \"TAA\") is executed, the output of the program should be: ATGTAGCTAGCATAA Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file GeneDetection.java to the Web-CAT automated grading platform.","title":"Lab 4: Gene Detection"},{"location":"lab04/#lab-4-gene-detection","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 4: Gene Detection"},{"location":"lab04/#task-outline","text":"Due Date: Friday, October 18, 2019 Total Points: 10 Implement a Java program that determines which gene is present in a DNA sequence.","title":"Task Outline"},{"location":"lab04/#background-theory","text":"DNA is often described as a double helix of molecules known as nucleotides . Only four DNA nucleotides exist, and they are known by the labels A, C, G, and T. This means that we can conveniently represent a DNA sequence with a Java text string. A cluster of three nucleotides is called a codon , and they represent amino acids which are present in DNA. For example, ATG is a codon which occurs throughout a DNA sequence. Codons are significant, because they are markers which indicate the presence of a gene . ATG is the start codon which marks the beginning of a gene sequence. All of the nucleotides which are present, right up to, and including the stop codon are part of the gene.","title":"Background Theory"},{"location":"lab04/#example-case","text":"Consider the following DNA sequence: ATATGTAGCTAGCATAATA The start codon is ATG , and the stop codon for this example is TAA . Note that there are 9 nucleotides between these codons: AT ATGTAGCTAGCATAA TA Therefore, the gene sequence which results from these codons is: ATGTAGCTAGCATAA","title":"Example Case"},{"location":"lab04/#hints","text":"Note that we will not consider the case where a gene is absent from a DNA sequence. All of the DNA sequences used in the test benches have exactly one gene for you to find. Also, each of the DNA sequences will have exactly one stop codon for your program to locate. In other words, there will not be multiple stop codons in the gene sequences.","title":"Hints"},{"location":"lab04/#code-distribution","text":"Description File Size File Name Java Source Code for Gene Detection 5.2KB lab04.zip Contents of lab04.zip : Lab04GeneDetection/ \u251c\u2500\u2500 GeneDetection.class \u251c\u2500\u2500 GeneDetection.ctxt \u251c\u2500\u2500 GeneDetection.java \u251c\u2500\u2500 GeneDetectionJUnitTest.class \u251c\u2500\u2500 GeneDetectionJUnitTest.ctxt \u251c\u2500\u2500 GeneDetectionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab04/#specification","text":"Write a Java program in the file GeneDetection.java that finds and displays a single gene which is present in a DNA sequence. You will write your solution in a function called findGene(String dna, String stopCodon) right below the place where it says: YOUR CODE HERE When the function call findGene(\"ATATGTAGCTAGCATAATA\", \"TAA\") is executed, the output of the program should be: ATGTAGCTAGCATAA","title":"Specification"},{"location":"lab04/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab04/#submission","text":"Upload the file GeneDetection.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab05/","text":"Lab 5: Smooth Signal Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 1, 2019 Total Points: 10 Implement a Java program that smoothes an audio signal by averaging an array of integers. Background Theory An audio signal is sometimes stored as an array of integer values. The values represent the intensity of the signal at successive time intervals. Of course, in a program, the signal is represented with an array. Often, a small amount of noise is included in the signal. Noise is usually small, momentary changes in the signal level. An example is the static that is heard in addition to the signal in AM radio. Smoothing a signal removes some of the noise, and improves the perceptual quality of the signal. This assignment requires you to smooth the values in an array of integers. Hints First, you should create a result array called smooth , which has exactly the same size as the audio array. The first element of the smooth array is a special case, because it should be calculated from the average of the first two elements of the audio array. The last element of the smooth array is also a special case, because it should be calculated from the average of the last two elments of the audio array. The internal elements of the smooth array can be calculated from a for loop in the following manner. First, you will need to determine the boundaries of this loop. You should probably begin at index 1 , and go up to index audio.length-1 . Then, you will need to calculate the average of three elements in the audio array, for every index i . In other words, you will need to calculate the average of the three values: audio[i-1] , audio[i] , and audio[i+1] . Code Distribution Description File Size File Name Java Source Code for Smooth Signal 6.2KB lab05.zip Contents of lab05.zip : Lab05SmoothSignal/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SmoothSignal.class \u251c\u2500\u2500 SmoothSignal.ctxt \u251c\u2500\u2500 SmoothSignal.java \u251c\u2500\u2500 SmoothSignalJUnitTest.class \u251c\u2500\u2500 SmoothSignalJUnitTest.ctxt \u2514\u2500\u2500 SmoothSignalJUnitTest.java Specification Write a Java program in the file SmoothSignal.java that smoothes an audio signal by averaging an array of integers. You will write your solution in a function called levelling(int[] audio) right below the place where it says: YOUR CODE HERE When the function call levelling([1, 5, 4, 5, 7, 6, 8, 6, 5, 4, 5, 4]) is executed, the output of the program should be: [3 3 4 5 6 7 6 6 5 4 4 4 ] Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file SmoothSignal.py to the Web-CAT automated grading platform.","title":"Lab 5: Smooth Signal"},{"location":"lab05/#lab-5-smooth-signal","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 5: Smooth Signal"},{"location":"lab05/#task-outline","text":"Due Date: Friday, November 1, 2019 Total Points: 10 Implement a Java program that smoothes an audio signal by averaging an array of integers.","title":"Task Outline"},{"location":"lab05/#background-theory","text":"An audio signal is sometimes stored as an array of integer values. The values represent the intensity of the signal at successive time intervals. Of course, in a program, the signal is represented with an array. Often, a small amount of noise is included in the signal. Noise is usually small, momentary changes in the signal level. An example is the static that is heard in addition to the signal in AM radio. Smoothing a signal removes some of the noise, and improves the perceptual quality of the signal. This assignment requires you to smooth the values in an array of integers.","title":"Background Theory"},{"location":"lab05/#hints","text":"First, you should create a result array called smooth , which has exactly the same size as the audio array. The first element of the smooth array is a special case, because it should be calculated from the average of the first two elements of the audio array. The last element of the smooth array is also a special case, because it should be calculated from the average of the last two elments of the audio array. The internal elements of the smooth array can be calculated from a for loop in the following manner. First, you will need to determine the boundaries of this loop. You should probably begin at index 1 , and go up to index audio.length-1 . Then, you will need to calculate the average of three elements in the audio array, for every index i . In other words, you will need to calculate the average of the three values: audio[i-1] , audio[i] , and audio[i+1] .","title":"Hints"},{"location":"lab05/#code-distribution","text":"Description File Size File Name Java Source Code for Smooth Signal 6.2KB lab05.zip Contents of lab05.zip : Lab05SmoothSignal/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SmoothSignal.class \u251c\u2500\u2500 SmoothSignal.ctxt \u251c\u2500\u2500 SmoothSignal.java \u251c\u2500\u2500 SmoothSignalJUnitTest.class \u251c\u2500\u2500 SmoothSignalJUnitTest.ctxt \u2514\u2500\u2500 SmoothSignalJUnitTest.java","title":"Code Distribution"},{"location":"lab05/#specification","text":"Write a Java program in the file SmoothSignal.java that smoothes an audio signal by averaging an array of integers. You will write your solution in a function called levelling(int[] audio) right below the place where it says: YOUR CODE HERE When the function call levelling([1, 5, 4, 5, 7, 6, 8, 6, 5, 4, 5, 4]) is executed, the output of the program should be: [3 3 4 5 6 7 6 6 5 4 4 4 ]","title":"Specification"},{"location":"lab05/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab05/#submission","text":"Upload the file SmoothSignal.py to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab06/","text":"Lab 6: Caesar Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 8, 2019 Total Points: 10 Implement a Java program that encrypts a message using the caesar cipher. Background Theory The main idea behind the Caesar Cipher is to shift each letter in a secret message by a fixed number of positions. If this shifting behaviour goes further than the end of the alphabet, then it wraps around to the beginning, and continues from there. The security of this crypto-system relies on having only the sender and the recipient know the secret key , which is the number of places by which the letters have been shifted. Hints Unencrypted text is generally called plaintext , and encrypted text is generally known as ciphertext . The quantity by which the letters have been shifted is called a key . In general, the Caesar Cipher encrypts messages by rotating each letter by key positions. More formally, if p is the alphabet index of a plaintext letter, and key is the amount by which that letter is shifted, then the alphabet index of the corresponding letter in the ciphertext c , is computed by the following equation: c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 You may assume that all of the characters in the plaintext messages are in lowercase . There will be no punctuation present in any of the plaintext messages, with the exception of the space character. You should design your program so that any spaces in the plaintext message are transferred into the encrypted ciphertext. Note that the complete lowercase alphabet has been provided for you: String alphabet = \"abcdefghijklmnopqrstuvwxyz\"; This means that \"a\" corresponds to index 0 , \"b\" corresponds to index 1 , etc. Code Distribution Description File Size File Name Java Source Code for Caesar Cipher 5.6KB lab06.zip Contents of lab06.zip : Lab06CaesarCipher/ \u251c\u2500\u2500 CaesarCipher.class \u251c\u2500\u2500 CaesarCipher.ctxt \u251c\u2500\u2500 CaesarCipher.java \u251c\u2500\u2500 CaesarCipherJUnitTest.class \u251c\u2500\u2500 CaesarCipherJUnitTest.ctxt \u251c\u2500\u2500 CaesarCipherJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file CaesarCipher.java that encrypts a message using the caesar cipher. You will write your solution in a function called encrypt(String message, int key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", 1) is executed, the output of the program should be: ifmmp Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CaesarCipher.java to the Web-CAT automated grading platform.","title":"Lab 6: Caesar Cipher"},{"location":"lab06/#lab-6-caesar-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 6: Caesar Cipher"},{"location":"lab06/#task-outline","text":"Due Date: Friday, November 8, 2019 Total Points: 10 Implement a Java program that encrypts a message using the caesar cipher.","title":"Task Outline"},{"location":"lab06/#background-theory","text":"The main idea behind the Caesar Cipher is to shift each letter in a secret message by a fixed number of positions. If this shifting behaviour goes further than the end of the alphabet, then it wraps around to the beginning, and continues from there. The security of this crypto-system relies on having only the sender and the recipient know the secret key , which is the number of places by which the letters have been shifted.","title":"Background Theory"},{"location":"lab06/#hints","text":"Unencrypted text is generally called plaintext , and encrypted text is generally known as ciphertext . The quantity by which the letters have been shifted is called a key . In general, the Caesar Cipher encrypts messages by rotating each letter by key positions. More formally, if p is the alphabet index of a plaintext letter, and key is the amount by which that letter is shifted, then the alphabet index of the corresponding letter in the ciphertext c , is computed by the following equation: c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 You may assume that all of the characters in the plaintext messages are in lowercase . There will be no punctuation present in any of the plaintext messages, with the exception of the space character. You should design your program so that any spaces in the plaintext message are transferred into the encrypted ciphertext. Note that the complete lowercase alphabet has been provided for you: String alphabet = \"abcdefghijklmnopqrstuvwxyz\"; This means that \"a\" corresponds to index 0 , \"b\" corresponds to index 1 , etc.","title":"Hints"},{"location":"lab06/#code-distribution","text":"Description File Size File Name Java Source Code for Caesar Cipher 5.6KB lab06.zip Contents of lab06.zip : Lab06CaesarCipher/ \u251c\u2500\u2500 CaesarCipher.class \u251c\u2500\u2500 CaesarCipher.ctxt \u251c\u2500\u2500 CaesarCipher.java \u251c\u2500\u2500 CaesarCipherJUnitTest.class \u251c\u2500\u2500 CaesarCipherJUnitTest.ctxt \u251c\u2500\u2500 CaesarCipherJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab06/#specification","text":"Write a Java program in the file CaesarCipher.java that encrypts a message using the caesar cipher. You will write your solution in a function called encrypt(String message, int key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", 1) is executed, the output of the program should be: ifmmp","title":"Specification"},{"location":"lab06/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab06/#submission","text":"Upload the file CaesarCipher.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab07/","text":"Lab 7: Polybius Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 15, 2019 Total Points: 10 Implement a Java program that decrypts a message using the polybius cipher. Background Theory The Polybius Square is an ancient Greek invention, discovered by a scholar named Polybius. It consists of a 5 by 5 grid, in which each square of the grid is filled in by a single letter. In this programming assignment, the grid has been enlarged to 6 by 6, so that it can accommodate the digits 0-9, as well as all the alphabet letters. Each letter in the grid can be represented by the two numbers that indicate its position in the grid. The first number denotes the specific row, and the second number denotes the column. In this manner, the letter \"q\" would be encoded by the digits 24 . Even though this method of encryption seems feasible, it is not very secure. We need to introduce the notion of a key , in order to increase the security of this encryption system. We can achieve this by simply re-ordering the placement of the alphabet and digits, before inserting them into the grid. In this updated version of the grid, the letter \"q\" would be encoded by the digits 45 . Decrypting a message is quite easy, simply use the pairs of numbers to locate each plaintext letter in the grid. For example, the number sequence \"0520020214\" can be decoded to the word \"hello\" . Hints You will notice that you are not given a sequence of numbers to decode. Instead, you are provided with a series of letters. Upon close inspection, you should notice that the provided letters consist of the symbols \"a\" , \"b\" , \"c\" , \"d\" , \"e\" and \"f\" . Each of the letter symbols corresponds to a row or column number in the polybius grid. Specifically, \"a\" = 0 , \"b\" = 1 , \"c\" = 2 , \"d\" = 3 , \"e\" = 4 and \"f\" = 5 . Your first task is to transform these letter symbols into their corresponding number symbols. You are provided with the following: String alpha = \"abcdef\"; Note that each letter is placed in accordance with its associated index. You should use the method indexOf() to extract each letter's index. Make sure that your resulting number sequence is in a string format. Then, you must separate out pairs of digits from this number sequence, and perform a lookup in the two-dimensional key grid. The first number from the pair corresponds to the the row, and the second digit corresponds to the column. A lookup in a two-dimensional grid can be achieved by using two pairs of square brackets as follows: letter = key[row][column] Code Distribution Description File Size File Name Java Source Code for Polybius Cipher 6.8KB lab07.zip Contents of lab07.zip : Lab07PolybiusCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 PolybiusCipher.class \u251c\u2500\u2500 PolybiusCipher.ctxt \u251c\u2500\u2500 PolybiusCipher.java \u251c\u2500\u2500 PolybiusCipherJUnitTest.class \u251c\u2500\u2500 PolybiusCipherJUnitTest.ctxt \u251c\u2500\u2500 PolybiusCipherJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file PolybiusCipher.py that decrypts a message using the polybius cipher. You will write your solution in a function called decrypt(String message, String[][] key) right below the place where it says: YOUR CODE HERE When the function call decrypt(\"bcfbfeacbdadafcacafacacedfffffabfa\", key) is executed, the output of the program should be: buy12cheesepizzas Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file PolybiusCipher.py to the Web-CAT automated grading platform.","title":"Lab 7: Polybius Cipher"},{"location":"lab07/#lab-7-polybius-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 7: Polybius Cipher"},{"location":"lab07/#task-outline","text":"Due Date: Friday, November 15, 2019 Total Points: 10 Implement a Java program that decrypts a message using the polybius cipher.","title":"Task Outline"},{"location":"lab07/#background-theory","text":"The Polybius Square is an ancient Greek invention, discovered by a scholar named Polybius. It consists of a 5 by 5 grid, in which each square of the grid is filled in by a single letter. In this programming assignment, the grid has been enlarged to 6 by 6, so that it can accommodate the digits 0-9, as well as all the alphabet letters. Each letter in the grid can be represented by the two numbers that indicate its position in the grid. The first number denotes the specific row, and the second number denotes the column. In this manner, the letter \"q\" would be encoded by the digits 24 . Even though this method of encryption seems feasible, it is not very secure. We need to introduce the notion of a key , in order to increase the security of this encryption system. We can achieve this by simply re-ordering the placement of the alphabet and digits, before inserting them into the grid. In this updated version of the grid, the letter \"q\" would be encoded by the digits 45 . Decrypting a message is quite easy, simply use the pairs of numbers to locate each plaintext letter in the grid. For example, the number sequence \"0520020214\" can be decoded to the word \"hello\" .","title":"Background Theory"},{"location":"lab07/#hints","text":"You will notice that you are not given a sequence of numbers to decode. Instead, you are provided with a series of letters. Upon close inspection, you should notice that the provided letters consist of the symbols \"a\" , \"b\" , \"c\" , \"d\" , \"e\" and \"f\" . Each of the letter symbols corresponds to a row or column number in the polybius grid. Specifically, \"a\" = 0 , \"b\" = 1 , \"c\" = 2 , \"d\" = 3 , \"e\" = 4 and \"f\" = 5 . Your first task is to transform these letter symbols into their corresponding number symbols. You are provided with the following: String alpha = \"abcdef\"; Note that each letter is placed in accordance with its associated index. You should use the method indexOf() to extract each letter's index. Make sure that your resulting number sequence is in a string format. Then, you must separate out pairs of digits from this number sequence, and perform a lookup in the two-dimensional key grid. The first number from the pair corresponds to the the row, and the second digit corresponds to the column. A lookup in a two-dimensional grid can be achieved by using two pairs of square brackets as follows: letter = key[row][column]","title":"Hints"},{"location":"lab07/#code-distribution","text":"Description File Size File Name Java Source Code for Polybius Cipher 6.8KB lab07.zip Contents of lab07.zip : Lab07PolybiusCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 PolybiusCipher.class \u251c\u2500\u2500 PolybiusCipher.ctxt \u251c\u2500\u2500 PolybiusCipher.java \u251c\u2500\u2500 PolybiusCipherJUnitTest.class \u251c\u2500\u2500 PolybiusCipherJUnitTest.ctxt \u251c\u2500\u2500 PolybiusCipherJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab07/#specification","text":"Write a Java program in the file PolybiusCipher.py that decrypts a message using the polybius cipher. You will write your solution in a function called decrypt(String message, String[][] key) right below the place where it says: YOUR CODE HERE When the function call decrypt(\"bcfbfeacbdadafcacafacacedfffffabfa\", key) is executed, the output of the program should be: buy12cheesepizzas","title":"Specification"},{"location":"lab07/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab07/#submission","text":"Upload the file PolybiusCipher.py to the Web-CAT automated grading platform.","title":"Submission"},{"location":"notes/","text":"Course Notes Semester 1 Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf Arrays of Objects: Using the array data structure with objects. 180KB csaNotes09ObjectArrays.pdf Parameters of Different Types: Using primitive, object, and array parameters. 174KB csaNotes10Parameters.pdf","title":"Course Notes"},{"location":"notes/#course-notes","text":"","title":"Course Notes"},{"location":"notes/#semester-1","text":"Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf Arrays of Objects: Using the array data structure with objects. 180KB csaNotes09ObjectArrays.pdf Parameters of Different Types: Using primitive, object, and array parameters. 174KB csaNotes10Parameters.pdf","title":"Semester 1"},{"location":"priortests/","text":"Prior Tests Semester 1 Test 1: Java Syntax and Strings Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf Fall 2019 152KB csaTest01Fall2019.pdf Test 2: Java Arrays and Classes Description File Size File Name Fall 2014 105KB csaTest02Fall2014.pdf Fall 2015 97KB csaTest02Fall2015.pdf Fall 2016 156KB csaTest02Fall2016.pdf Fall 2017 163KB csaTest02Fall2017.pdf Fall 2018 168KB csaTest02Fall2018.pdf","title":"Prior Tests"},{"location":"priortests/#prior-tests","text":"","title":"Prior Tests"},{"location":"priortests/#semester-1","text":"","title":"Semester 1"},{"location":"priortests/#test-1-java-syntax-and-strings","text":"Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf Fall 2019 152KB csaTest01Fall2019.pdf","title":"Test 1: Java Syntax and Strings"},{"location":"priortests/#test-2-java-arrays-and-classes","text":"Description File Size File Name Fall 2014 105KB csaTest02Fall2014.pdf Fall 2015 97KB csaTest02Fall2015.pdf Fall 2016 156KB csaTest02Fall2016.pdf Fall 2017 163KB csaTest02Fall2017.pdf Fall 2018 168KB csaTest02Fall2018.pdf","title":"Test 2: Java Arrays and Classes"},{"location":"pset01/","text":"Problem Set 1: HelloWorld Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework. Code Distribution Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Using the Assignment Operator Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save . Compiling your Java Program Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon. Executing your Java Program Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase. Testing Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit. Submission Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Problem Set 1: Hello World"},{"location":"pset01/#problem-set-1-helloworld","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 1: HelloWorld"},{"location":"pset01/#background","text":"Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework.","title":"Background"},{"location":"pset01/#code-distribution","text":"Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset01/#specification","text":"","title":"Specification"},{"location":"pset01/#using-the-assignment-operator","text":"Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save .","title":"Using the Assignment Operator"},{"location":"pset01/#compiling-your-java-program","text":"Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon.","title":"Compiling your Java Program"},{"location":"pset01/#executing-your-java-program","text":"Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase.","title":"Executing your Java Program"},{"location":"pset01/#testing","text":"Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit.","title":"Testing"},{"location":"pset01/#submission","text":"Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset02/","text":"Problem Set 2: Fahrenheit Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion. Code Distribution Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0 Hints Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer. Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#problem-set-2-fahrenheit","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#background","text":"Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion.","title":"Background"},{"location":"pset02/#code-distribution","text":"Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset02/#specification","text":"Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0","title":"Specification"},{"location":"pset02/#hints","text":"Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer.","title":"Hints"},{"location":"pset02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset02/#submission","text":"Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset03/","text":"Problem Set 3: Note Frequency Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class. Background Theory One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9 Code Distribution Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#problem-set-3-note-frequency","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#task-outline","text":"Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class.","title":"Task Outline"},{"location":"pset03/#background-theory","text":"One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9","title":"Background Theory"},{"location":"pset03/#code-distribution","text":"Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset03/#specification","text":"Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414","title":"Specification"},{"location":"pset03/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset03/#submission","text":"Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset04/","text":"Problem Set 4: Quarterback Rating Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football. Background Theory The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100 Code Distribution Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#problem-set-4-quarterback-rating","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#task-outline","text":"Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football.","title":"Task Outline"},{"location":"pset04/#background-theory","text":"The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100","title":"Background Theory"},{"location":"pset04/#code-distribution","text":"Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset04/#specification","text":"Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288","title":"Specification"},{"location":"pset04/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset04/#submission","text":"Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset05/","text":"Problem Set 5: Water Meter Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Wednesday, October 16, 2019 Total Points: 10 Implement a Java program that calculates the amount of money that a customer will be billed, based on their water usage. Background Theory A water utility is responsible for supplying clean, fresh water to its customers in a given geographical area. The water utility will typically charge different rates for each category of customer. Supplying water to individual households is relatively straightforward, so they are charged minimal rates. However, commercial and industrial factories may require massive amounts of water, so they are charged more for the necessary supporting infrastructure. A customer's water bill depends on how many gallons of water they consumed during a particular billing period. A water meter is used to determine a customer's water consumption. It consists of a dial that has nine digits. However, note that the final digit in the dial records one-tenth of a gallon . In other words, if the water meter reads 923874345 then this corresponds to 92387434.5 gallons. The water meter is read once at the beginning of the billing period, and then once and the end. A customer's water consumption, in gallons, is computed from the difference in these two meter readings. Customer Categories There are three categories of customer: residential , commercial , and industrial . The following is the fee schedule for each of these categories: residential A base rate of $5.00, plus $0.0005 per gallon used. commercial A base rate $1000.00 for 40000 gallons or less, plus $0.00025 for each additional gallon used. industrial A base rate of $1000.00 for 40000 gallons or less. A base rate of $2000.00 if usage exceeds 40000 gallons, but does not exceed 80000 gallons. A base rate of $3000.00 plus $0.00025 for each additional gallon if usage exceeds 80000 gallons. Hints Note that the meter's dial has nine digits and records the tenths of a gallon. For example, if the beginning reading was 444400003 and the ending reading was 444400135 , then the customer used 13.2 gallons of water during that billing period. We won't consider the case where the water meter \"flips over\" from 999999999 to 000000000 . Code Distribution Description File Size File Name Java Source Code for Water Meter 1.4KB pset05.zip Contents of pset05.zip : PSet05WaterMeter/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 WaterBilling.class \u251c\u2500\u2500 WaterBilling.ctxt \u251c\u2500\u2500 WaterBilling.java \u251c\u2500\u2500 WaterBillingJUnitTest.class \u251c\u2500\u2500 WaterBillingJUnitTest.ctxt \u2514\u2500\u2500 WaterBillingJUnitTest.java Specification Write a Java program in the file WaterBilling.java that determines the amount of money that a customer must pay for their water usage during a particular billing period. You will write your solution in a function called calculateBill(String customer, double begin, double end) right below the place where it says: YOUR CODE HERE When the function call calculateBill(\"residential\", 444400003, 444400135) is executed, the output of the program should be: 5.0066 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file WaterBilling.java to the Web-CAT automated grading platform.","title":"Problem Set 5: Water Meter"},{"location":"pset05/#problem-set-5-water-meter","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 5: Water Meter"},{"location":"pset05/#task-outline","text":"Due Date: Wednesday, October 16, 2019 Total Points: 10 Implement a Java program that calculates the amount of money that a customer will be billed, based on their water usage.","title":"Task Outline"},{"location":"pset05/#background-theory","text":"A water utility is responsible for supplying clean, fresh water to its customers in a given geographical area. The water utility will typically charge different rates for each category of customer. Supplying water to individual households is relatively straightforward, so they are charged minimal rates. However, commercial and industrial factories may require massive amounts of water, so they are charged more for the necessary supporting infrastructure. A customer's water bill depends on how many gallons of water they consumed during a particular billing period. A water meter is used to determine a customer's water consumption. It consists of a dial that has nine digits. However, note that the final digit in the dial records one-tenth of a gallon . In other words, if the water meter reads 923874345 then this corresponds to 92387434.5 gallons. The water meter is read once at the beginning of the billing period, and then once and the end. A customer's water consumption, in gallons, is computed from the difference in these two meter readings.","title":"Background Theory"},{"location":"pset05/#customer-categories","text":"There are three categories of customer: residential , commercial , and industrial . The following is the fee schedule for each of these categories:","title":"Customer Categories"},{"location":"pset05/#residential","text":"A base rate of $5.00, plus $0.0005 per gallon used.","title":"residential"},{"location":"pset05/#commercial","text":"A base rate $1000.00 for 40000 gallons or less, plus $0.00025 for each additional gallon used.","title":"commercial"},{"location":"pset05/#industrial","text":"A base rate of $1000.00 for 40000 gallons or less. A base rate of $2000.00 if usage exceeds 40000 gallons, but does not exceed 80000 gallons. A base rate of $3000.00 plus $0.00025 for each additional gallon if usage exceeds 80000 gallons.","title":"industrial"},{"location":"pset05/#hints","text":"Note that the meter's dial has nine digits and records the tenths of a gallon. For example, if the beginning reading was 444400003 and the ending reading was 444400135 , then the customer used 13.2 gallons of water during that billing period. We won't consider the case where the water meter \"flips over\" from 999999999 to 000000000 .","title":"Hints"},{"location":"pset05/#code-distribution","text":"Description File Size File Name Java Source Code for Water Meter 1.4KB pset05.zip Contents of pset05.zip : PSet05WaterMeter/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 WaterBilling.class \u251c\u2500\u2500 WaterBilling.ctxt \u251c\u2500\u2500 WaterBilling.java \u251c\u2500\u2500 WaterBillingJUnitTest.class \u251c\u2500\u2500 WaterBillingJUnitTest.ctxt \u2514\u2500\u2500 WaterBillingJUnitTest.java","title":"Code Distribution"},{"location":"pset05/#specification","text":"Write a Java program in the file WaterBilling.java that determines the amount of money that a customer must pay for their water usage during a particular billing period. You will write your solution in a function called calculateBill(String customer, double begin, double end) right below the place where it says: YOUR CODE HERE When the function call calculateBill(\"residential\", 444400003, 444400135) is executed, the output of the program should be: 5.0066","title":"Specification"},{"location":"pset05/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset05/#submission","text":"Upload the file WaterBilling.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset06/","text":"Problem Set 6: Vending Machine Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Wednesday, October 23, 2019 Total Points: 10 Implement a Java program that dispenses the correct amount of change, depending on the stock of coins in the machine. Background Theory You will write a program that simulates the behaviour of a coin-operated vending machine, a device that was in common use until recently. A vending machine operates as follows: A customer selects an item for purchase, then inserts a certain amount of cash to cover the cost of the item. The product is then dispensed, and if change is due to the customer, it is provided in the form of coins. The vending machine we will consider has a finite stock of the following coins: 25 cents(quarters) , 10 cents(dimes) , and five cents(nickels) . Note that pennies will be excluded from consideration. The amount of change due to a customer is calculated according to the following simple relation: change = payment - cost . The vending machine should then dispense the minimum quantity of coins necessary to provide the change to the customer. However, what would happen if the machine completely ran out of a particular coin denomination, for instance, the quarter? In that case, the machine would have to fulfill its obligation by using its remaining stock of dimes and nickels. Note that the output of this program should be the quantity of coins that are dispensed by the vending machine. Example Case Consider the case where a customer deposits 200 cents into a vending machine, to purchase a product costing 70 cents. The change due to the customer is 130 cents. Then, let's say that the vending machine has a coin stock of 3 quarters, 3 dimes and 10 nickels. The vending machine will then dispense 3 quarters, 3 dimes and 5 nickels to the customer, which is 11 coins in total. Your program should return 11 as its result. Hints Assume that the customer always deposits paper currency as payment. In other words, the payment placed into the vending machine does not replenish the coin stocks. Every time you dispense a coin to the customer, reduce that coin stock by one. The cost of the products, and the payment deposited, are all denominated in cents . This greatly simplifies the programming involved. You must calculate the minimum quantity of coins possible to fulfill the amount of change due to the customer. We won't consider the case where the vending machine has an insufficient stock of coins to cover the amount of change due to the customer. There will always be enough coins in each case. Code Distribution Description File Size File Name Java Source Code for Vending Machine 4.9KB pset06.zip Contents of pset06.zip : PSet06VendingMachine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VendingMachine.class \u251c\u2500\u2500 VendingMachine.ctxt \u251c\u2500\u2500 VendingMachine.java \u251c\u2500\u2500 VendingMachineJUnitTest.class \u251c\u2500\u2500 VendingMachineJUnitTest.ctxt \u2514\u2500\u2500 VendingMachineJUnitTest.java Specification Write a Java program in the file VendingMachine.java that dispenses the correct amount of change, depending on the stock of coins in the machine. You will write your solution in a function called dispenseChange(int quarters, int dimes, int nickels, int cost, int payment) right below the place where it says: YOUR CODE HERE When the function call dispenseChange(5, 5, 5, 160, 200) is executed, the output of the program should be: 3 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file VendingMachine.java to the Web-CAT automated grading platform.","title":"Problem Set 6: Vending Machine"},{"location":"pset06/#problem-set-6-vending-machine","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 6: Vending Machine"},{"location":"pset06/#task-outline","text":"Due Date: Wednesday, October 23, 2019 Total Points: 10 Implement a Java program that dispenses the correct amount of change, depending on the stock of coins in the machine.","title":"Task Outline"},{"location":"pset06/#background-theory","text":"You will write a program that simulates the behaviour of a coin-operated vending machine, a device that was in common use until recently. A vending machine operates as follows: A customer selects an item for purchase, then inserts a certain amount of cash to cover the cost of the item. The product is then dispensed, and if change is due to the customer, it is provided in the form of coins. The vending machine we will consider has a finite stock of the following coins: 25 cents(quarters) , 10 cents(dimes) , and five cents(nickels) . Note that pennies will be excluded from consideration. The amount of change due to a customer is calculated according to the following simple relation: change = payment - cost . The vending machine should then dispense the minimum quantity of coins necessary to provide the change to the customer. However, what would happen if the machine completely ran out of a particular coin denomination, for instance, the quarter? In that case, the machine would have to fulfill its obligation by using its remaining stock of dimes and nickels. Note that the output of this program should be the quantity of coins that are dispensed by the vending machine.","title":"Background Theory"},{"location":"pset06/#example-case","text":"Consider the case where a customer deposits 200 cents into a vending machine, to purchase a product costing 70 cents. The change due to the customer is 130 cents. Then, let's say that the vending machine has a coin stock of 3 quarters, 3 dimes and 10 nickels. The vending machine will then dispense 3 quarters, 3 dimes and 5 nickels to the customer, which is 11 coins in total. Your program should return 11 as its result.","title":"Example Case"},{"location":"pset06/#hints","text":"Assume that the customer always deposits paper currency as payment. In other words, the payment placed into the vending machine does not replenish the coin stocks. Every time you dispense a coin to the customer, reduce that coin stock by one. The cost of the products, and the payment deposited, are all denominated in cents . This greatly simplifies the programming involved. You must calculate the minimum quantity of coins possible to fulfill the amount of change due to the customer. We won't consider the case where the vending machine has an insufficient stock of coins to cover the amount of change due to the customer. There will always be enough coins in each case.","title":"Hints"},{"location":"pset06/#code-distribution","text":"Description File Size File Name Java Source Code for Vending Machine 4.9KB pset06.zip Contents of pset06.zip : PSet06VendingMachine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VendingMachine.class \u251c\u2500\u2500 VendingMachine.ctxt \u251c\u2500\u2500 VendingMachine.java \u251c\u2500\u2500 VendingMachineJUnitTest.class \u251c\u2500\u2500 VendingMachineJUnitTest.ctxt \u2514\u2500\u2500 VendingMachineJUnitTest.java","title":"Code Distribution"},{"location":"pset06/#specification","text":"Write a Java program in the file VendingMachine.java that dispenses the correct amount of change, depending on the stock of coins in the machine. You will write your solution in a function called dispenseChange(int quarters, int dimes, int nickels, int cost, int payment) right below the place where it says: YOUR CODE HERE When the function call dispenseChange(5, 5, 5, 160, 200) is executed, the output of the program should be: 3","title":"Specification"},{"location":"pset06/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset06/#submission","text":"Upload the file VendingMachine.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset07/","text":"Problem Set 7: Down Payment Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 4, 2019 Total Points: 10 Implement a Java program that determines how many months it will take to save up enough money for a down payment on a house. Background Theory Let's assume that you have grown weary of living in dormitories, and you wish to save up enough money for a down payment on a house. The down payment is 25% of the the total cost of the house. Since housing is very expensive, it will probably take you several years to accomplish this task. In this program, we will measure this time duration in terms of months. Let's also assume that you have a well-paying job, in which you earn a respectable annual salary. As well, you have a savings account which generates an annual rate of return. Furthermore, your place of employment provides you with pay raises on a semi-annual basis. That is, your salary will increase by a certain decimal percentage after the 6th month, the 12th month, the 18th month, and so on. Parameters The following is an explanation of the parameters used in the savingsDuration() function: annualsalary This is the annual salary which you earn from your job. percentsaved This is the amount of your salary which you will dedicate towards saving for the down payment. It should be expressed in decimal form, for example: 0.1 totalcost This is the purchase price of your dream home. payraise This is the amount by which your salary is increased, and these raises occur every six months. This should be expressed in decimal form, for example: 0.1 Hints You will need to determine the amount of the down payment , which can be calculated from: totalCost*0.25 Since the time duration is measured in months, you will need to determine your monthly salary . This can be calculated from: annualSalary/12.0 The amount that you have saved so far should be referred to as your current savings , and you begin with a current savings of: 0 Assume that your savings account generates an annual rate of return of 4%. In other words, rate = 0.04 Create a variable that keeps track of the number of months that have occurred in this simulation, and set this variable to: 0 Assume that you invest your current savings wisely, so at the end of each month, you receive an additional currentSavings*rate/12.0 to be put into your savings. Be careful about when you increase your salary due to the pay raise. This should only happen after the 6th month, 12th month, 18th month, and so on. Code Distribution Description File Size File Name Java Source Code for Down Payment 5.2KB pset07.zip Contents of pset07.zip : PSet07DownPayment/ \u251c\u2500\u2500 DownPayment.class \u251c\u2500\u2500 DownPayment.ctxt \u251c\u2500\u2500 DownPayment.java \u251c\u2500\u2500 DownPaymentJUnitTest.class \u251c\u2500\u2500 DownPaymentJUnitTest.ctxt \u251c\u2500\u2500 DownPaymentJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file DownPayment.java that outputs the number of months that would be required to save enough money for a down payment on a house, given the annual salary that you earn, and the return on your investments. You will write your solution in a function called savingsDuration(double annualSalary, double percentSaved, double totalCost, double payRaise) right below the place where it says: YOUR CODE HERE When the function call savingsDuration(120000, 0.05, 500000, 0.03) is executed, the output of the program should be: 142 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file DownPayment.java to the Web-CAT automated grading platform.","title":"Problem Set 7: Down Payment"},{"location":"pset07/#problem-set-7-down-payment","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 7: Down Payment"},{"location":"pset07/#task-outline","text":"Due Date: Monday, November 4, 2019 Total Points: 10 Implement a Java program that determines how many months it will take to save up enough money for a down payment on a house.","title":"Task Outline"},{"location":"pset07/#background-theory","text":"Let's assume that you have grown weary of living in dormitories, and you wish to save up enough money for a down payment on a house. The down payment is 25% of the the total cost of the house. Since housing is very expensive, it will probably take you several years to accomplish this task. In this program, we will measure this time duration in terms of months. Let's also assume that you have a well-paying job, in which you earn a respectable annual salary. As well, you have a savings account which generates an annual rate of return. Furthermore, your place of employment provides you with pay raises on a semi-annual basis. That is, your salary will increase by a certain decimal percentage after the 6th month, the 12th month, the 18th month, and so on.","title":"Background Theory"},{"location":"pset07/#parameters","text":"The following is an explanation of the parameters used in the savingsDuration() function:","title":"Parameters"},{"location":"pset07/#annualsalary","text":"This is the annual salary which you earn from your job.","title":"annualsalary"},{"location":"pset07/#percentsaved","text":"This is the amount of your salary which you will dedicate towards saving for the down payment. It should be expressed in decimal form, for example: 0.1","title":"percentsaved"},{"location":"pset07/#totalcost","text":"This is the purchase price of your dream home.","title":"totalcost"},{"location":"pset07/#payraise","text":"This is the amount by which your salary is increased, and these raises occur every six months. This should be expressed in decimal form, for example: 0.1","title":"payraise"},{"location":"pset07/#hints","text":"You will need to determine the amount of the down payment , which can be calculated from: totalCost*0.25 Since the time duration is measured in months, you will need to determine your monthly salary . This can be calculated from: annualSalary/12.0 The amount that you have saved so far should be referred to as your current savings , and you begin with a current savings of: 0 Assume that your savings account generates an annual rate of return of 4%. In other words, rate = 0.04 Create a variable that keeps track of the number of months that have occurred in this simulation, and set this variable to: 0 Assume that you invest your current savings wisely, so at the end of each month, you receive an additional currentSavings*rate/12.0 to be put into your savings. Be careful about when you increase your salary due to the pay raise. This should only happen after the 6th month, 12th month, 18th month, and so on.","title":"Hints"},{"location":"pset07/#code-distribution","text":"Description File Size File Name Java Source Code for Down Payment 5.2KB pset07.zip Contents of pset07.zip : PSet07DownPayment/ \u251c\u2500\u2500 DownPayment.class \u251c\u2500\u2500 DownPayment.ctxt \u251c\u2500\u2500 DownPayment.java \u251c\u2500\u2500 DownPaymentJUnitTest.class \u251c\u2500\u2500 DownPaymentJUnitTest.ctxt \u251c\u2500\u2500 DownPaymentJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset07/#specification","text":"Write a Java program in the file DownPayment.java that outputs the number of months that would be required to save enough money for a down payment on a house, given the annual salary that you earn, and the return on your investments. You will write your solution in a function called savingsDuration(double annualSalary, double percentSaved, double totalCost, double payRaise) right below the place where it says: YOUR CODE HERE When the function call savingsDuration(120000, 0.05, 500000, 0.03) is executed, the output of the program should be: 142","title":"Specification"},{"location":"pset07/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset07/#submission","text":"Upload the file DownPayment.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset08/","text":"Problem Set 8: Book Identifier Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 11, 2019 Total Points: 10 Implement a Java program that validates ISBN-10 numbers. Background Theory Any book that you purchase has an International Standard Book Number , otherwise known as an ISBN or ISBN-10 . This is a 10-digit number that uniquely identifies books and media products published internationally. It turns out that the last number of an ISBN-10 's digits is a check digit, otherwise known as a checksum, which is a number related mathematically to its preceding digits. The digits of an ISBN-10 are supposed to adhere to a formula, and this check digit allows you to verify whether an ISBN-10 's other nine digits are valid, without having to resort to other means of verification, for instance, by performing a query on a database of books. Calculating the Check Digit The check digit of an ISBN-10 number can be defined as follows. If x_1 x_1 represents an ISBN-10 's first digit, and x_{10} x_{10} represents its last digit, then we have the following: x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 In other words, to compute an ISBN-10 's tenth digit, multiply its first digit by 1, its second digit by 2, its third digit by 3, its fourth digit by 4, its fifth digit by 5, its sixth digit by 6, its seventh digit by 7, its eighth digit by 8, and its ninth digit by 9. Take the sum of those products and perform a modulus with 11. The result should be the ISBN-10 's tenth digit. Example Case For example, the ISBN-10 for the textbook Absolute Beginner's Guide to C , is 0-789-75198-4 , the tenth digit of which is 4 . Let's take the sum of the products of the ISBN-10 's first nine digits: (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 If we now compute 290 modulus 11, we get a result of 4, which is equal to the tenth digit in the ISBN-10 . This verifies that the ISBN-10 number is legitimate. Hints Note that the ISBN-10 is being read in as a string, and it gets converted to an integer by using the Integer.parseInt() function. The reason for this procedure is to accommodate ISBN-10 's with leading zeros. Now that we have an ISBN-10 in integer form, how can we get at its tenth(i.e. rightmost) digit? Perhaps we can make a clever use of the modulus operator: tenth = isbncode % 10 Now, how can we get a that same variable's ninth digit? Perhaps we can get rid of its tenth digit by using integer division: isbncode = isbncode // 10 Afterwards, we can access the ninth digit by using the modulus operator: ninth = isbncode % 10 Hopefully, you can detect a pattern here. Remember that a certain looping construct such as the for loop can be very useful here. Code Distribution Description File Size File Name Java Source Code for Book Identifier 4.9KB pset08.zip Contents of pset08.zip : PSet08BookIdentifier/ \u251c\u2500\u2500 BookIdentifier.class \u251c\u2500\u2500 BookIdentifier.ctxt \u251c\u2500\u2500 BookIdentifier.java \u251c\u2500\u2500 BookIdentifierJUnitTest.class \u251c\u2500\u2500 BookIdentifierJUnitTest.ctxt \u251c\u2500\u2500 BookIdentifierJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file BookIdentifier.java that determines whether an ISBN-10 number is legitimate or not. You will write your solution in a function called validateBook(String isbnCode) right below the place where it says: YOUR CODE HERE If the ISBN-10 number is valid, then your validateBook method should return the string YES . Otherwise, if the ISBN-10 number is not valid, then your validateBook method should return the string NO . When the function call validateBook(\"0789751984\") is executed, the output of the program should be: YES Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file BookIdentifier.java to the Web-CAT automated grading platform.","title":"Problem Set 8: Book Identifier"},{"location":"pset08/#problem-set-8-book-identifier","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 8: Book Identifier"},{"location":"pset08/#task-outline","text":"Due Date: Monday, November 11, 2019 Total Points: 10 Implement a Java program that validates ISBN-10 numbers.","title":"Task Outline"},{"location":"pset08/#background-theory","text":"Any book that you purchase has an International Standard Book Number , otherwise known as an ISBN or ISBN-10 . This is a 10-digit number that uniquely identifies books and media products published internationally. It turns out that the last number of an ISBN-10 's digits is a check digit, otherwise known as a checksum, which is a number related mathematically to its preceding digits. The digits of an ISBN-10 are supposed to adhere to a formula, and this check digit allows you to verify whether an ISBN-10 's other nine digits are valid, without having to resort to other means of verification, for instance, by performing a query on a database of books.","title":"Background Theory"},{"location":"pset08/#calculating-the-check-digit","text":"The check digit of an ISBN-10 number can be defined as follows. If x_1 x_1 represents an ISBN-10 's first digit, and x_{10} x_{10} represents its last digit, then we have the following: x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 In other words, to compute an ISBN-10 's tenth digit, multiply its first digit by 1, its second digit by 2, its third digit by 3, its fourth digit by 4, its fifth digit by 5, its sixth digit by 6, its seventh digit by 7, its eighth digit by 8, and its ninth digit by 9. Take the sum of those products and perform a modulus with 11. The result should be the ISBN-10 's tenth digit.","title":"Calculating the Check Digit"},{"location":"pset08/#example-case","text":"For example, the ISBN-10 for the textbook Absolute Beginner's Guide to C , is 0-789-75198-4 , the tenth digit of which is 4 . Let's take the sum of the products of the ISBN-10 's first nine digits: (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 If we now compute 290 modulus 11, we get a result of 4, which is equal to the tenth digit in the ISBN-10 . This verifies that the ISBN-10 number is legitimate.","title":"Example Case"},{"location":"pset08/#hints","text":"Note that the ISBN-10 is being read in as a string, and it gets converted to an integer by using the Integer.parseInt() function. The reason for this procedure is to accommodate ISBN-10 's with leading zeros. Now that we have an ISBN-10 in integer form, how can we get at its tenth(i.e. rightmost) digit? Perhaps we can make a clever use of the modulus operator: tenth = isbncode % 10 Now, how can we get a that same variable's ninth digit? Perhaps we can get rid of its tenth digit by using integer division: isbncode = isbncode // 10 Afterwards, we can access the ninth digit by using the modulus operator: ninth = isbncode % 10 Hopefully, you can detect a pattern here. Remember that a certain looping construct such as the for loop can be very useful here.","title":"Hints"},{"location":"pset08/#code-distribution","text":"Description File Size File Name Java Source Code for Book Identifier 4.9KB pset08.zip Contents of pset08.zip : PSet08BookIdentifier/ \u251c\u2500\u2500 BookIdentifier.class \u251c\u2500\u2500 BookIdentifier.ctxt \u251c\u2500\u2500 BookIdentifier.java \u251c\u2500\u2500 BookIdentifierJUnitTest.class \u251c\u2500\u2500 BookIdentifierJUnitTest.ctxt \u251c\u2500\u2500 BookIdentifierJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset08/#specification","text":"Write a Java program in the file BookIdentifier.java that determines whether an ISBN-10 number is legitimate or not. You will write your solution in a function called validateBook(String isbnCode) right below the place where it says: YOUR CODE HERE If the ISBN-10 number is valid, then your validateBook method should return the string YES . Otherwise, if the ISBN-10 number is not valid, then your validateBook method should return the string NO . When the function call validateBook(\"0789751984\") is executed, the output of the program should be: YES","title":"Specification"},{"location":"pset08/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset08/#submission","text":"Upload the file BookIdentifier.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset09/","text":"Problem Set 9: Radiation Exposure Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 18, 2019 Total Points: 10 Implement a Java program that determines the amount of radiation a person is exposed to, in a given period of time. Background Theory Radioactive decay is the process by which an unstable atom loses energy and emits ionizing particles, in what is commonly referred to as radiation. Exposure to radiation can be dangerous, and is very important to measure, to ensure that a person is not exposed to a large amount of it. The radioactivity of a material decreases over time, as the material decays. A radioactive decay curve describes this decay. The x-axis measures time, and the y-axis measures the amount of activity produced by the radioactive sample. Activity is defined as the rate at which the nuclei within the sample undergo transitions. Put simply, this measures how much radiation is emitted at any one point in time. The measurement of activity is called the Becquerel(Bq) . The following diagram is a sample of a radioactive decay curve. The Problem Scope Here's the problem we'd like to solve. Let's say that Sarina has moved into a new apartment. Unknown to her, there is a sample of Cobalt-60 inside one of the walls of the apartment. Initially, that sample had 10MBq of activity, but she moves in after the sample had been there for 5 years. She lives in the apartment for 6 years, then leaves. How much radiation was she exposed to? We can actually figure this out using the radioactive decay curve from above. What we want to know is her total radiation exposure from year 5 to year 11. Total radiaton exposure corresponds to the area between the two green lines at time = 5 and time = 11 , and under the blue radioactive decay curve. This should make intuitive sense, if the x axis measures time, and the y axis measures activity, then the area under the curve measures (time * activity), or (years * MBq), which is approximately the total number of MBq that Sarnia was exposed to during her time in the apartment. Now, how do we calculate this area? Unlike a simple shape, like a square, or a circle, we have no easy way to determine what the area under this curve is. However, there is a technique that can provide us with some assistance, namely, approximation . Let's use an approximation algorithm to estimate the area under the curve. We can do so by first splitting up the area into equally-sized rectangles. In this case, there are six of them, corresponding to one rectangle per year: Once we've done that, we can figure out the area of each rectangle pretty easily. Recall that the area of a rectangle is determined by multiplying the height of a rectangle by its width. The height of this rectangle is the value of the curve at 5.0 . If the curve is described by a function, f(x) , then we can obtain the value of the curve by calculating f(5.0) . f(5.0) = 5.181 The width of this rectangle is 1.0 . So, the area of this single rectangle is: 1.0 * 5.181 = 5.181 . To approximate how much radiation Sarina was exposed to, we then calculate the area of each successive rectangle, and then sum up the areas of each rectangle to get the total. When we do this, we find that Sarina was exposed to 22.94241041057671 MBq of radiation. Hints In this problem set, you are asked to find the amount of radiation that a person is exposed to, during some period of time. In order to complete this assignment, you'll need to know what the value of the radioactive decay curve is, at various points. There is a function f(x) that has been provided for you, which mathematically describes the radioactive decay curve for this problem. This problem set is relatively straightforward if you only consider the cases where the widths of the rectangles are integer values. Those cases can be handled with a simple for loop. Therefore, you will need to seek an approach that can handle decimal-valued rectangle widths. You should find out the number of rectangles that are within the defined region. How would you calculate this number? Perhaps the following equation would work: int gaps = (int)((stop-start)/step); Then, you should create an array which has the same size as the number of rectangles, with all of its elements initialized to 0.0 . Perhaps you should call this array timePosts . Next, you should loop across the timePosts array, and fill it with time values that correspond to the position of each rectangle. For the example described in the Background section, the timePosts array would be as follows: timePosts = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0] Then, it is simply a matter of looping across the timePosts array, calculating the product of f(x)*step , and summing each of these products to result in the area under the curve. Code Distribution Description File Size File Name Java Source Code for Radiation Exposure 5.4KB pset09.zip Contents of pset09.zip : PSet09RadiationExposure/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 RadiationExposure.class \u251c\u2500\u2500 RadiationExposure.ctxt \u251c\u2500\u2500 RadiationExposure.java \u251c\u2500\u2500 RadiationExposureJUnitTest.class \u251c\u2500\u2500 RadiationExposureJUnitTest.ctxt \u251c\u2500\u2500 RadiationExposureJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file RadiationExposure.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called decayCurveArea(int start, int stop, double step) right below the place where it says: YOUR CODE HERE When the function call decayCurveArea(5, 11, 1.0) is executed, the output of the program should be: 22.94241041057671 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file RadiationExposure.java to the Web-CAT automated grading platform.","title":"Problem Set 9: Radiation Exposure"},{"location":"pset09/#problem-set-9-radiation-exposure","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 9: Radiation Exposure"},{"location":"pset09/#task-outline","text":"Due Date: Monday, November 18, 2019 Total Points: 10 Implement a Java program that determines the amount of radiation a person is exposed to, in a given period of time.","title":"Task Outline"},{"location":"pset09/#background-theory","text":"Radioactive decay is the process by which an unstable atom loses energy and emits ionizing particles, in what is commonly referred to as radiation. Exposure to radiation can be dangerous, and is very important to measure, to ensure that a person is not exposed to a large amount of it. The radioactivity of a material decreases over time, as the material decays. A radioactive decay curve describes this decay. The x-axis measures time, and the y-axis measures the amount of activity produced by the radioactive sample. Activity is defined as the rate at which the nuclei within the sample undergo transitions. Put simply, this measures how much radiation is emitted at any one point in time. The measurement of activity is called the Becquerel(Bq) . The following diagram is a sample of a radioactive decay curve.","title":"Background Theory"},{"location":"pset09/#the-problem-scope","text":"Here's the problem we'd like to solve. Let's say that Sarina has moved into a new apartment. Unknown to her, there is a sample of Cobalt-60 inside one of the walls of the apartment. Initially, that sample had 10MBq of activity, but she moves in after the sample had been there for 5 years. She lives in the apartment for 6 years, then leaves. How much radiation was she exposed to? We can actually figure this out using the radioactive decay curve from above. What we want to know is her total radiation exposure from year 5 to year 11. Total radiaton exposure corresponds to the area between the two green lines at time = 5 and time = 11 , and under the blue radioactive decay curve. This should make intuitive sense, if the x axis measures time, and the y axis measures activity, then the area under the curve measures (time * activity), or (years * MBq), which is approximately the total number of MBq that Sarnia was exposed to during her time in the apartment. Now, how do we calculate this area? Unlike a simple shape, like a square, or a circle, we have no easy way to determine what the area under this curve is. However, there is a technique that can provide us with some assistance, namely, approximation . Let's use an approximation algorithm to estimate the area under the curve. We can do so by first splitting up the area into equally-sized rectangles. In this case, there are six of them, corresponding to one rectangle per year: Once we've done that, we can figure out the area of each rectangle pretty easily. Recall that the area of a rectangle is determined by multiplying the height of a rectangle by its width. The height of this rectangle is the value of the curve at 5.0 . If the curve is described by a function, f(x) , then we can obtain the value of the curve by calculating f(5.0) . f(5.0) = 5.181 The width of this rectangle is 1.0 . So, the area of this single rectangle is: 1.0 * 5.181 = 5.181 . To approximate how much radiation Sarina was exposed to, we then calculate the area of each successive rectangle, and then sum up the areas of each rectangle to get the total. When we do this, we find that Sarina was exposed to 22.94241041057671 MBq of radiation.","title":"The Problem Scope"},{"location":"pset09/#hints","text":"In this problem set, you are asked to find the amount of radiation that a person is exposed to, during some period of time. In order to complete this assignment, you'll need to know what the value of the radioactive decay curve is, at various points. There is a function f(x) that has been provided for you, which mathematically describes the radioactive decay curve for this problem. This problem set is relatively straightforward if you only consider the cases where the widths of the rectangles are integer values. Those cases can be handled with a simple for loop. Therefore, you will need to seek an approach that can handle decimal-valued rectangle widths. You should find out the number of rectangles that are within the defined region. How would you calculate this number? Perhaps the following equation would work: int gaps = (int)((stop-start)/step); Then, you should create an array which has the same size as the number of rectangles, with all of its elements initialized to 0.0 . Perhaps you should call this array timePosts . Next, you should loop across the timePosts array, and fill it with time values that correspond to the position of each rectangle. For the example described in the Background section, the timePosts array would be as follows: timePosts = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0] Then, it is simply a matter of looping across the timePosts array, calculating the product of f(x)*step , and summing each of these products to result in the area under the curve.","title":"Hints"},{"location":"pset09/#code-distribution","text":"Description File Size File Name Java Source Code for Radiation Exposure 5.4KB pset09.zip Contents of pset09.zip : PSet09RadiationExposure/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 RadiationExposure.class \u251c\u2500\u2500 RadiationExposure.ctxt \u251c\u2500\u2500 RadiationExposure.java \u251c\u2500\u2500 RadiationExposureJUnitTest.class \u251c\u2500\u2500 RadiationExposureJUnitTest.ctxt \u251c\u2500\u2500 RadiationExposureJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset09/#specification","text":"Write a Java program in the file RadiationExposure.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called decayCurveArea(int start, int stop, double step) right below the place where it says: YOUR CODE HERE When the function call decayCurveArea(5, 11, 1.0) is executed, the output of the program should be: 22.94241041057671","title":"Specification"},{"location":"pset09/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset09/#submission","text":"Upload the file RadiationExposure.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"references/","text":"Tutorials The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf Installing the Dr. Java IDE (for a Windows system) Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe Reference Material Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf Exam Preparation Guide, 8th Edition Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"References"},{"location":"references/#tutorials","text":"The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf","title":"Tutorials"},{"location":"references/#installing-the-dr-java-idefor-a-windows-system","text":"Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe","title":"Installing the Dr. Java IDE(for a Windows system)"},{"location":"references/#reference-material","text":"Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf","title":"Reference Material"},{"location":"references/#exam-preparation-guide-8th-edition","text":"Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"Exam Preparation Guide, 8th Edition"},{"location":"syllabus/","text":"Syllabus AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources. Course Location Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login Teaching Assistant Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets. Course Description Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike. Reference Material Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class. Hardware Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported. Homework Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 . Plagiarism Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 . Grading Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment. Assignment Weighting Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40% Course Websites Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Syllabus"},{"location":"syllabus/#syllabus","text":"AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources.","title":"Syllabus"},{"location":"syllabus/#course-location","text":"Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login","title":"Course Location"},{"location":"syllabus/#teaching-assistant","text":"Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets.","title":"Teaching Assistant"},{"location":"syllabus/#course-description","text":"Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike.","title":"Course Description"},{"location":"syllabus/#reference-material","text":"Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class.","title":"Reference Material"},{"location":"syllabus/#hardware","text":"Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported.","title":"Hardware"},{"location":"syllabus/#homework","text":"Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 .","title":"Homework"},{"location":"syllabus/#plagiarism","text":"Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 .","title":"Plagiarism"},{"location":"syllabus/#grading","text":"Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment.","title":"Grading"},{"location":"syllabus/#assignment-weighting","text":"Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40%","title":"Assignment Weighting"},{"location":"syllabus/#course-websites","text":"Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Course Websites"}]}