{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AP Computer Science A Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes. Announcements Grade 12 Students: Your Semester 2 Exam will be held on Tuesday, June 9th at 3:00PM. Grade 11 Students: Your Semester 2 Exam will be held on Wednesday, June 24th at 10:00AM. Problem Sets Problem Set 12 : Library Rental Problem Set 13 : Stock Broker Problem Set 14 : Gene Extraction Problem Set 15 : Bar Code Course Calendar: Semester Two Academic dates are in italics , course assessment deadlines are in bold . June 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 Make-up Day 7 8 9 3:00PM: G12 Semester 2 Exam 10 11 12 13 Make-up Day 14 15 16 17 18 19 20 Make-up Day 21 22 23 24 10:00AM: G11 Semester 2 Exam 25 Dragon Boat Holiday 26 Dragon Boat Holiday 27 28 Make-up Day 29 30 July 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 Summer Break Begins 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"Home"},{"location":"#ap-computer-science-a","text":"Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes.","title":"AP Computer Science A"},{"location":"#announcements","text":"Grade 12 Students: Your Semester 2 Exam will be held on Tuesday, June 9th at 3:00PM. Grade 11 Students: Your Semester 2 Exam will be held on Wednesday, June 24th at 10:00AM.","title":"Announcements"},{"location":"#problem-sets","text":"Problem Set 12 : Library Rental Problem Set 13 : Stock Broker Problem Set 14 : Gene Extraction Problem Set 15 : Bar Code","title":"Problem Sets"},{"location":"#course-calendar-semester-two","text":"Academic dates are in italics , course assessment deadlines are in bold .","title":"Course Calendar: Semester Two"},{"location":"#june-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 Make-up Day 7 8 9 3:00PM: G12 Semester 2 Exam 10 11 12 13 Make-up Day 14 15 16 17 18 19 20 Make-up Day 21 22 23 24 10:00AM: G11 Semester 2 Exam 25 Dragon Boat Holiday 26 Dragon Boat Holiday 27 28 Make-up Day 29 30","title":"June 2020"},{"location":"#july-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 Summer Break Begins 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"July 2020"},{"location":"frqs/","text":"Free Response Questions The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip apline.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB wordpair.zip tester.zip apCSA2019.pdf 279KB steptracker.zip delimiters.zip","title":"FRQs"},{"location":"frqs/#free-response-questions","text":"The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip apline.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB wordpair.zip tester.zip apCSA2019.pdf 279KB steptracker.zip delimiters.zip","title":"Free Response Questions"},{"location":"lab01/","text":"Lab 1: Easter Sunday Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears. Code Distribution Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE . Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#lab-1-easter-sunday","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#background","text":"Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears.","title":"Background"},{"location":"lab01/#code-distribution","text":"Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab01/#specification","text":"Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE .","title":"Specification"},{"location":"lab01/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab01/#submission","text":"Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab02/","text":"Lab 2: Movie Critic Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie. Background Theory You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned. Code Distribution Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#lab-2-movie-critic","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#task-outline","text":"Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie.","title":"Task Outline"},{"location":"lab02/#background-theory","text":"You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned.","title":"Background Theory"},{"location":"lab02/#code-distribution","text":"Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab02/#specification","text":"Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested","title":"Specification"},{"location":"lab02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab02/#submission","text":"Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab03/","text":"Lab 3: Coin Change Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Saturday, October 12, 2019 Total Points: 10 Implement a Java program that calculates the minimum number of coins required to give a user change. Background Theory A greedy algorithm is one, \"that always takes the best immediate, or local, solution while finding an answer.\" Suppose a cashier owes a customer some change, and that cashier wishes to minimize the quantity of quarters, dimes, nickels and pennies that are dispensed to the customer. A greedy algorithm is one that would take, on each pass, the biggest bite out of this problem as possible. For example, if a customer is owed 41 cents, the biggest first(i.e., best immediate, or local) bite that can be taken is 25 cents. That bite is the \"best,\" as it gets us closer to 0 cents faster than any other coin would. Note that a bite of this size would reduce what was a 41 cent problem down to a 16 cent problem, since 41 - 25 = 16 . Another 25 cent bite would be too big, so our cashier would move on to a bite of size 10 cent, resulting in a 6 cent problem. At that point, the greedy algorithm calls for one 5 cent bite followed by one 1 cent bite, at which point the problem is solved. The result of this greedy algorithm is that the customer receives one quarter, one dime, one nickel, and one penny: four coins in total. Hints There are a few different ways in which this assignment can be solved. One of the ways is with a clever use of the integer division operator. Code Distribution Description File Size File Name Java Source Code for Coin Change 4.4KB lab03.zip Contents of lab03.zip : Lab03CoinChange/ \u251c\u2500\u2500 CoinChange.class \u251c\u2500\u2500 CoinChange.ctxt \u251c\u2500\u2500 CoinChange.java \u251c\u2500\u2500 CoinChangeJUnitTest.class \u251c\u2500\u2500 CoinChangeJUnitTest.ctxt \u251c\u2500\u2500 CoinChangeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file CoinChange.java that outputs the minimum number of coins that can be dispensed from a given quantity of cents. Assume that the only coins available are quarters(25 cents), dimes(10 cents), nickels(5 cents), and pennies(1 cent). You will write your solution in a function called minimumCoins(int cents) right below the place where it says: YOUR CODE HERE When the function call minimumCoins(41) is executed, the output of the program should be: 4 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CoinChange.java to the Web-CAT automated grading platform.","title":"Lab 3: Coin Change"},{"location":"lab03/#lab-3-coin-change","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 3: Coin Change"},{"location":"lab03/#task-outline","text":"Due Date: Saturday, October 12, 2019 Total Points: 10 Implement a Java program that calculates the minimum number of coins required to give a user change.","title":"Task Outline"},{"location":"lab03/#background-theory","text":"A greedy algorithm is one, \"that always takes the best immediate, or local, solution while finding an answer.\" Suppose a cashier owes a customer some change, and that cashier wishes to minimize the quantity of quarters, dimes, nickels and pennies that are dispensed to the customer. A greedy algorithm is one that would take, on each pass, the biggest bite out of this problem as possible. For example, if a customer is owed 41 cents, the biggest first(i.e., best immediate, or local) bite that can be taken is 25 cents. That bite is the \"best,\" as it gets us closer to 0 cents faster than any other coin would. Note that a bite of this size would reduce what was a 41 cent problem down to a 16 cent problem, since 41 - 25 = 16 . Another 25 cent bite would be too big, so our cashier would move on to a bite of size 10 cent, resulting in a 6 cent problem. At that point, the greedy algorithm calls for one 5 cent bite followed by one 1 cent bite, at which point the problem is solved. The result of this greedy algorithm is that the customer receives one quarter, one dime, one nickel, and one penny: four coins in total.","title":"Background Theory"},{"location":"lab03/#hints","text":"There are a few different ways in which this assignment can be solved. One of the ways is with a clever use of the integer division operator.","title":"Hints"},{"location":"lab03/#code-distribution","text":"Description File Size File Name Java Source Code for Coin Change 4.4KB lab03.zip Contents of lab03.zip : Lab03CoinChange/ \u251c\u2500\u2500 CoinChange.class \u251c\u2500\u2500 CoinChange.ctxt \u251c\u2500\u2500 CoinChange.java \u251c\u2500\u2500 CoinChangeJUnitTest.class \u251c\u2500\u2500 CoinChangeJUnitTest.ctxt \u251c\u2500\u2500 CoinChangeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab03/#specification","text":"Write a Java program in the file CoinChange.java that outputs the minimum number of coins that can be dispensed from a given quantity of cents. Assume that the only coins available are quarters(25 cents), dimes(10 cents), nickels(5 cents), and pennies(1 cent). You will write your solution in a function called minimumCoins(int cents) right below the place where it says: YOUR CODE HERE When the function call minimumCoins(41) is executed, the output of the program should be: 4","title":"Specification"},{"location":"lab03/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab03/#submission","text":"Upload the file CoinChange.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab04/","text":"Lab 4: Gene Detection Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, October 18, 2019 Total Points: 10 Implement a Java program that determines which gene is present in a DNA sequence. Background Theory DNA is often described as a double helix of molecules known as nucleotides . Only four DNA nucleotides exist, and they are known by the labels A, C, G, and T. This means that we can conveniently represent a DNA sequence with a Java text string. A cluster of three nucleotides is called a codon , and they represent amino acids which are present in DNA. For example, ATG is a codon which occurs throughout a DNA sequence. Codons are significant, because they are markers which indicate the presence of a gene . ATG is the start codon which marks the beginning of a gene sequence. All of the nucleotides which are present, right up to, and including the stop codon are part of the gene. Example Case Consider the following DNA sequence: ATATGTAGCTAGCATAATA The start codon is ATG , and the stop codon for this example is TAA . Note that there are 9 nucleotides between these codons: AT ATGTAGCTAGCATAA TA Therefore, the gene sequence which results from these codons is: ATGTAGCTAGCATAA Hints Note that we will not consider the case where a gene is absent from a DNA sequence. All of the DNA sequences used in the test benches have exactly one gene for you to find. Also, each of the DNA sequences will have exactly one stop codon for your program to locate. In other words, there will not be multiple stop codons in the gene sequences. Code Distribution Description File Size File Name Java Source Code for Gene Detection 5.2KB lab04.zip Contents of lab04.zip : Lab04GeneDetection/ \u251c\u2500\u2500 GeneDetection.class \u251c\u2500\u2500 GeneDetection.ctxt \u251c\u2500\u2500 GeneDetection.java \u251c\u2500\u2500 GeneDetectionJUnitTest.class \u251c\u2500\u2500 GeneDetectionJUnitTest.ctxt \u251c\u2500\u2500 GeneDetectionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file GeneDetection.java that finds and displays a single gene which is present in a DNA sequence. You will write your solution in a function called findGene(String dna, String stopCodon) right below the place where it says: YOUR CODE HERE When the function call findGene(\"ATATGTAGCTAGCATAATA\", \"TAA\") is executed, the output of the program should be: ATGTAGCTAGCATAA Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file GeneDetection.java to the Web-CAT automated grading platform.","title":"Lab 4: Gene Detection"},{"location":"lab04/#lab-4-gene-detection","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 4: Gene Detection"},{"location":"lab04/#task-outline","text":"Due Date: Friday, October 18, 2019 Total Points: 10 Implement a Java program that determines which gene is present in a DNA sequence.","title":"Task Outline"},{"location":"lab04/#background-theory","text":"DNA is often described as a double helix of molecules known as nucleotides . Only four DNA nucleotides exist, and they are known by the labels A, C, G, and T. This means that we can conveniently represent a DNA sequence with a Java text string. A cluster of three nucleotides is called a codon , and they represent amino acids which are present in DNA. For example, ATG is a codon which occurs throughout a DNA sequence. Codons are significant, because they are markers which indicate the presence of a gene . ATG is the start codon which marks the beginning of a gene sequence. All of the nucleotides which are present, right up to, and including the stop codon are part of the gene.","title":"Background Theory"},{"location":"lab04/#example-case","text":"Consider the following DNA sequence: ATATGTAGCTAGCATAATA The start codon is ATG , and the stop codon for this example is TAA . Note that there are 9 nucleotides between these codons: AT ATGTAGCTAGCATAA TA Therefore, the gene sequence which results from these codons is: ATGTAGCTAGCATAA","title":"Example Case"},{"location":"lab04/#hints","text":"Note that we will not consider the case where a gene is absent from a DNA sequence. All of the DNA sequences used in the test benches have exactly one gene for you to find. Also, each of the DNA sequences will have exactly one stop codon for your program to locate. In other words, there will not be multiple stop codons in the gene sequences.","title":"Hints"},{"location":"lab04/#code-distribution","text":"Description File Size File Name Java Source Code for Gene Detection 5.2KB lab04.zip Contents of lab04.zip : Lab04GeneDetection/ \u251c\u2500\u2500 GeneDetection.class \u251c\u2500\u2500 GeneDetection.ctxt \u251c\u2500\u2500 GeneDetection.java \u251c\u2500\u2500 GeneDetectionJUnitTest.class \u251c\u2500\u2500 GeneDetectionJUnitTest.ctxt \u251c\u2500\u2500 GeneDetectionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab04/#specification","text":"Write a Java program in the file GeneDetection.java that finds and displays a single gene which is present in a DNA sequence. You will write your solution in a function called findGene(String dna, String stopCodon) right below the place where it says: YOUR CODE HERE When the function call findGene(\"ATATGTAGCTAGCATAATA\", \"TAA\") is executed, the output of the program should be: ATGTAGCTAGCATAA","title":"Specification"},{"location":"lab04/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab04/#submission","text":"Upload the file GeneDetection.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab05/","text":"Lab 5: Smooth Signal Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 1, 2019 Total Points: 10 Implement a Java program that smoothes an audio signal by averaging an array of integers. Background Theory An audio signal is sometimes stored as an array of integer values. The values represent the intensity of the signal at successive time intervals. Of course, in a program, the signal is represented with an array. Often, a small amount of noise is included in the signal. Noise is usually small, momentary changes in the signal level. An example is the static that is heard in addition to the signal in AM radio. Smoothing a signal removes some of the noise, and improves the perceptual quality of the signal. This assignment requires you to smooth the values in an array of integers. Hints First, you should create a result array called smooth , which has exactly the same size as the audio array. The first element of the smooth array is a special case, because it should be calculated from the average of the first two elements of the audio array. The last element of the smooth array is also a special case, because it should be calculated from the average of the last two elments of the audio array. The internal elements of the smooth array can be calculated from a for loop in the following manner. First, you will need to determine the boundaries of this loop. You should probably begin at index 1 , and go up to index audio.length-1 . Then, you will need to calculate the average of three elements in the audio array, for every index i . In other words, you will need to calculate the average of the three values: audio[i-1] , audio[i] , and audio[i+1] . Code Distribution Description File Size File Name Java Source Code for Smooth Signal 6.2KB lab05.zip Contents of lab05.zip : Lab05SmoothSignal/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SmoothSignal.class \u251c\u2500\u2500 SmoothSignal.ctxt \u251c\u2500\u2500 SmoothSignal.java \u251c\u2500\u2500 SmoothSignalJUnitTest.class \u251c\u2500\u2500 SmoothSignalJUnitTest.ctxt \u2514\u2500\u2500 SmoothSignalJUnitTest.java Specification Write a Java program in the file SmoothSignal.java that smoothes an audio signal by averaging an array of integers. You will write your solution in a function called levelling(int[] audio) right below the place where it says: YOUR CODE HERE When the function call levelling([1, 5, 4, 5, 7, 6, 8, 6, 5, 4, 5, 4]) is executed, the output of the program should be: [3 3 4 5 6 7 6 6 5 4 4 4 ] Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file SmoothSignal.py to the Web-CAT automated grading platform.","title":"Lab 5: Smooth Signal"},{"location":"lab05/#lab-5-smooth-signal","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 5: Smooth Signal"},{"location":"lab05/#task-outline","text":"Due Date: Friday, November 1, 2019 Total Points: 10 Implement a Java program that smoothes an audio signal by averaging an array of integers.","title":"Task Outline"},{"location":"lab05/#background-theory","text":"An audio signal is sometimes stored as an array of integer values. The values represent the intensity of the signal at successive time intervals. Of course, in a program, the signal is represented with an array. Often, a small amount of noise is included in the signal. Noise is usually small, momentary changes in the signal level. An example is the static that is heard in addition to the signal in AM radio. Smoothing a signal removes some of the noise, and improves the perceptual quality of the signal. This assignment requires you to smooth the values in an array of integers.","title":"Background Theory"},{"location":"lab05/#hints","text":"First, you should create a result array called smooth , which has exactly the same size as the audio array. The first element of the smooth array is a special case, because it should be calculated from the average of the first two elements of the audio array. The last element of the smooth array is also a special case, because it should be calculated from the average of the last two elments of the audio array. The internal elements of the smooth array can be calculated from a for loop in the following manner. First, you will need to determine the boundaries of this loop. You should probably begin at index 1 , and go up to index audio.length-1 . Then, you will need to calculate the average of three elements in the audio array, for every index i . In other words, you will need to calculate the average of the three values: audio[i-1] , audio[i] , and audio[i+1] .","title":"Hints"},{"location":"lab05/#code-distribution","text":"Description File Size File Name Java Source Code for Smooth Signal 6.2KB lab05.zip Contents of lab05.zip : Lab05SmoothSignal/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SmoothSignal.class \u251c\u2500\u2500 SmoothSignal.ctxt \u251c\u2500\u2500 SmoothSignal.java \u251c\u2500\u2500 SmoothSignalJUnitTest.class \u251c\u2500\u2500 SmoothSignalJUnitTest.ctxt \u2514\u2500\u2500 SmoothSignalJUnitTest.java","title":"Code Distribution"},{"location":"lab05/#specification","text":"Write a Java program in the file SmoothSignal.java that smoothes an audio signal by averaging an array of integers. You will write your solution in a function called levelling(int[] audio) right below the place where it says: YOUR CODE HERE When the function call levelling([1, 5, 4, 5, 7, 6, 8, 6, 5, 4, 5, 4]) is executed, the output of the program should be: [3 3 4 5 6 7 6 6 5 4 4 4 ]","title":"Specification"},{"location":"lab05/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab05/#submission","text":"Upload the file SmoothSignal.py to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab06/","text":"Lab 6: Caesar Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 8, 2019 Total Points: 10 Implement a Java program that encrypts a message using the caesar cipher. Background Theory The main idea behind the Caesar Cipher is to shift each letter in a secret message by a fixed number of positions. If this shifting behaviour goes further than the end of the alphabet, then it wraps around to the beginning, and continues from there. The security of this crypto-system relies on having only the sender and the recipient know the secret key , which is the number of places by which the letters have been shifted. Hints Unencrypted text is generally called plaintext , and encrypted text is generally known as ciphertext . The quantity by which the letters have been shifted is called a key . In general, the Caesar Cipher encrypts messages by rotating each letter by key positions. More formally, if p is the alphabet index of a plaintext letter, and key is the amount by which that letter is shifted, then the alphabet index of the corresponding letter in the ciphertext c , is computed by the following equation: c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 You may assume that all of the characters in the plaintext messages are in lowercase . There will be no punctuation present in any of the plaintext messages, with the exception of the space character. You should design your program so that any spaces in the plaintext message are transferred into the encrypted ciphertext. Note that the complete lowercase alphabet has been provided for you: String alphabet = \"abcdefghijklmnopqrstuvwxyz\"; This means that \"a\" corresponds to index 0 , \"b\" corresponds to index 1 , etc. Code Distribution Description File Size File Name Java Source Code for Caesar Cipher 5.6KB lab06.zip Contents of lab06.zip : Lab06CaesarCipher/ \u251c\u2500\u2500 CaesarCipher.class \u251c\u2500\u2500 CaesarCipher.ctxt \u251c\u2500\u2500 CaesarCipher.java \u251c\u2500\u2500 CaesarCipherJUnitTest.class \u251c\u2500\u2500 CaesarCipherJUnitTest.ctxt \u251c\u2500\u2500 CaesarCipherJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file CaesarCipher.java that encrypts a message using the caesar cipher. You will write your solution in a function called encrypt(String message, int key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", 1) is executed, the output of the program should be: ifmmp Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CaesarCipher.java to the Web-CAT automated grading platform.","title":"Lab 6: Caesar Cipher"},{"location":"lab06/#lab-6-caesar-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 6: Caesar Cipher"},{"location":"lab06/#task-outline","text":"Due Date: Friday, November 8, 2019 Total Points: 10 Implement a Java program that encrypts a message using the caesar cipher.","title":"Task Outline"},{"location":"lab06/#background-theory","text":"The main idea behind the Caesar Cipher is to shift each letter in a secret message by a fixed number of positions. If this shifting behaviour goes further than the end of the alphabet, then it wraps around to the beginning, and continues from there. The security of this crypto-system relies on having only the sender and the recipient know the secret key , which is the number of places by which the letters have been shifted.","title":"Background Theory"},{"location":"lab06/#hints","text":"Unencrypted text is generally called plaintext , and encrypted text is generally known as ciphertext . The quantity by which the letters have been shifted is called a key . In general, the Caesar Cipher encrypts messages by rotating each letter by key positions. More formally, if p is the alphabet index of a plaintext letter, and key is the amount by which that letter is shifted, then the alphabet index of the corresponding letter in the ciphertext c , is computed by the following equation: c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 c = (p + \\mbox{key})\\, \\mbox{mod}\\, 26 You may assume that all of the characters in the plaintext messages are in lowercase . There will be no punctuation present in any of the plaintext messages, with the exception of the space character. You should design your program so that any spaces in the plaintext message are transferred into the encrypted ciphertext. Note that the complete lowercase alphabet has been provided for you: String alphabet = \"abcdefghijklmnopqrstuvwxyz\"; This means that \"a\" corresponds to index 0 , \"b\" corresponds to index 1 , etc.","title":"Hints"},{"location":"lab06/#code-distribution","text":"Description File Size File Name Java Source Code for Caesar Cipher 5.6KB lab06.zip Contents of lab06.zip : Lab06CaesarCipher/ \u251c\u2500\u2500 CaesarCipher.class \u251c\u2500\u2500 CaesarCipher.ctxt \u251c\u2500\u2500 CaesarCipher.java \u251c\u2500\u2500 CaesarCipherJUnitTest.class \u251c\u2500\u2500 CaesarCipherJUnitTest.ctxt \u251c\u2500\u2500 CaesarCipherJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab06/#specification","text":"Write a Java program in the file CaesarCipher.java that encrypts a message using the caesar cipher. You will write your solution in a function called encrypt(String message, int key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", 1) is executed, the output of the program should be: ifmmp","title":"Specification"},{"location":"lab06/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab06/#submission","text":"Upload the file CaesarCipher.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab07/","text":"Lab 7: Polybius Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 15, 2019 Total Points: 10 Implement a Java program that decrypts a message using the polybius cipher. Background Theory The Polybius Square is an ancient Greek invention, discovered by a scholar named Polybius. It consists of a 5 by 5 grid, in which each square of the grid is filled in by a single letter. In this programming assignment, the grid has been enlarged to 6 by 6, so that it can accommodate the digits 0-9, as well as all the alphabet letters. Each letter in the grid can be represented by the two numbers that indicate its position in the grid. The first number denotes the specific row, and the second number denotes the column. In this manner, the letter \"q\" would be encoded by the digits 24 . Even though this method of encryption seems feasible, it is not very secure. We need to introduce the notion of a key , in order to increase the security of this encryption system. We can achieve this by simply re-ordering the placement of the alphabet and digits, before inserting them into the grid. In this updated version of the grid, the letter \"q\" would be encoded by the digits 45 . Decrypting a message is quite easy, simply use the pairs of numbers to locate each plaintext letter in the grid. For example, the number sequence \"0520020214\" can be decoded to the word \"hello\" . Hints You will notice that you are not given a sequence of numbers to decode. Instead, you are provided with a series of letters. Upon close inspection, you should notice that the provided letters consist of the symbols \"a\" , \"b\" , \"c\" , \"d\" , \"e\" and \"f\" . Each of the letter symbols corresponds to a row or column number in the polybius grid. Specifically, \"a\" = 0 , \"b\" = 1 , \"c\" = 2 , \"d\" = 3 , \"e\" = 4 and \"f\" = 5 . Your first task is to transform these letter symbols into their corresponding number symbols. You are provided with the following: String alpha = \"abcdef\"; Note that each letter is placed in accordance with its associated index. You should use the method indexOf() to extract each letter's index. Make sure that your resulting number sequence is in a string format. Then, you must separate out pairs of digits from this number sequence, and perform a lookup in the two-dimensional key grid. The first number from the pair corresponds to the the row, and the second digit corresponds to the column. A lookup in a two-dimensional grid can be achieved by using two pairs of square brackets as follows: letter = key[row][column] Code Distribution Description File Size File Name Java Source Code for Polybius Cipher 6.8KB lab07.zip Contents of lab07.zip : Lab07PolybiusCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 PolybiusCipher.class \u251c\u2500\u2500 PolybiusCipher.ctxt \u251c\u2500\u2500 PolybiusCipher.java \u251c\u2500\u2500 PolybiusCipherJUnitTest.class \u251c\u2500\u2500 PolybiusCipherJUnitTest.ctxt \u251c\u2500\u2500 PolybiusCipherJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file PolybiusCipher.py that decrypts a message using the polybius cipher. You will write your solution in a function called decrypt(String message, String[][] key) right below the place where it says: YOUR CODE HERE When the function call decrypt(\"bcfbfeacbdadafcacafacacedfffffabfa\", key) is executed, the output of the program should be: buy12cheesepizzas Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file PolybiusCipher.py to the Web-CAT automated grading platform.","title":"Lab 7: Polybius Cipher"},{"location":"lab07/#lab-7-polybius-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 7: Polybius Cipher"},{"location":"lab07/#task-outline","text":"Due Date: Friday, November 15, 2019 Total Points: 10 Implement a Java program that decrypts a message using the polybius cipher.","title":"Task Outline"},{"location":"lab07/#background-theory","text":"The Polybius Square is an ancient Greek invention, discovered by a scholar named Polybius. It consists of a 5 by 5 grid, in which each square of the grid is filled in by a single letter. In this programming assignment, the grid has been enlarged to 6 by 6, so that it can accommodate the digits 0-9, as well as all the alphabet letters. Each letter in the grid can be represented by the two numbers that indicate its position in the grid. The first number denotes the specific row, and the second number denotes the column. In this manner, the letter \"q\" would be encoded by the digits 24 . Even though this method of encryption seems feasible, it is not very secure. We need to introduce the notion of a key , in order to increase the security of this encryption system. We can achieve this by simply re-ordering the placement of the alphabet and digits, before inserting them into the grid. In this updated version of the grid, the letter \"q\" would be encoded by the digits 45 . Decrypting a message is quite easy, simply use the pairs of numbers to locate each plaintext letter in the grid. For example, the number sequence \"0520020214\" can be decoded to the word \"hello\" .","title":"Background Theory"},{"location":"lab07/#hints","text":"You will notice that you are not given a sequence of numbers to decode. Instead, you are provided with a series of letters. Upon close inspection, you should notice that the provided letters consist of the symbols \"a\" , \"b\" , \"c\" , \"d\" , \"e\" and \"f\" . Each of the letter symbols corresponds to a row or column number in the polybius grid. Specifically, \"a\" = 0 , \"b\" = 1 , \"c\" = 2 , \"d\" = 3 , \"e\" = 4 and \"f\" = 5 . Your first task is to transform these letter symbols into their corresponding number symbols. You are provided with the following: String alpha = \"abcdef\"; Note that each letter is placed in accordance with its associated index. You should use the method indexOf() to extract each letter's index. Make sure that your resulting number sequence is in a string format. Then, you must separate out pairs of digits from this number sequence, and perform a lookup in the two-dimensional key grid. The first number from the pair corresponds to the the row, and the second digit corresponds to the column. A lookup in a two-dimensional grid can be achieved by using two pairs of square brackets as follows: letter = key[row][column]","title":"Hints"},{"location":"lab07/#code-distribution","text":"Description File Size File Name Java Source Code for Polybius Cipher 6.8KB lab07.zip Contents of lab07.zip : Lab07PolybiusCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 PolybiusCipher.class \u251c\u2500\u2500 PolybiusCipher.ctxt \u251c\u2500\u2500 PolybiusCipher.java \u251c\u2500\u2500 PolybiusCipherJUnitTest.class \u251c\u2500\u2500 PolybiusCipherJUnitTest.ctxt \u251c\u2500\u2500 PolybiusCipherJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab07/#specification","text":"Write a Java program in the file PolybiusCipher.py that decrypts a message using the polybius cipher. You will write your solution in a function called decrypt(String message, String[][] key) right below the place where it says: YOUR CODE HERE When the function call decrypt(\"bcfbfeacbdadafcacafacacedfffffabfa\", key) is executed, the output of the program should be: buy12cheesepizzas","title":"Specification"},{"location":"lab07/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab07/#submission","text":"Upload the file PolybiusCipher.py to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab08/","text":"Lab 8: Substitution Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 22, 2019 Total Points: 10 Implement a Java program that encrypts a message using the substitution cipher. Background Theory In a substitution cipher, we encrypt a message by replacing every letter in a plaintext message with some other letter. In order to perform this encryption, we make use of a key . In the case of the substitution cipher, the key is a mapping of each of the letters of the alphabet to the letter that it should correspond to, when we encrypt it. To decrypt the message, the receiver of the message would need to know the key, so that they could reverse the process. A key , for example, might be the string jtrekyavogdxpsncuizlfbmwhq . This 26-character key means that a (the first letter of the alphabet) should be converted into j (the first letter of the key). Similarly, the letter b (the second letter of the alphabet) should be converted into t (the second letter of the key) and so on. Therefore, a message like hello would be encrypted as vkxxn , replacing each of the letters according to the mapping as determined by the key. Code Distribution Description File Size File Name Java Source Code for Substitution Cipher 6.0KB lab08.zip Contents of lab08.zip : Lab08SubstitutionCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SubstitutionCipher.class \u251c\u2500\u2500 SubstitutionCipher.ctxt \u251c\u2500\u2500 SubstitutionCipher.java \u251c\u2500\u2500 SubstitutionCipherJUnitTest.class \u251c\u2500\u2500 SubstitutionCipherJUnitTest.ctxt \u2514\u2500\u2500 SubstitutionCipherJUnitTest.java Specification Write a Java program in the file SubstitutionCipher.java that encrypts a message using the substitution cipher. You will write your solution in a function called encrypt(String message, String key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", \"jtrekyavogdxpsncuizlfbmwhq\") is executed, the output of the program should be: vkxxn Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file SubstitutionCipher.java to the Web-CAT automated grading platform.","title":"Lab 8: Substitution Cipher"},{"location":"lab08/#lab-8-substitution-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 8: Substitution Cipher"},{"location":"lab08/#task-outline","text":"Due Date: Friday, November 22, 2019 Total Points: 10 Implement a Java program that encrypts a message using the substitution cipher.","title":"Task Outline"},{"location":"lab08/#background-theory","text":"In a substitution cipher, we encrypt a message by replacing every letter in a plaintext message with some other letter. In order to perform this encryption, we make use of a key . In the case of the substitution cipher, the key is a mapping of each of the letters of the alphabet to the letter that it should correspond to, when we encrypt it. To decrypt the message, the receiver of the message would need to know the key, so that they could reverse the process. A key , for example, might be the string jtrekyavogdxpsncuizlfbmwhq . This 26-character key means that a (the first letter of the alphabet) should be converted into j (the first letter of the key). Similarly, the letter b (the second letter of the alphabet) should be converted into t (the second letter of the key) and so on. Therefore, a message like hello would be encrypted as vkxxn , replacing each of the letters according to the mapping as determined by the key.","title":"Background Theory"},{"location":"lab08/#code-distribution","text":"Description File Size File Name Java Source Code for Substitution Cipher 6.0KB lab08.zip Contents of lab08.zip : Lab08SubstitutionCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 SubstitutionCipher.class \u251c\u2500\u2500 SubstitutionCipher.ctxt \u251c\u2500\u2500 SubstitutionCipher.java \u251c\u2500\u2500 SubstitutionCipherJUnitTest.class \u251c\u2500\u2500 SubstitutionCipherJUnitTest.ctxt \u2514\u2500\u2500 SubstitutionCipherJUnitTest.java","title":"Code Distribution"},{"location":"lab08/#specification","text":"Write a Java program in the file SubstitutionCipher.java that encrypts a message using the substitution cipher. You will write your solution in a function called encrypt(String message, String key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", \"jtrekyavogdxpsncuizlfbmwhq\") is executed, the output of the program should be: vkxxn","title":"Specification"},{"location":"lab08/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab08/#submission","text":"Upload the file SubstitutionCipher.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab09/","text":"Lab 9: Request Line Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, November 29, 2019 Total Points: 10 Implement a Java program that determines the validity of an HTTP request line. Background Theory HyperText Transfer Protocol(HTTP) is the protocol that web browsers and web servers use to communicate with each other over the Internet. HTTP is an application level protocol, because it sits on top of the TCP layer in the protocol stack, and it is used by specific applications to talk to each other. In this particular case, those applications happen to be web browsers and web servers. HTTP is a connectionless, text-based protocol, in which clients send requests to servers. When you type a URL into a web browser, the following steps occur: If the URL contains a domain name, then the browser first connects to a Domain Name Server, and retrieves the corresponding IP address for that domain name. The web browser then connects to the web server, and sends an HTTP request for the desired web page. The HTTP request takes the following form: GET /hello.html HTTP/1.1 The web server receives the request, verifies that it is properly formatted, and returns an appropriate error message if it is not. Then, it checks for the desired web page. If the requested page exists, then the web server sends it out. However, if the web server cannot find the requested web page, then it will send out an error message. Example Case According to Regulation rfc7230 from the Internet Enginering Task Force(IETF), a well-formed HTTP request line takes the following form: delivery-method SPACE request-target SPACE HTTP-version Your task is to verify that a given HTTP request conforms to this structure, and is consistent with the following rules: If delivery-method is not GET , then the function should return: 405 Method Not Allowed If request-target does not begin with a / , then the function should return: 501 Not Implemented If request-target contains a \" , then the function should return: 400 Bad Request If HTTP-version is not HTTP/1.1 , then the function should return: 505 HTTP Version Not Supported If none of the above errors occur, then this means that the HTTP request line is well-formed, and that the parse() function should return the request-target . Hints You should use string slicing to separate the different parts of the request line. However, this means that you will need to discover the index locations of the SPACE s. Use the indexOf(String word) function to discover the index of the first SPACE , and then use indexOf(String word, int start) to discover the index of the other SPACE . Code Distribution Description File Size File Name Java Source Code for Request Line 5.0KB lab09.zip Contents of lab09.zip : Lab09RequestLine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 RequestLine.class \u251c\u2500\u2500 RequestLine.ctxt \u251c\u2500\u2500 RequestLine.java \u251c\u2500\u2500 RequestLineJUnitTest.class \u251c\u2500\u2500 RequestLineJUnitTest.ctxt \u2514\u2500\u2500 RequestLineJUnitTest.java Specification Write a Java program in the file RequestLine.java that determines the validity of an HTTP request line. You will write your solution in a function called parse(String line) right below the place where it says: YOUR CODE HERE When the function call parse(\"GET /hello.html HTTP/1.1\") is executed, the output of the program should be: /hello.html Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file RequestLine.java to the Web-CAT automated grading platform.","title":"Lab 9: Request Line"},{"location":"lab09/#lab-9-request-line","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 9: Request Line"},{"location":"lab09/#task-outline","text":"Due Date: Friday, November 29, 2019 Total Points: 10 Implement a Java program that determines the validity of an HTTP request line.","title":"Task Outline"},{"location":"lab09/#background-theory","text":"HyperText Transfer Protocol(HTTP) is the protocol that web browsers and web servers use to communicate with each other over the Internet. HTTP is an application level protocol, because it sits on top of the TCP layer in the protocol stack, and it is used by specific applications to talk to each other. In this particular case, those applications happen to be web browsers and web servers. HTTP is a connectionless, text-based protocol, in which clients send requests to servers. When you type a URL into a web browser, the following steps occur: If the URL contains a domain name, then the browser first connects to a Domain Name Server, and retrieves the corresponding IP address for that domain name. The web browser then connects to the web server, and sends an HTTP request for the desired web page. The HTTP request takes the following form: GET /hello.html HTTP/1.1 The web server receives the request, verifies that it is properly formatted, and returns an appropriate error message if it is not. Then, it checks for the desired web page. If the requested page exists, then the web server sends it out. However, if the web server cannot find the requested web page, then it will send out an error message.","title":"Background Theory"},{"location":"lab09/#example-case","text":"According to Regulation rfc7230 from the Internet Enginering Task Force(IETF), a well-formed HTTP request line takes the following form: delivery-method SPACE request-target SPACE HTTP-version Your task is to verify that a given HTTP request conforms to this structure, and is consistent with the following rules: If delivery-method is not GET , then the function should return: 405 Method Not Allowed If request-target does not begin with a / , then the function should return: 501 Not Implemented If request-target contains a \" , then the function should return: 400 Bad Request If HTTP-version is not HTTP/1.1 , then the function should return: 505 HTTP Version Not Supported If none of the above errors occur, then this means that the HTTP request line is well-formed, and that the parse() function should return the request-target .","title":"Example Case"},{"location":"lab09/#hints","text":"You should use string slicing to separate the different parts of the request line. However, this means that you will need to discover the index locations of the SPACE s. Use the indexOf(String word) function to discover the index of the first SPACE , and then use indexOf(String word, int start) to discover the index of the other SPACE .","title":"Hints"},{"location":"lab09/#code-distribution","text":"Description File Size File Name Java Source Code for Request Line 5.0KB lab09.zip Contents of lab09.zip : Lab09RequestLine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 RequestLine.class \u251c\u2500\u2500 RequestLine.ctxt \u251c\u2500\u2500 RequestLine.java \u251c\u2500\u2500 RequestLineJUnitTest.class \u251c\u2500\u2500 RequestLineJUnitTest.ctxt \u2514\u2500\u2500 RequestLineJUnitTest.java","title":"Code Distribution"},{"location":"lab09/#specification","text":"Write a Java program in the file RequestLine.java that determines the validity of an HTTP request line. You will write your solution in a function called parse(String line) right below the place where it says: YOUR CODE HERE When the function call parse(\"GET /hello.html HTTP/1.1\") is executed, the output of the program should be: /hello.html","title":"Specification"},{"location":"lab09/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab09/#submission","text":"Upload the file RequestLine.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lectures/","text":"Lectures Mr. Tareen's Coding Solution Screencasts Free Response Exam YouTube Video Duration 2010 CookieOrder 9:54 APLine 8:52 Trail 11:03 2013 MusicDownloads 10:41 SkyView 12:01 2014 MixedSwap 17:30 2015 HiddenWord 9:55 2016 Crossword 16:52 StringFormatter 19:40 2017 Phrase 13:26 2018 WordPair 12:56 ArrayTester 15:12 2019 StepTracker 14:18 Delimiters 11:13 Harvard's CS50 Supplemental Lectures YouTube Video Duration Linear Search 2:50 Binary Search 9:31 Selection Sort 4:01 Insertion Sort 4:44 Merge Sort 10:27","title":"Lectures"},{"location":"lectures/#lectures","text":"","title":"Lectures"},{"location":"lectures/#mr-tareens-coding-solution-screencasts","text":"Free Response Exam YouTube Video Duration 2010 CookieOrder 9:54 APLine 8:52 Trail 11:03 2013 MusicDownloads 10:41 SkyView 12:01 2014 MixedSwap 17:30 2015 HiddenWord 9:55 2016 Crossword 16:52 StringFormatter 19:40 2017 Phrase 13:26 2018 WordPair 12:56 ArrayTester 15:12 2019 StepTracker 14:18 Delimiters 11:13","title":"Mr. Tareen's Coding Solution Screencasts"},{"location":"lectures/#harvards-cs50-supplemental-lectures","text":"YouTube Video Duration Linear Search 2:50 Binary Search 9:31 Selection Sort 4:01 Insertion Sort 4:44 Merge Sort 10:27","title":"Harvard's CS50 Supplemental Lectures"},{"location":"mockexam/","text":"Mock Exam Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, April 20, 2020 at 11:00AM CST. Download and extract the mockexamcode.zip source code distribution, posted below. Read through Free-Response Questions 1 and 2 , and develop your responses with BlueJ . Upload CheckDigit.java and ReviewCollecter.java to the Web-CAT automated grading platform. You may use the following Java Quick Reference sheet. Consult the Technical Support Page if you encounter any problems, such as: Unable to access Web-CAT, BlueJ difficulties, etc. Code Distribution Description File Size File Name Java Source Code for the Mock Exam 19KB mockexamcode.zip Free-Response Question 1: CheckDigit This question involves the use of check digits , which can be used to help detect if an error has occurred when a number is entered or transmitted electronically. An algorithm for computing a check digit, based on the digits of a number, is provided in Part (a). The CheckDigit class is shown below. You will write two methods of the CheckDigit class. public class CheckDigit { /** Returns the check digit for num, as described in Part (a). * Precondition: The number of digits in num is between one and six, inclusive. * num >= 0 */ public static int getCheck(int num) { /* To be implemented in Part (a). */ } /** Returns true if numWithCheckDigit is valid, or false otherwise, as described in Part (b). * Precondition: The number of digits in numWithCheckDigit is between two and seven, inclusive. * numWithCheckDigit >= 0 */ public static boolean isValid(int numWithCheckDigit) { /* To be implemented in Part (b). */ } /** Returns the number of digits in num. */ public static int getNumberOfDigits(int num) { /* Implementation not shown. */ } /** Returns the nth digit of num. * Precondition: n >= 1 and n <= the number of digits in num. */ public static int getDigit(int num, int n) { /* Implementation not shown. */ } // There may be instance variables, constructors, and methods not shown. } Part (a): The getCheck method Complete the getCheck method, which computes the check digit for a number, according to the following rules: Multiply the first digit by 7, the second digit(if one exists) by 6, the third digit(if one exists) by 5, and so on. The length of the method's int parameter is at most six; therefore, the last digit of a six-digit number will be multiplied by 2. Add together the products calculated in the previous step. Extract the check digit, which is the rightmost digit of the sum that was calculated in the previous step. The following are examples of the check-digit calculation: Example 1: num has the value 283415 The sum to calculate is: \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{8} \\cdot 6) + (\\texttt{3} \\cdot 5) + (\\texttt{4} \\cdot 4) + (\\texttt{1} \\cdot 3) + (\\texttt{5} \\cdot 2)\\\\ \\mbox{products} = 14 + 48 + 15 + 16 + 3 + 10\\\\ \\mbox{products} = 106 \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{8} \\cdot 6) + (\\texttt{3} \\cdot 5) + (\\texttt{4} \\cdot 4) + (\\texttt{1} \\cdot 3) + (\\texttt{5} \\cdot 2)\\\\ \\mbox{products} = 14 + 48 + 15 + 16 + 3 + 10\\\\ \\mbox{products} = 106 The check digit is the rightmost digit of 106, which is 6. Therefore, the getCheck method returns the integer value 6 . Example 2: num has the value 2183 The sum to calculate is: \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{1} \\cdot 6) + (\\texttt{8} \\cdot 5) + (\\texttt{3} \\cdot 4)\\\\ \\mbox{products} = 14 + 6 + 40 + 12\\\\ \\mbox{products} = 72 \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{1} \\cdot 6) + (\\texttt{8} \\cdot 5) + (\\texttt{3} \\cdot 4)\\\\ \\mbox{products} = 14 + 6 + 40 + 12\\\\ \\mbox{products} = 72 The check digit is the rightmost digit of 72, which is 2. Therefore, the getCheck method returns the integer value 2 . Helper Methods Two helper methods, getNumberOfDigits and getDigit , have been provided for you. getNumberOfDigits returns the number of digits in its int parameter. getDigit returns the nth digit of its int parameter. The following are examples of the use of getNumberOfDigits and getDigit . Method Call Return Value Explanation getNumberOfDigits(283415) 6 The number 283415 has 6 digits. getDigit(283415, 1) 2 The first digit of 283415 is 2 . getDigit(283415, 5) 1 The fifth digit of 283415 is 1 . Specification Write your Java program code response in the file CheckDigit.java . Place your solution in the function called getCheck(int num) right below the place where it says: Part (a): YOUR CODE HERE You must use the methods getNumberOfDigits and getDigit appropriately to receive full credit. Part (b): The isValid method The isValid method returns true if its parameter numWithCheckDigit , which represents a number containing a check digit, is valid, and false otherwise. The check digit is always the rightmost digit of numWithCheckDigit . The following table shows some examples of the use of the isValid method. Method Call Return Value Explanation getCheck(159) 2 The check digit for 159 is 2 . isValid(1592) true The number 1592 is a valid combination of a number( 159 ) and its check digit( 2 ). isValid(1593) false The number 1593 is not a valid combination of a number( 159 ) and its check digit( 3 ) because 2 is the check digit for 159 . Specification Write your Java program code response in the file CheckDigit.java . Place your solution in the function called isValid(int numWithCheckDigit) right below the place where it says: Part (b): YOUR CODE HERE You must use the method getCheck appropriately to receive full credit. Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CheckDigit.java to the Web-CAT automated grading platform. Free-Response Question 2: ReviewCollector A student plans to analyze product reviews found on a Web site by looking for keywords in posted reviews. The ProductReview class, shown below, is used to represent a single review. A product review consists of a product name, and a review of that product. public class ProductReview { private String name; private String review; /** Constructs a ProductReview object and initializes the instance variables. */ public ProductReview(String pName, String pReview) { name = pName; review = pReview; } /** Returns the name of the product. */ public String getName() { return name; } /** Returns the review of the product. */ public String getReview() { return review; } } The ReviewCollector class, shown below, is used to represent a collection of reviews to be analyzed. public class ReviewCollector { private ArrayList<ProductReview> reviewList; private ArrayList<String> productList; /** Constructs a ReviewCollector object and initializes the instance variables. */ public ReviewCollector() { reviewList = new ArrayList<ProductReview>(); productList = new ArrayList<String>(); } /** Adds a new review to the collection of reviews, as described in Part (a). */ public void addReview(ProductReview prodReview) { /* To be implemented in Part (a). */ } /** Returns the number of good reviews for a given product name, as described in Part (b). */ public int getNumGoodReviews(String prodName) { /* To be implemented in Part (b). */ } // There may be instance variables, constructors, and methods not shown. } Part (a): The addReview method The addReview method adds a single product review, represented by a ProductReview object, to the ReviewCollector object. The addReview method does the following when it adds a product review: The ProductReview object is added to the end of the reviewList instance variable. The product name from the ProductReview object is added to the end of the productList instance variable, if the product name is not already found in productList . Specification Write your Java program code response in the file ReviewCollector.java . Place your solution in the function called addReview(ProductReview prodReview) right below the place where it says: Part (a): YOUR CODE HERE Part (b): The getNumGoodReviews method The getNumGoodReviews method returns the number of good reviews for a given product name. A review is considered good if it contains the string \"best\" (with all lowercase letters). If there are no reviews with a matching product name, then the method returns 0 . Note that a review that contains the string \"BEST\" or \"Best\" would not be considered a good review, since some of the letters are uppercase. However, a review that contains the string \"asbestos\" would be considered a good review, since it does happen to contain the string \"best\" within it. Specification Write your Java program code response in the file ReviewCollector.java . Place your solution in the function called getNumGoodReviews(String prodName) right below the place where it says: Part (b): YOUR CODE HERE Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file ReviewCollector.java to the Web-CAT automated grading platform. End of Mock Exam.","title":"Mock Exam"},{"location":"mockexam/#mock-exam","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Mock Exam"},{"location":"mockexam/#task-outline","text":"Due Date: Monday, April 20, 2020 at 11:00AM CST. Download and extract the mockexamcode.zip source code distribution, posted below. Read through Free-Response Questions 1 and 2 , and develop your responses with BlueJ . Upload CheckDigit.java and ReviewCollecter.java to the Web-CAT automated grading platform. You may use the following Java Quick Reference sheet. Consult the Technical Support Page if you encounter any problems, such as: Unable to access Web-CAT, BlueJ difficulties, etc.","title":"Task Outline"},{"location":"mockexam/#code-distribution","text":"Description File Size File Name Java Source Code for the Mock Exam 19KB mockexamcode.zip","title":"Code Distribution"},{"location":"mockexam/#free-response-question-1-checkdigit","text":"This question involves the use of check digits , which can be used to help detect if an error has occurred when a number is entered or transmitted electronically. An algorithm for computing a check digit, based on the digits of a number, is provided in Part (a). The CheckDigit class is shown below. You will write two methods of the CheckDigit class. public class CheckDigit { /** Returns the check digit for num, as described in Part (a). * Precondition: The number of digits in num is between one and six, inclusive. * num >= 0 */ public static int getCheck(int num) { /* To be implemented in Part (a). */ } /** Returns true if numWithCheckDigit is valid, or false otherwise, as described in Part (b). * Precondition: The number of digits in numWithCheckDigit is between two and seven, inclusive. * numWithCheckDigit >= 0 */ public static boolean isValid(int numWithCheckDigit) { /* To be implemented in Part (b). */ } /** Returns the number of digits in num. */ public static int getNumberOfDigits(int num) { /* Implementation not shown. */ } /** Returns the nth digit of num. * Precondition: n >= 1 and n <= the number of digits in num. */ public static int getDigit(int num, int n) { /* Implementation not shown. */ } // There may be instance variables, constructors, and methods not shown. }","title":"Free-Response Question 1: CheckDigit"},{"location":"mockexam/#part-a-the-getcheck-method","text":"Complete the getCheck method, which computes the check digit for a number, according to the following rules: Multiply the first digit by 7, the second digit(if one exists) by 6, the third digit(if one exists) by 5, and so on. The length of the method's int parameter is at most six; therefore, the last digit of a six-digit number will be multiplied by 2. Add together the products calculated in the previous step. Extract the check digit, which is the rightmost digit of the sum that was calculated in the previous step. The following are examples of the check-digit calculation:","title":"Part (a): The getCheck method"},{"location":"mockexam/#example-1-num-has-the-value-283415","text":"The sum to calculate is: \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{8} \\cdot 6) + (\\texttt{3} \\cdot 5) + (\\texttt{4} \\cdot 4) + (\\texttt{1} \\cdot 3) + (\\texttt{5} \\cdot 2)\\\\ \\mbox{products} = 14 + 48 + 15 + 16 + 3 + 10\\\\ \\mbox{products} = 106 \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{8} \\cdot 6) + (\\texttt{3} \\cdot 5) + (\\texttt{4} \\cdot 4) + (\\texttt{1} \\cdot 3) + (\\texttt{5} \\cdot 2)\\\\ \\mbox{products} = 14 + 48 + 15 + 16 + 3 + 10\\\\ \\mbox{products} = 106 The check digit is the rightmost digit of 106, which is 6. Therefore, the getCheck method returns the integer value 6 .","title":"Example 1: num has the value 283415"},{"location":"mockexam/#example-2-num-has-the-value-2183","text":"The sum to calculate is: \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{1} \\cdot 6) + (\\texttt{8} \\cdot 5) + (\\texttt{3} \\cdot 4)\\\\ \\mbox{products} = 14 + 6 + 40 + 12\\\\ \\mbox{products} = 72 \\mbox{products} = (\\texttt{2} \\cdot 7) + (\\texttt{1} \\cdot 6) + (\\texttt{8} \\cdot 5) + (\\texttt{3} \\cdot 4)\\\\ \\mbox{products} = 14 + 6 + 40 + 12\\\\ \\mbox{products} = 72 The check digit is the rightmost digit of 72, which is 2. Therefore, the getCheck method returns the integer value 2 .","title":"Example 2: num has the value 2183"},{"location":"mockexam/#helper-methods","text":"Two helper methods, getNumberOfDigits and getDigit , have been provided for you. getNumberOfDigits returns the number of digits in its int parameter. getDigit returns the nth digit of its int parameter. The following are examples of the use of getNumberOfDigits and getDigit . Method Call Return Value Explanation getNumberOfDigits(283415) 6 The number 283415 has 6 digits. getDigit(283415, 1) 2 The first digit of 283415 is 2 . getDigit(283415, 5) 1 The fifth digit of 283415 is 1 .","title":"Helper Methods"},{"location":"mockexam/#specification","text":"Write your Java program code response in the file CheckDigit.java . Place your solution in the function called getCheck(int num) right below the place where it says: Part (a): YOUR CODE HERE You must use the methods getNumberOfDigits and getDigit appropriately to receive full credit.","title":"Specification"},{"location":"mockexam/#part-b-the-isvalid-method","text":"The isValid method returns true if its parameter numWithCheckDigit , which represents a number containing a check digit, is valid, and false otherwise. The check digit is always the rightmost digit of numWithCheckDigit . The following table shows some examples of the use of the isValid method. Method Call Return Value Explanation getCheck(159) 2 The check digit for 159 is 2 . isValid(1592) true The number 1592 is a valid combination of a number( 159 ) and its check digit( 2 ). isValid(1593) false The number 1593 is not a valid combination of a number( 159 ) and its check digit( 3 ) because 2 is the check digit for 159 .","title":"Part (b): The isValid method"},{"location":"mockexam/#specification_1","text":"Write your Java program code response in the file CheckDigit.java . Place your solution in the function called isValid(int numWithCheckDigit) right below the place where it says: Part (b): YOUR CODE HERE You must use the method getCheck appropriately to receive full credit.","title":"Specification"},{"location":"mockexam/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"mockexam/#submission","text":"Upload the file CheckDigit.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"mockexam/#free-response-question-2-reviewcollector","text":"A student plans to analyze product reviews found on a Web site by looking for keywords in posted reviews. The ProductReview class, shown below, is used to represent a single review. A product review consists of a product name, and a review of that product. public class ProductReview { private String name; private String review; /** Constructs a ProductReview object and initializes the instance variables. */ public ProductReview(String pName, String pReview) { name = pName; review = pReview; } /** Returns the name of the product. */ public String getName() { return name; } /** Returns the review of the product. */ public String getReview() { return review; } } The ReviewCollector class, shown below, is used to represent a collection of reviews to be analyzed. public class ReviewCollector { private ArrayList<ProductReview> reviewList; private ArrayList<String> productList; /** Constructs a ReviewCollector object and initializes the instance variables. */ public ReviewCollector() { reviewList = new ArrayList<ProductReview>(); productList = new ArrayList<String>(); } /** Adds a new review to the collection of reviews, as described in Part (a). */ public void addReview(ProductReview prodReview) { /* To be implemented in Part (a). */ } /** Returns the number of good reviews for a given product name, as described in Part (b). */ public int getNumGoodReviews(String prodName) { /* To be implemented in Part (b). */ } // There may be instance variables, constructors, and methods not shown. }","title":"Free-Response Question 2: ReviewCollector"},{"location":"mockexam/#part-a-the-addreview-method","text":"The addReview method adds a single product review, represented by a ProductReview object, to the ReviewCollector object. The addReview method does the following when it adds a product review: The ProductReview object is added to the end of the reviewList instance variable. The product name from the ProductReview object is added to the end of the productList instance variable, if the product name is not already found in productList .","title":"Part (a): The addReview method"},{"location":"mockexam/#specification_2","text":"Write your Java program code response in the file ReviewCollector.java . Place your solution in the function called addReview(ProductReview prodReview) right below the place where it says: Part (a): YOUR CODE HERE","title":"Specification"},{"location":"mockexam/#part-b-the-getnumgoodreviews-method","text":"The getNumGoodReviews method returns the number of good reviews for a given product name. A review is considered good if it contains the string \"best\" (with all lowercase letters). If there are no reviews with a matching product name, then the method returns 0 . Note that a review that contains the string \"BEST\" or \"Best\" would not be considered a good review, since some of the letters are uppercase. However, a review that contains the string \"asbestos\" would be considered a good review, since it does happen to contain the string \"best\" within it.","title":"Part (b): The getNumGoodReviews method"},{"location":"mockexam/#specification_3","text":"Write your Java program code response in the file ReviewCollector.java . Place your solution in the function called getNumGoodReviews(String prodName) right below the place where it says: Part (b): YOUR CODE HERE","title":"Specification"},{"location":"mockexam/#testing_1","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"mockexam/#submission_1","text":"Upload the file ReviewCollector.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"mockexam/#end-of-mock-exam","text":"","title":"End of Mock Exam."},{"location":"mockexamdetails/","text":"Mock Exam The Mock Exam will be posted here on Monday, April 20th at exactly 10:00AM CST . The content of the Mock Exam will consist of two Free-Response Questions . There will be a time limit of 60 minutes to complete and submit the Mock Exam. Students are expected to use the BlueJ Integrated Development Environment to develop their program code responses. Students will submit their program code responses to the Web-CAT automated grading system , with unlimited submission attempts. After the 60 minute time limit has lapsed, the Web-CAT submission link will be closed, and no more uploads will be accepted . Students may reference any course notes, textbooks, or online resources for assistance. However, collaboration with other students is forbidden . Consult the Technical Support Page if you encounter any problems, such as: Unable to access Web-CAT, BlueJ difficulties, etc. Free-Response Question 1: Methods and Control Structures This question will assess your ability to satisfy method specifications using expressions, conditional statements, and iterative loops. You may also be expected to call relevant methods, where appropriate. Free-Response Question 2: ArrayLists This question will assess your ability to create, traverse and manipulate elements in an ArrayList of objects. Students may also be expected to demonstrate proficiency using standard String methods, such as .equals() or .indexOf() .","title":"Mock Exam"},{"location":"mockexamdetails/#mock-exam","text":"The Mock Exam will be posted here on Monday, April 20th at exactly 10:00AM CST . The content of the Mock Exam will consist of two Free-Response Questions . There will be a time limit of 60 minutes to complete and submit the Mock Exam. Students are expected to use the BlueJ Integrated Development Environment to develop their program code responses. Students will submit their program code responses to the Web-CAT automated grading system , with unlimited submission attempts. After the 60 minute time limit has lapsed, the Web-CAT submission link will be closed, and no more uploads will be accepted . Students may reference any course notes, textbooks, or online resources for assistance. However, collaboration with other students is forbidden . Consult the Technical Support Page if you encounter any problems, such as: Unable to access Web-CAT, BlueJ difficulties, etc.","title":"Mock Exam"},{"location":"mockexamdetails/#free-response-question-1-methods-and-control-structures","text":"This question will assess your ability to satisfy method specifications using expressions, conditional statements, and iterative loops. You may also be expected to call relevant methods, where appropriate.","title":"Free-Response Question 1: Methods and Control Structures"},{"location":"mockexamdetails/#free-response-question-2-arraylists","text":"This question will assess your ability to create, traverse and manipulate elements in an ArrayList of objects. Students may also be expected to demonstrate proficiency using standard String methods, such as .equals() or .indexOf() .","title":"Free-Response Question 2: ArrayLists"},{"location":"notes/","text":"Course Notes Semester 2 Note: Two-dimensional arrays , abstract classes , interfaces , inheritance , polymorphism , and recursion have been removed from the 2019-2020 curriculum. Description File Size File Name Wrapper Classes: Using primitive types with an ArrayList . 146KB csaNotes12WrapperClasses.pdf Removing Items from an ArrayList : Looping through an ArrayList and removing multiple items. 172KB csaNotes13ArrayListRemoval.pdf Searching Algorithms: Locating an element from within a data structure. 208KB csaNotes16Searching.pdf Sorting Algorithms: Rearranging data into a particular order. 236KB csaNotes17Sorting.pdf Semester 1 Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf Arrays of Objects: Using the array data structure with objects. 180KB csaNotes09ObjectArrays.pdf Parameters of Different Types: Using primitive, object, and array parameters. 174KB csaNotes10Parameters.pdf ArrayLists: A flexible data structure for use with objects. 177KB csaNotes11ArrayLists.pdf","title":"Course Notes"},{"location":"notes/#course-notes","text":"","title":"Course Notes"},{"location":"notes/#semester-2","text":"Note: Two-dimensional arrays , abstract classes , interfaces , inheritance , polymorphism , and recursion have been removed from the 2019-2020 curriculum. Description File Size File Name Wrapper Classes: Using primitive types with an ArrayList . 146KB csaNotes12WrapperClasses.pdf Removing Items from an ArrayList : Looping through an ArrayList and removing multiple items. 172KB csaNotes13ArrayListRemoval.pdf Searching Algorithms: Locating an element from within a data structure. 208KB csaNotes16Searching.pdf Sorting Algorithms: Rearranging data into a particular order. 236KB csaNotes17Sorting.pdf","title":"Semester 2"},{"location":"notes/#semester-1","text":"Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf Arrays of Objects: Using the array data structure with objects. 180KB csaNotes09ObjectArrays.pdf Parameters of Different Types: Using primitive, object, and array parameters. 174KB csaNotes10Parameters.pdf ArrayLists: A flexible data structure for use with objects. 177KB csaNotes11ArrayLists.pdf","title":"Semester 1"},{"location":"priortests/","text":"Prior Tests Semester 2 Semester 2 Final Exam Description File Size File Name Spring 2019: Questions 171KB csaSemester2Exam2019.pdf Spring 2019: Solutions 176KB csaSemester2ExamSolutions2019.pdf Semester 1 Test 1: Java Syntax and Strings Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf Fall 2019 152KB csaTest01Fall2019.pdf Test 2: Java Arrays and Classes Description File Size File Name Fall 2014 105KB csaTest02Fall2014.pdf Fall 2015 97KB csaTest02Fall2015.pdf Fall 2016 156KB csaTest02Fall2016.pdf Fall 2017 163KB csaTest02Fall2017.pdf Fall 2018 168KB csaTest02Fall2018.pdf Fall 2019 175KB csaTest02Fall2019.pdf Semester 1 Final Exam Description File Size File Name Fall 2017 244KB csaSemester1Exam2017.pdf Fall 2018 251KB csaSemester1Exam2018.pdf Fall 2019 242KB csaSemester1Exam2019.pdf","title":"Prior Tests"},{"location":"priortests/#prior-tests","text":"","title":"Prior Tests"},{"location":"priortests/#semester-2","text":"","title":"Semester 2"},{"location":"priortests/#semester-2-final-exam","text":"Description File Size File Name Spring 2019: Questions 171KB csaSemester2Exam2019.pdf Spring 2019: Solutions 176KB csaSemester2ExamSolutions2019.pdf","title":"Semester 2 Final Exam"},{"location":"priortests/#semester-1","text":"","title":"Semester 1"},{"location":"priortests/#test-1-java-syntax-and-strings","text":"Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf Fall 2019 152KB csaTest01Fall2019.pdf","title":"Test 1: Java Syntax and Strings"},{"location":"priortests/#test-2-java-arrays-and-classes","text":"Description File Size File Name Fall 2014 105KB csaTest02Fall2014.pdf Fall 2015 97KB csaTest02Fall2015.pdf Fall 2016 156KB csaTest02Fall2016.pdf Fall 2017 163KB csaTest02Fall2017.pdf Fall 2018 168KB csaTest02Fall2018.pdf Fall 2019 175KB csaTest02Fall2019.pdf","title":"Test 2: Java Arrays and Classes"},{"location":"priortests/#semester-1-final-exam","text":"Description File Size File Name Fall 2017 244KB csaSemester1Exam2017.pdf Fall 2018 251KB csaSemester1Exam2018.pdf Fall 2019 242KB csaSemester1Exam2019.pdf","title":"Semester 1 Final Exam"},{"location":"pset01/","text":"Problem Set 1: HelloWorld Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework. Code Distribution Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Using the Assignment Operator Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save . Compiling your Java Program Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon. Executing your Java Program Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase. Testing Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit. Submission Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Problem Set 1: Hello World"},{"location":"pset01/#problem-set-1-helloworld","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 1: HelloWorld"},{"location":"pset01/#background","text":"Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework.","title":"Background"},{"location":"pset01/#code-distribution","text":"Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset01/#specification","text":"","title":"Specification"},{"location":"pset01/#using-the-assignment-operator","text":"Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save .","title":"Using the Assignment Operator"},{"location":"pset01/#compiling-your-java-program","text":"Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon.","title":"Compiling your Java Program"},{"location":"pset01/#executing-your-java-program","text":"Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase.","title":"Executing your Java Program"},{"location":"pset01/#testing","text":"Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit.","title":"Testing"},{"location":"pset01/#submission","text":"Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset02/","text":"Problem Set 2: Fahrenheit Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion. Code Distribution Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0 Hints Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer. Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#problem-set-2-fahrenheit","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#background","text":"Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion.","title":"Background"},{"location":"pset02/#code-distribution","text":"Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset02/#specification","text":"Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0","title":"Specification"},{"location":"pset02/#hints","text":"Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer.","title":"Hints"},{"location":"pset02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset02/#submission","text":"Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset03/","text":"Problem Set 3: Note Frequency Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class. Background Theory One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9 Code Distribution Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#problem-set-3-note-frequency","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#task-outline","text":"Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class.","title":"Task Outline"},{"location":"pset03/#background-theory","text":"One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9","title":"Background Theory"},{"location":"pset03/#code-distribution","text":"Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset03/#specification","text":"Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414","title":"Specification"},{"location":"pset03/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset03/#submission","text":"Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset04/","text":"Problem Set 4: Quarterback Rating Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football. Background Theory The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100 Code Distribution Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#problem-set-4-quarterback-rating","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#task-outline","text":"Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football.","title":"Task Outline"},{"location":"pset04/#background-theory","text":"The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100","title":"Background Theory"},{"location":"pset04/#code-distribution","text":"Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset04/#specification","text":"Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288","title":"Specification"},{"location":"pset04/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset04/#submission","text":"Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset05/","text":"Problem Set 5: Water Meter Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Wednesday, October 16, 2019 Total Points: 10 Implement a Java program that calculates the amount of money that a customer will be billed, based on their water usage. Background Theory A water utility is responsible for supplying clean, fresh water to its customers in a given geographical area. The water utility will typically charge different rates for each category of customer. Supplying water to individual households is relatively straightforward, so they are charged minimal rates. However, commercial and industrial factories may require massive amounts of water, so they are charged more for the necessary supporting infrastructure. A customer's water bill depends on how many gallons of water they consumed during a particular billing period. A water meter is used to determine a customer's water consumption. It consists of a dial that has nine digits. However, note that the final digit in the dial records one-tenth of a gallon . In other words, if the water meter reads 923874345 then this corresponds to 92387434.5 gallons. The water meter is read once at the beginning of the billing period, and then once and the end. A customer's water consumption, in gallons, is computed from the difference in these two meter readings. Customer Categories There are three categories of customer: residential , commercial , and industrial . The following is the fee schedule for each of these categories: residential A base rate of $5.00, plus $0.0005 per gallon used. commercial A base rate $1000.00 for 40000 gallons or less, plus $0.00025 for each additional gallon used. industrial A base rate of $1000.00 for 40000 gallons or less. A base rate of $2000.00 if usage exceeds 40000 gallons, but does not exceed 80000 gallons. A base rate of $3000.00 plus $0.00025 for each additional gallon if usage exceeds 80000 gallons. Hints Note that the meter's dial has nine digits and records the tenths of a gallon. For example, if the beginning reading was 444400003 and the ending reading was 444400135 , then the customer used 13.2 gallons of water during that billing period. We won't consider the case where the water meter \"flips over\" from 999999999 to 000000000 . Code Distribution Description File Size File Name Java Source Code for Water Meter 1.4KB pset05.zip Contents of pset05.zip : PSet05WaterMeter/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 WaterBilling.class \u251c\u2500\u2500 WaterBilling.ctxt \u251c\u2500\u2500 WaterBilling.java \u251c\u2500\u2500 WaterBillingJUnitTest.class \u251c\u2500\u2500 WaterBillingJUnitTest.ctxt \u2514\u2500\u2500 WaterBillingJUnitTest.java Specification Write a Java program in the file WaterBilling.java that determines the amount of money that a customer must pay for their water usage during a particular billing period. You will write your solution in a function called calculateBill(String customer, double begin, double end) right below the place where it says: YOUR CODE HERE When the function call calculateBill(\"residential\", 444400003, 444400135) is executed, the output of the program should be: 5.0066 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file WaterBilling.java to the Web-CAT automated grading platform.","title":"Problem Set 5: Water Meter"},{"location":"pset05/#problem-set-5-water-meter","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 5: Water Meter"},{"location":"pset05/#task-outline","text":"Due Date: Wednesday, October 16, 2019 Total Points: 10 Implement a Java program that calculates the amount of money that a customer will be billed, based on their water usage.","title":"Task Outline"},{"location":"pset05/#background-theory","text":"A water utility is responsible for supplying clean, fresh water to its customers in a given geographical area. The water utility will typically charge different rates for each category of customer. Supplying water to individual households is relatively straightforward, so they are charged minimal rates. However, commercial and industrial factories may require massive amounts of water, so they are charged more for the necessary supporting infrastructure. A customer's water bill depends on how many gallons of water they consumed during a particular billing period. A water meter is used to determine a customer's water consumption. It consists of a dial that has nine digits. However, note that the final digit in the dial records one-tenth of a gallon . In other words, if the water meter reads 923874345 then this corresponds to 92387434.5 gallons. The water meter is read once at the beginning of the billing period, and then once and the end. A customer's water consumption, in gallons, is computed from the difference in these two meter readings.","title":"Background Theory"},{"location":"pset05/#customer-categories","text":"There are three categories of customer: residential , commercial , and industrial . The following is the fee schedule for each of these categories:","title":"Customer Categories"},{"location":"pset05/#residential","text":"A base rate of $5.00, plus $0.0005 per gallon used.","title":"residential"},{"location":"pset05/#commercial","text":"A base rate $1000.00 for 40000 gallons or less, plus $0.00025 for each additional gallon used.","title":"commercial"},{"location":"pset05/#industrial","text":"A base rate of $1000.00 for 40000 gallons or less. A base rate of $2000.00 if usage exceeds 40000 gallons, but does not exceed 80000 gallons. A base rate of $3000.00 plus $0.00025 for each additional gallon if usage exceeds 80000 gallons.","title":"industrial"},{"location":"pset05/#hints","text":"Note that the meter's dial has nine digits and records the tenths of a gallon. For example, if the beginning reading was 444400003 and the ending reading was 444400135 , then the customer used 13.2 gallons of water during that billing period. We won't consider the case where the water meter \"flips over\" from 999999999 to 000000000 .","title":"Hints"},{"location":"pset05/#code-distribution","text":"Description File Size File Name Java Source Code for Water Meter 1.4KB pset05.zip Contents of pset05.zip : PSet05WaterMeter/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 WaterBilling.class \u251c\u2500\u2500 WaterBilling.ctxt \u251c\u2500\u2500 WaterBilling.java \u251c\u2500\u2500 WaterBillingJUnitTest.class \u251c\u2500\u2500 WaterBillingJUnitTest.ctxt \u2514\u2500\u2500 WaterBillingJUnitTest.java","title":"Code Distribution"},{"location":"pset05/#specification","text":"Write a Java program in the file WaterBilling.java that determines the amount of money that a customer must pay for their water usage during a particular billing period. You will write your solution in a function called calculateBill(String customer, double begin, double end) right below the place where it says: YOUR CODE HERE When the function call calculateBill(\"residential\", 444400003, 444400135) is executed, the output of the program should be: 5.0066","title":"Specification"},{"location":"pset05/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset05/#submission","text":"Upload the file WaterBilling.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset06/","text":"Problem Set 6: Vending Machine Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Wednesday, October 23, 2019 Total Points: 10 Implement a Java program that dispenses the correct amount of change, depending on the stock of coins in the machine. Background Theory You will write a program that simulates the behaviour of a coin-operated vending machine, a device that was in common use until recently. A vending machine operates as follows: A customer selects an item for purchase, then inserts a certain amount of cash to cover the cost of the item. The product is then dispensed, and if change is due to the customer, it is provided in the form of coins. The vending machine we will consider has a finite stock of the following coins: 25 cents(quarters) , 10 cents(dimes) , and five cents(nickels) . Note that pennies will be excluded from consideration. The amount of change due to a customer is calculated according to the following simple relation: change = payment - cost . The vending machine should then dispense the minimum quantity of coins necessary to provide the change to the customer. However, what would happen if the machine completely ran out of a particular coin denomination, for instance, the quarter? In that case, the machine would have to fulfill its obligation by using its remaining stock of dimes and nickels. Note that the output of this program should be the quantity of coins that are dispensed by the vending machine. Example Case Consider the case where a customer deposits 200 cents into a vending machine, to purchase a product costing 70 cents. The change due to the customer is 130 cents. Then, let's say that the vending machine has a coin stock of 3 quarters, 3 dimes and 10 nickels. The vending machine will then dispense 3 quarters, 3 dimes and 5 nickels to the customer, which is 11 coins in total. Your program should return 11 as its result. Hints Assume that the customer always deposits paper currency as payment. In other words, the payment placed into the vending machine does not replenish the coin stocks. Every time you dispense a coin to the customer, reduce that coin stock by one. The cost of the products, and the payment deposited, are all denominated in cents . This greatly simplifies the programming involved. You must calculate the minimum quantity of coins possible to fulfill the amount of change due to the customer. We won't consider the case where the vending machine has an insufficient stock of coins to cover the amount of change due to the customer. There will always be enough coins in each case. Code Distribution Description File Size File Name Java Source Code for Vending Machine 4.9KB pset06.zip Contents of pset06.zip : PSet06VendingMachine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VendingMachine.class \u251c\u2500\u2500 VendingMachine.ctxt \u251c\u2500\u2500 VendingMachine.java \u251c\u2500\u2500 VendingMachineJUnitTest.class \u251c\u2500\u2500 VendingMachineJUnitTest.ctxt \u2514\u2500\u2500 VendingMachineJUnitTest.java Specification Write a Java program in the file VendingMachine.java that dispenses the correct amount of change, depending on the stock of coins in the machine. You will write your solution in a function called dispenseChange(int quarters, int dimes, int nickels, int cost, int payment) right below the place where it says: YOUR CODE HERE When the function call dispenseChange(5, 5, 5, 160, 200) is executed, the output of the program should be: 3 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file VendingMachine.java to the Web-CAT automated grading platform.","title":"Problem Set 6: Vending Machine"},{"location":"pset06/#problem-set-6-vending-machine","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 6: Vending Machine"},{"location":"pset06/#task-outline","text":"Due Date: Wednesday, October 23, 2019 Total Points: 10 Implement a Java program that dispenses the correct amount of change, depending on the stock of coins in the machine.","title":"Task Outline"},{"location":"pset06/#background-theory","text":"You will write a program that simulates the behaviour of a coin-operated vending machine, a device that was in common use until recently. A vending machine operates as follows: A customer selects an item for purchase, then inserts a certain amount of cash to cover the cost of the item. The product is then dispensed, and if change is due to the customer, it is provided in the form of coins. The vending machine we will consider has a finite stock of the following coins: 25 cents(quarters) , 10 cents(dimes) , and five cents(nickels) . Note that pennies will be excluded from consideration. The amount of change due to a customer is calculated according to the following simple relation: change = payment - cost . The vending machine should then dispense the minimum quantity of coins necessary to provide the change to the customer. However, what would happen if the machine completely ran out of a particular coin denomination, for instance, the quarter? In that case, the machine would have to fulfill its obligation by using its remaining stock of dimes and nickels. Note that the output of this program should be the quantity of coins that are dispensed by the vending machine.","title":"Background Theory"},{"location":"pset06/#example-case","text":"Consider the case where a customer deposits 200 cents into a vending machine, to purchase a product costing 70 cents. The change due to the customer is 130 cents. Then, let's say that the vending machine has a coin stock of 3 quarters, 3 dimes and 10 nickels. The vending machine will then dispense 3 quarters, 3 dimes and 5 nickels to the customer, which is 11 coins in total. Your program should return 11 as its result.","title":"Example Case"},{"location":"pset06/#hints","text":"Assume that the customer always deposits paper currency as payment. In other words, the payment placed into the vending machine does not replenish the coin stocks. Every time you dispense a coin to the customer, reduce that coin stock by one. The cost of the products, and the payment deposited, are all denominated in cents . This greatly simplifies the programming involved. You must calculate the minimum quantity of coins possible to fulfill the amount of change due to the customer. We won't consider the case where the vending machine has an insufficient stock of coins to cover the amount of change due to the customer. There will always be enough coins in each case.","title":"Hints"},{"location":"pset06/#code-distribution","text":"Description File Size File Name Java Source Code for Vending Machine 4.9KB pset06.zip Contents of pset06.zip : PSet06VendingMachine/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VendingMachine.class \u251c\u2500\u2500 VendingMachine.ctxt \u251c\u2500\u2500 VendingMachine.java \u251c\u2500\u2500 VendingMachineJUnitTest.class \u251c\u2500\u2500 VendingMachineJUnitTest.ctxt \u2514\u2500\u2500 VendingMachineJUnitTest.java","title":"Code Distribution"},{"location":"pset06/#specification","text":"Write a Java program in the file VendingMachine.java that dispenses the correct amount of change, depending on the stock of coins in the machine. You will write your solution in a function called dispenseChange(int quarters, int dimes, int nickels, int cost, int payment) right below the place where it says: YOUR CODE HERE When the function call dispenseChange(5, 5, 5, 160, 200) is executed, the output of the program should be: 3","title":"Specification"},{"location":"pset06/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset06/#submission","text":"Upload the file VendingMachine.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset07/","text":"Problem Set 7: Down Payment Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 4, 2019 Total Points: 10 Implement a Java program that determines how many months it will take to save up enough money for a down payment on a house. Background Theory Let's assume that you have grown weary of living in dormitories, and you wish to save up enough money for a down payment on a house. The down payment is 25% of the the total cost of the house. Since housing is very expensive, it will probably take you several years to accomplish this task. In this program, we will measure this time duration in terms of months. Let's also assume that you have a well-paying job, in which you earn a respectable annual salary. As well, you have a savings account which generates an annual rate of return. Furthermore, your place of employment provides you with pay raises on a semi-annual basis. That is, your salary will increase by a certain decimal percentage after the 6th month, the 12th month, the 18th month, and so on. Parameters The following is an explanation of the parameters used in the savingsDuration() function: annualsalary This is the annual salary which you earn from your job. percentsaved This is the amount of your salary which you will dedicate towards saving for the down payment. It should be expressed in decimal form, for example: 0.1 totalcost This is the purchase price of your dream home. payraise This is the amount by which your salary is increased, and these raises occur every six months. This should be expressed in decimal form, for example: 0.1 Hints You will need to determine the amount of the down payment , which can be calculated from: totalCost*0.25 Since the time duration is measured in months, you will need to determine your monthly salary . This can be calculated from: annualSalary/12.0 The amount that you have saved so far should be referred to as your current savings , and you begin with a current savings of: 0 Assume that your savings account generates an annual rate of return of 4%. In other words, rate = 0.04 Create a variable that keeps track of the number of months that have occurred in this simulation, and set this variable to: 0 Assume that you invest your current savings wisely, so at the end of each month, you receive an additional currentSavings*rate/12.0 to be put into your savings. Be careful about when you increase your salary due to the pay raise. This should only happen after the 6th month, 12th month, 18th month, and so on. Code Distribution Description File Size File Name Java Source Code for Down Payment 5.2KB pset07.zip Contents of pset07.zip : PSet07DownPayment/ \u251c\u2500\u2500 DownPayment.class \u251c\u2500\u2500 DownPayment.ctxt \u251c\u2500\u2500 DownPayment.java \u251c\u2500\u2500 DownPaymentJUnitTest.class \u251c\u2500\u2500 DownPaymentJUnitTest.ctxt \u251c\u2500\u2500 DownPaymentJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file DownPayment.java that outputs the number of months that would be required to save enough money for a down payment on a house, given the annual salary that you earn, and the return on your investments. You will write your solution in a function called savingsDuration(double annualSalary, double percentSaved, double totalCost, double payRaise) right below the place where it says: YOUR CODE HERE When the function call savingsDuration(120000, 0.05, 500000, 0.03) is executed, the output of the program should be: 142 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file DownPayment.java to the Web-CAT automated grading platform.","title":"Problem Set 7: Down Payment"},{"location":"pset07/#problem-set-7-down-payment","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 7: Down Payment"},{"location":"pset07/#task-outline","text":"Due Date: Monday, November 4, 2019 Total Points: 10 Implement a Java program that determines how many months it will take to save up enough money for a down payment on a house.","title":"Task Outline"},{"location":"pset07/#background-theory","text":"Let's assume that you have grown weary of living in dormitories, and you wish to save up enough money for a down payment on a house. The down payment is 25% of the the total cost of the house. Since housing is very expensive, it will probably take you several years to accomplish this task. In this program, we will measure this time duration in terms of months. Let's also assume that you have a well-paying job, in which you earn a respectable annual salary. As well, you have a savings account which generates an annual rate of return. Furthermore, your place of employment provides you with pay raises on a semi-annual basis. That is, your salary will increase by a certain decimal percentage after the 6th month, the 12th month, the 18th month, and so on.","title":"Background Theory"},{"location":"pset07/#parameters","text":"The following is an explanation of the parameters used in the savingsDuration() function:","title":"Parameters"},{"location":"pset07/#annualsalary","text":"This is the annual salary which you earn from your job.","title":"annualsalary"},{"location":"pset07/#percentsaved","text":"This is the amount of your salary which you will dedicate towards saving for the down payment. It should be expressed in decimal form, for example: 0.1","title":"percentsaved"},{"location":"pset07/#totalcost","text":"This is the purchase price of your dream home.","title":"totalcost"},{"location":"pset07/#payraise","text":"This is the amount by which your salary is increased, and these raises occur every six months. This should be expressed in decimal form, for example: 0.1","title":"payraise"},{"location":"pset07/#hints","text":"You will need to determine the amount of the down payment , which can be calculated from: totalCost*0.25 Since the time duration is measured in months, you will need to determine your monthly salary . This can be calculated from: annualSalary/12.0 The amount that you have saved so far should be referred to as your current savings , and you begin with a current savings of: 0 Assume that your savings account generates an annual rate of return of 4%. In other words, rate = 0.04 Create a variable that keeps track of the number of months that have occurred in this simulation, and set this variable to: 0 Assume that you invest your current savings wisely, so at the end of each month, you receive an additional currentSavings*rate/12.0 to be put into your savings. Be careful about when you increase your salary due to the pay raise. This should only happen after the 6th month, 12th month, 18th month, and so on.","title":"Hints"},{"location":"pset07/#code-distribution","text":"Description File Size File Name Java Source Code for Down Payment 5.2KB pset07.zip Contents of pset07.zip : PSet07DownPayment/ \u251c\u2500\u2500 DownPayment.class \u251c\u2500\u2500 DownPayment.ctxt \u251c\u2500\u2500 DownPayment.java \u251c\u2500\u2500 DownPaymentJUnitTest.class \u251c\u2500\u2500 DownPaymentJUnitTest.ctxt \u251c\u2500\u2500 DownPaymentJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset07/#specification","text":"Write a Java program in the file DownPayment.java that outputs the number of months that would be required to save enough money for a down payment on a house, given the annual salary that you earn, and the return on your investments. You will write your solution in a function called savingsDuration(double annualSalary, double percentSaved, double totalCost, double payRaise) right below the place where it says: YOUR CODE HERE When the function call savingsDuration(120000, 0.05, 500000, 0.03) is executed, the output of the program should be: 142","title":"Specification"},{"location":"pset07/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset07/#submission","text":"Upload the file DownPayment.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset08/","text":"Problem Set 8: Book Identifier Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 11, 2019 Total Points: 10 Implement a Java program that validates ISBN-10 numbers. Background Theory Any book that you purchase has an International Standard Book Number , otherwise known as an ISBN or ISBN-10 . This is a 10-digit number that uniquely identifies books and media products published internationally. It turns out that the last number of an ISBN-10 's digits is a check digit, otherwise known as a checksum, which is a number related mathematically to its preceding digits. The digits of an ISBN-10 are supposed to adhere to a formula, and this check digit allows you to verify whether an ISBN-10 's other nine digits are valid, without having to resort to other means of verification, for instance, by performing a query on a database of books. Calculating the Check Digit The check digit of an ISBN-10 number can be defined as follows. If x_1 x_1 represents an ISBN-10 's first digit, and x_{10} x_{10} represents its last digit, then we have the following: x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 In other words, to compute an ISBN-10 's tenth digit, multiply its first digit by 1, its second digit by 2, its third digit by 3, its fourth digit by 4, its fifth digit by 5, its sixth digit by 6, its seventh digit by 7, its eighth digit by 8, and its ninth digit by 9. Take the sum of those products and perform a modulus with 11. The result should be the ISBN-10 's tenth digit. Example Case For example, the ISBN-10 for the textbook Absolute Beginner's Guide to C , is 0-789-75198-4 , the tenth digit of which is 4 . Let's take the sum of the products of the ISBN-10 's first nine digits: (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 If we now compute 290 modulus 11, we get a result of 4, which is equal to the tenth digit in the ISBN-10 . This verifies that the ISBN-10 number is legitimate. Hints Note that the ISBN-10 is being read in as a string, and it gets converted to an integer by using the Integer.parseInt() function. The reason for this procedure is to accommodate ISBN-10 's with leading zeros. Now that we have an ISBN-10 in integer form, how can we get at its tenth(i.e. rightmost) digit? Perhaps we can make a clever use of the modulus operator: tenth = isbncode % 10 Now, how can we get a that same variable's ninth digit? Perhaps we can get rid of its tenth digit by using integer division: isbncode = isbncode // 10 Afterwards, we can access the ninth digit by using the modulus operator: ninth = isbncode % 10 Hopefully, you can detect a pattern here. Remember that a certain looping construct such as the for loop can be very useful here. Code Distribution Description File Size File Name Java Source Code for Book Identifier 4.9KB pset08.zip Contents of pset08.zip : PSet08BookIdentifier/ \u251c\u2500\u2500 BookIdentifier.class \u251c\u2500\u2500 BookIdentifier.ctxt \u251c\u2500\u2500 BookIdentifier.java \u251c\u2500\u2500 BookIdentifierJUnitTest.class \u251c\u2500\u2500 BookIdentifierJUnitTest.ctxt \u251c\u2500\u2500 BookIdentifierJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file BookIdentifier.java that determines whether an ISBN-10 number is legitimate or not. You will write your solution in a function called validateBook(String isbnCode) right below the place where it says: YOUR CODE HERE If the ISBN-10 number is valid, then your validateBook method should return the string YES . Otherwise, if the ISBN-10 number is not valid, then your validateBook method should return the string NO . When the function call validateBook(\"0789751984\") is executed, the output of the program should be: YES Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file BookIdentifier.java to the Web-CAT automated grading platform.","title":"Problem Set 8: Book Identifier"},{"location":"pset08/#problem-set-8-book-identifier","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 8: Book Identifier"},{"location":"pset08/#task-outline","text":"Due Date: Monday, November 11, 2019 Total Points: 10 Implement a Java program that validates ISBN-10 numbers.","title":"Task Outline"},{"location":"pset08/#background-theory","text":"Any book that you purchase has an International Standard Book Number , otherwise known as an ISBN or ISBN-10 . This is a 10-digit number that uniquely identifies books and media products published internationally. It turns out that the last number of an ISBN-10 's digits is a check digit, otherwise known as a checksum, which is a number related mathematically to its preceding digits. The digits of an ISBN-10 are supposed to adhere to a formula, and this check digit allows you to verify whether an ISBN-10 's other nine digits are valid, without having to resort to other means of verification, for instance, by performing a query on a database of books.","title":"Background Theory"},{"location":"pset08/#calculating-the-check-digit","text":"The check digit of an ISBN-10 number can be defined as follows. If x_1 x_1 represents an ISBN-10 's first digit, and x_{10} x_{10} represents its last digit, then we have the following: x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 x_{10} = (1 \\cdot x_1 + 2 \\cdot x_2 + 3 \\cdot x_3 + 4 \\cdot x_4 + 5 \\cdot x_5 + 6 \\cdot x_6 + 7 \\cdot x_7 + 8 \\cdot x_8 + 9 \\cdot x_9)\\, \\mbox{modulus}\\, 11 In other words, to compute an ISBN-10 's tenth digit, multiply its first digit by 1, its second digit by 2, its third digit by 3, its fourth digit by 4, its fifth digit by 5, its sixth digit by 6, its seventh digit by 7, its eighth digit by 8, and its ninth digit by 9. Take the sum of those products and perform a modulus with 11. The result should be the ISBN-10 's tenth digit.","title":"Calculating the Check Digit"},{"location":"pset08/#example-case","text":"For example, the ISBN-10 for the textbook Absolute Beginner's Guide to C , is 0-789-75198-4 , the tenth digit of which is 4 . Let's take the sum of the products of the ISBN-10 's first nine digits: (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 (1 \\cdot \\texttt{0}) + (2 \\cdot \\texttt{7}) + (3 \\cdot \\texttt{8}) + (4 \\cdot \\texttt{9}) + (5 \\cdot \\texttt{7}) + (6 \\cdot \\texttt{5}) + (7 \\cdot \\texttt{1}) + (8 \\cdot \\texttt{9}) + (9 \\cdot \\texttt{8}) = 290 If we now compute 290 modulus 11, we get a result of 4, which is equal to the tenth digit in the ISBN-10 . This verifies that the ISBN-10 number is legitimate.","title":"Example Case"},{"location":"pset08/#hints","text":"Note that the ISBN-10 is being read in as a string, and it gets converted to an integer by using the Integer.parseInt() function. The reason for this procedure is to accommodate ISBN-10 's with leading zeros. Now that we have an ISBN-10 in integer form, how can we get at its tenth(i.e. rightmost) digit? Perhaps we can make a clever use of the modulus operator: tenth = isbncode % 10 Now, how can we get a that same variable's ninth digit? Perhaps we can get rid of its tenth digit by using integer division: isbncode = isbncode // 10 Afterwards, we can access the ninth digit by using the modulus operator: ninth = isbncode % 10 Hopefully, you can detect a pattern here. Remember that a certain looping construct such as the for loop can be very useful here.","title":"Hints"},{"location":"pset08/#code-distribution","text":"Description File Size File Name Java Source Code for Book Identifier 4.9KB pset08.zip Contents of pset08.zip : PSet08BookIdentifier/ \u251c\u2500\u2500 BookIdentifier.class \u251c\u2500\u2500 BookIdentifier.ctxt \u251c\u2500\u2500 BookIdentifier.java \u251c\u2500\u2500 BookIdentifierJUnitTest.class \u251c\u2500\u2500 BookIdentifierJUnitTest.ctxt \u251c\u2500\u2500 BookIdentifierJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset08/#specification","text":"Write a Java program in the file BookIdentifier.java that determines whether an ISBN-10 number is legitimate or not. You will write your solution in a function called validateBook(String isbnCode) right below the place where it says: YOUR CODE HERE If the ISBN-10 number is valid, then your validateBook method should return the string YES . Otherwise, if the ISBN-10 number is not valid, then your validateBook method should return the string NO . When the function call validateBook(\"0789751984\") is executed, the output of the program should be: YES","title":"Specification"},{"location":"pset08/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset08/#submission","text":"Upload the file BookIdentifier.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset09/","text":"Problem Set 9: Radiation Exposure Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 18, 2019 Total Points: 10 Implement a Java program that determines the amount of radiation a person is exposed to, in a given period of time. Background Theory Radioactive decay is the process by which an unstable atom loses energy and emits ionizing particles, in what is commonly referred to as radiation. Exposure to radiation can be dangerous, and is very important to measure, to ensure that a person is not exposed to a large amount of it. The radioactivity of a material decreases over time, as the material decays. A radioactive decay curve describes this decay. The x-axis measures time, and the y-axis measures the amount of activity produced by the radioactive sample. Activity is defined as the rate at which the nuclei within the sample undergo transitions. Put simply, this measures how much radiation is emitted at any one point in time. The measurement of activity is called the Becquerel(Bq) . The following diagram is a sample of a radioactive decay curve. The Problem Scope Here's the problem we'd like to solve. Let's say that Sarina has moved into a new apartment. Unknown to her, there is a sample of Cobalt-60 inside one of the walls of the apartment. Initially, that sample had 10MBq of activity, but she moves in after the sample had been there for 5 years. She lives in the apartment for 6 years, then leaves. How much radiation was she exposed to? We can actually figure this out using the radioactive decay curve from above. What we want to know is her total radiation exposure from year 5 to year 11. Total radiaton exposure corresponds to the area between the two green lines at time = 5 and time = 11 , and under the blue radioactive decay curve. This should make intuitive sense, if the x axis measures time, and the y axis measures activity, then the area under the curve measures (time * activity), or (years * MBq), which is approximately the total number of MBq that Sarnia was exposed to during her time in the apartment. Now, how do we calculate this area? Unlike a simple shape, like a square, or a circle, we have no easy way to determine what the area under this curve is. However, there is a technique that can provide us with some assistance, namely, approximation . Let's use an approximation algorithm to estimate the area under the curve. We can do so by first splitting up the area into equally-sized rectangles. In this case, there are six of them, corresponding to one rectangle per year: Once we've done that, we can figure out the area of each rectangle pretty easily. Recall that the area of a rectangle is determined by multiplying the height of a rectangle by its width. The height of this rectangle is the value of the curve at 5.0 . If the curve is described by a function, f(x) , then we can obtain the value of the curve by calculating f(5.0) . f(5.0) = 5.181 The width of this rectangle is 1.0 . So, the area of this single rectangle is: 1.0 * 5.181 = 5.181 . To approximate how much radiation Sarina was exposed to, we then calculate the area of each successive rectangle, and then sum up the areas of each rectangle to get the total. When we do this, we find that Sarina was exposed to 22.94241041057671 MBq of radiation. Hints In this problem set, you are asked to find the amount of radiation that a person is exposed to, during some period of time. In order to complete this assignment, you'll need to know what the value of the radioactive decay curve is, at various points. There is a function f(x) that has been provided for you, which mathematically describes the radioactive decay curve for this problem. This problem set is relatively straightforward if you only consider the cases where the widths of the rectangles are integer values. Those cases can be handled with a simple for loop. Therefore, you will need to seek an approach that can handle decimal-valued rectangle widths. You should find out the number of rectangles that are within the defined region. How would you calculate this number? Perhaps the following equation would work: int gaps = (int)((stop-start)/step); Then, you should create an array which has the same size as the number of rectangles, with all of its elements initialized to 0.0 . Perhaps you should call this array timePosts . Next, you should loop across the timePosts array, and fill it with time values that correspond to the position of each rectangle. For the example described in the Background section, the timePosts array would be as follows: timePosts = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0] Then, it is simply a matter of looping across the timePosts array, calculating the product of f(x)*step , and summing each of these products to result in the area under the curve. Code Distribution Description File Size File Name Java Source Code for Radiation Exposure 5.4KB pset09.zip Contents of pset09.zip : PSet09RadiationExposure/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 RadiationExposure.class \u251c\u2500\u2500 RadiationExposure.ctxt \u251c\u2500\u2500 RadiationExposure.java \u251c\u2500\u2500 RadiationExposureJUnitTest.class \u251c\u2500\u2500 RadiationExposureJUnitTest.ctxt \u251c\u2500\u2500 RadiationExposureJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file RadiationExposure.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called decayCurveArea(int start, int stop, double step) right below the place where it says: YOUR CODE HERE When the function call decayCurveArea(5, 11, 1.0) is executed, the output of the program should be: 22.94241041057671 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file RadiationExposure.java to the Web-CAT automated grading platform.","title":"Problem Set 9: Radiation Exposure"},{"location":"pset09/#problem-set-9-radiation-exposure","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 9: Radiation Exposure"},{"location":"pset09/#task-outline","text":"Due Date: Monday, November 18, 2019 Total Points: 10 Implement a Java program that determines the amount of radiation a person is exposed to, in a given period of time.","title":"Task Outline"},{"location":"pset09/#background-theory","text":"Radioactive decay is the process by which an unstable atom loses energy and emits ionizing particles, in what is commonly referred to as radiation. Exposure to radiation can be dangerous, and is very important to measure, to ensure that a person is not exposed to a large amount of it. The radioactivity of a material decreases over time, as the material decays. A radioactive decay curve describes this decay. The x-axis measures time, and the y-axis measures the amount of activity produced by the radioactive sample. Activity is defined as the rate at which the nuclei within the sample undergo transitions. Put simply, this measures how much radiation is emitted at any one point in time. The measurement of activity is called the Becquerel(Bq) . The following diagram is a sample of a radioactive decay curve.","title":"Background Theory"},{"location":"pset09/#the-problem-scope","text":"Here's the problem we'd like to solve. Let's say that Sarina has moved into a new apartment. Unknown to her, there is a sample of Cobalt-60 inside one of the walls of the apartment. Initially, that sample had 10MBq of activity, but she moves in after the sample had been there for 5 years. She lives in the apartment for 6 years, then leaves. How much radiation was she exposed to? We can actually figure this out using the radioactive decay curve from above. What we want to know is her total radiation exposure from year 5 to year 11. Total radiaton exposure corresponds to the area between the two green lines at time = 5 and time = 11 , and under the blue radioactive decay curve. This should make intuitive sense, if the x axis measures time, and the y axis measures activity, then the area under the curve measures (time * activity), or (years * MBq), which is approximately the total number of MBq that Sarnia was exposed to during her time in the apartment. Now, how do we calculate this area? Unlike a simple shape, like a square, or a circle, we have no easy way to determine what the area under this curve is. However, there is a technique that can provide us with some assistance, namely, approximation . Let's use an approximation algorithm to estimate the area under the curve. We can do so by first splitting up the area into equally-sized rectangles. In this case, there are six of them, corresponding to one rectangle per year: Once we've done that, we can figure out the area of each rectangle pretty easily. Recall that the area of a rectangle is determined by multiplying the height of a rectangle by its width. The height of this rectangle is the value of the curve at 5.0 . If the curve is described by a function, f(x) , then we can obtain the value of the curve by calculating f(5.0) . f(5.0) = 5.181 The width of this rectangle is 1.0 . So, the area of this single rectangle is: 1.0 * 5.181 = 5.181 . To approximate how much radiation Sarina was exposed to, we then calculate the area of each successive rectangle, and then sum up the areas of each rectangle to get the total. When we do this, we find that Sarina was exposed to 22.94241041057671 MBq of radiation.","title":"The Problem Scope"},{"location":"pset09/#hints","text":"In this problem set, you are asked to find the amount of radiation that a person is exposed to, during some period of time. In order to complete this assignment, you'll need to know what the value of the radioactive decay curve is, at various points. There is a function f(x) that has been provided for you, which mathematically describes the radioactive decay curve for this problem. This problem set is relatively straightforward if you only consider the cases where the widths of the rectangles are integer values. Those cases can be handled with a simple for loop. Therefore, you will need to seek an approach that can handle decimal-valued rectangle widths. You should find out the number of rectangles that are within the defined region. How would you calculate this number? Perhaps the following equation would work: int gaps = (int)((stop-start)/step); Then, you should create an array which has the same size as the number of rectangles, with all of its elements initialized to 0.0 . Perhaps you should call this array timePosts . Next, you should loop across the timePosts array, and fill it with time values that correspond to the position of each rectangle. For the example described in the Background section, the timePosts array would be as follows: timePosts = [5.0, 6.0, 7.0, 8.0, 9.0, 10.0] Then, it is simply a matter of looping across the timePosts array, calculating the product of f(x)*step , and summing each of these products to result in the area under the curve.","title":"Hints"},{"location":"pset09/#code-distribution","text":"Description File Size File Name Java Source Code for Radiation Exposure 5.4KB pset09.zip Contents of pset09.zip : PSet09RadiationExposure/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 RadiationExposure.class \u251c\u2500\u2500 RadiationExposure.ctxt \u251c\u2500\u2500 RadiationExposure.java \u251c\u2500\u2500 RadiationExposureJUnitTest.class \u251c\u2500\u2500 RadiationExposureJUnitTest.ctxt \u251c\u2500\u2500 RadiationExposureJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset09/#specification","text":"Write a Java program in the file RadiationExposure.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called decayCurveArea(int start, int stop, double step) right below the place where it says: YOUR CODE HERE When the function call decayCurveArea(5, 11, 1.0) is executed, the output of the program should be: 22.94241041057671","title":"Specification"},{"location":"pset09/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset09/#submission","text":"Upload the file RadiationExposure.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset10/","text":"Problem Set 10: Credit Card Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, November 25, 2019 Total Points: 10 Implement a Java program that determines whether a provided credit card number is valid, according to Luhn's algorithm. Background Theory Every credit card has a number, both printed on its face, and embedded in the magnetic stripe on its back. That number is also stored in a database somewhere, so that when your card is used to buy something, the creditor knows whom to bill. There are many people with credit cards in this world, so those numbers are pretty long: American Express: 15-digit numbers MasterCard: 16-digit numbers Visa: 13- and 16-digit numbers Credit cards companies don't just assign a random series of digits to compose their credit card numbers. Rather, there is actually some structure to them: American Express numbers must start with 34 or 37. MasterCard numbers must start with 51, 52, 53, 54 or 55. Visa numbers must start with 4. Credit card numbers also have a checksum built into them, which is a mathematical relationship between at least one number, and the others. This checksum enables computers to detect errors and fraudulent credit card numbers, without having to query a database, which can be slow. Credit card companies use an algorithm developed by Hans Peter Luhn, a researcher from IBM. According to Luhn's algorithm , you can determine if a credit card is valid by executing the following steps: Multiply every other digit by 2, starting with the number's second-to-last digit , and then add those products' digits together. Take this result, and add it to the sum of the digits that weren't multiplied by 2. If the total's last digit is 0, then that credit card number is valid. Example Case Consider an example of Luhn's algorithm with the following American Express number: 378282246310005 For the sake of clarity, I have underlined every other digit, starting with the number's second-to-last digit: 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 Then, multiply each of the underlined digits(highlighted in bold) by 2: \\textbf{7}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{4}\\cdot{2} + \\textbf{3}\\cdot{2} + \\textbf{0}\\cdot{2} + \\textbf{0}\\cdot{2} \\textbf{7}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{4}\\cdot{2} + \\textbf{3}\\cdot{2} + \\textbf{0}\\cdot{2} + \\textbf{0}\\cdot{2} The partial products are as follows: 14 + 4 + 4 + 8 + 6 + 0 + 0 14 + 4 + 4 + 8 + 6 + 0 + 0 Next, add those products' digits( Note: not the products themselves) together: 1 + 4 + 4 + 4 + 8 + 6 + 0 + 0 = 27 1 + 4 + 4 + 4 + 8 + 6 + 0 + 0 = 27 Now, add the result of 27 to the sum of the digits in the credit card number that weren't multiplied by 2: 27 + 3 + 8 + 8 + 2 + 6 + 1 + 0 + 5 = 60 27 + 3 + 8 + 8 + 2 + 6 + 1 + 0 + 5 = 60 Notice that the last digit in the result of 60 is a 0, so the credit card number is legitimate. Hints Note that the credit card number is being brought into the function as a String . This means that you will have to use the substring() method throughout your program, to separate out the individual digits. You will have to convert between String values and integers. Use the Integer.parseInt() function to perform this conversion, as follows: String sample = \"123\"; int num = Integer.parseInt(sample); Luhn's algorithm clearly specifies that you must sum the digits starting from the second-to-last digit . Does this mean that you have to perform a reverse loop? Not necessarily. Think about what happens when a credit card has an odd quantity of digits, it means that we have to sum all of the elements located at the odd-numbered indexes: 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 Now, think about what happens when a credit card has an even quantity of digits. In this case, we have to sum all of the elements located at the even-numbered indexes: \\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}0 \\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}0 Code Distribution Description File Size File Name Java Source Code for Credit Card 5.3KB pset10.zip Contents of pset10.zip : PSet10CreditCard/ \u251c\u2500\u2500 CreditCard.class \u251c\u2500\u2500 CreditCard.ctxt \u251c\u2500\u2500 CreditCard.java \u251c\u2500\u2500 CreditCardJUnitTest.class \u251c\u2500\u2500 CreditCardJUnitTest.ctxt \u251c\u2500\u2500 CreditCardJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file CreditCard.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called validate(String digits) right below the place where it says: YOUR CODE HERE If the credit card number is valid, then your validate function should return a String corresponding to the specific credit card brand. These return values should be AMEX , MASTERCARD , VISA , or VALID . Otherwise, if the credit card number is not valid, then your validate function should return the String INVALID . When the function call validate(\"378282246310005\") is executed, the output of the program should be: AMEX Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file CreditCard.java to the Web-CAT automated grading platform.","title":"Problem Set 10: Credit Card"},{"location":"pset10/#problem-set-10-credit-card","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 10: Credit Card"},{"location":"pset10/#task-outline","text":"Due Date: Monday, November 25, 2019 Total Points: 10 Implement a Java program that determines whether a provided credit card number is valid, according to Luhn's algorithm.","title":"Task Outline"},{"location":"pset10/#background-theory","text":"Every credit card has a number, both printed on its face, and embedded in the magnetic stripe on its back. That number is also stored in a database somewhere, so that when your card is used to buy something, the creditor knows whom to bill. There are many people with credit cards in this world, so those numbers are pretty long: American Express: 15-digit numbers MasterCard: 16-digit numbers Visa: 13- and 16-digit numbers Credit cards companies don't just assign a random series of digits to compose their credit card numbers. Rather, there is actually some structure to them: American Express numbers must start with 34 or 37. MasterCard numbers must start with 51, 52, 53, 54 or 55. Visa numbers must start with 4. Credit card numbers also have a checksum built into them, which is a mathematical relationship between at least one number, and the others. This checksum enables computers to detect errors and fraudulent credit card numbers, without having to query a database, which can be slow. Credit card companies use an algorithm developed by Hans Peter Luhn, a researcher from IBM. According to Luhn's algorithm , you can determine if a credit card is valid by executing the following steps: Multiply every other digit by 2, starting with the number's second-to-last digit , and then add those products' digits together. Take this result, and add it to the sum of the digits that weren't multiplied by 2. If the total's last digit is 0, then that credit card number is valid.","title":"Background Theory"},{"location":"pset10/#example-case","text":"Consider an example of Luhn's algorithm with the following American Express number: 378282246310005 For the sake of clarity, I have underlined every other digit, starting with the number's second-to-last digit: 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 Then, multiply each of the underlined digits(highlighted in bold) by 2: \\textbf{7}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{4}\\cdot{2} + \\textbf{3}\\cdot{2} + \\textbf{0}\\cdot{2} + \\textbf{0}\\cdot{2} \\textbf{7}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{2}\\cdot{2} + \\textbf{4}\\cdot{2} + \\textbf{3}\\cdot{2} + \\textbf{0}\\cdot{2} + \\textbf{0}\\cdot{2} The partial products are as follows: 14 + 4 + 4 + 8 + 6 + 0 + 0 14 + 4 + 4 + 8 + 6 + 0 + 0 Next, add those products' digits( Note: not the products themselves) together: 1 + 4 + 4 + 4 + 8 + 6 + 0 + 0 = 27 1 + 4 + 4 + 4 + 8 + 6 + 0 + 0 = 27 Now, add the result of 27 to the sum of the digits in the credit card number that weren't multiplied by 2: 27 + 3 + 8 + 8 + 2 + 6 + 1 + 0 + 5 = 60 27 + 3 + 8 + 8 + 2 + 6 + 1 + 0 + 5 = 60 Notice that the last digit in the result of 60 is a 0, so the credit card number is legitimate.","title":"Example Case"},{"location":"pset10/#hints","text":"Note that the credit card number is being brought into the function as a String . This means that you will have to use the substring() method throughout your program, to separate out the individual digits. You will have to convert between String values and integers. Use the Integer.parseInt() function to perform this conversion, as follows: String sample = \"123\"; int num = Integer.parseInt(sample); Luhn's algorithm clearly specifies that you must sum the digits starting from the second-to-last digit . Does this mean that you have to perform a reverse loop? Not necessarily. Think about what happens when a credit card has an odd quantity of digits, it means that we have to sum all of the elements located at the odd-numbered indexes: 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 3\\underline{7}8\\underline{2}8\\underline{2}2\\underline{4}6\\underline{3}1\\underline{0}0\\underline{0}5 Now, think about what happens when a credit card has an even quantity of digits. In this case, we have to sum all of the elements located at the even-numbered indexes: \\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}0 \\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}5\\underline{1}0\\underline{5}1\\underline{0}0","title":"Hints"},{"location":"pset10/#code-distribution","text":"Description File Size File Name Java Source Code for Credit Card 5.3KB pset10.zip Contents of pset10.zip : PSet10CreditCard/ \u251c\u2500\u2500 CreditCard.class \u251c\u2500\u2500 CreditCard.ctxt \u251c\u2500\u2500 CreditCard.java \u251c\u2500\u2500 CreditCardJUnitTest.class \u251c\u2500\u2500 CreditCardJUnitTest.ctxt \u251c\u2500\u2500 CreditCardJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset10/#specification","text":"Write a Java program in the file CreditCard.java which calculates the amount of radiation exposure in a given time period. You will write your solution in a function called validate(String digits) right below the place where it says: YOUR CODE HERE If the credit card number is valid, then your validate function should return a String corresponding to the specific credit card brand. These return values should be AMEX , MASTERCARD , VISA , or VALID . Otherwise, if the credit card number is not valid, then your validate function should return the String INVALID . When the function call validate(\"378282246310005\") is executed, the output of the program should be: AMEX","title":"Specification"},{"location":"pset10/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset10/#submission","text":"Upload the file CreditCard.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset11/","text":"Problem Set 11: Vigenere Cipher Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, December 2, 2019 Total Points: 10 Implement a Java program that encrypts a message using the Vigenere Cipher. Background Theory The Vigenere Cipher improves upon the Caesar Cipher by encrypting a message using a sequence of keys, also known as a keyword . A keyword is an alphabetical string, where a represents 0 , b represents 1 , c represents 2 , and so on, all the way up to z which represents 25 . In other words, if p p is some plaintext, and k k is a keyword, then each letter c_i c_i in the ciphertext c c is computed as: c_i = (p_i + k_j)\\, \\mbox{mod}\\, 26 c_i = (p_i + k_j)\\, \\mbox{mod}\\, 26 Note that the Vigenere Cipher uses k_j k_j in constrast to the Caesar Cipher, which just uses k k . Also, if k k is shorter than the plaintext message p p (which is usually the case), then the letters in k k must be reused cyclically as many times as it takes to encrypt p p . Example Case Consider the case where the plaintext message is hello , and the keyword is abc . With this keyword, the h would be encrypted with a key of 0 , the e with a key of 1 , and the first l with a key of 2 . At this point, we have exhausted all of the letters in the keyword, so we must resuse part of it to encrypt the rest of the plaintext message. The second l would be encrypted with a key of 0 , and the o would be encrypted with a key of 1 . After the encryption is complete, the result would be the ciphertext hfnlp . Hints In order to solve this problem set, a clever strategy may be to figure out how many times you need to repeat the keyword so that it matches up with the message. One way to do this is to divide the length of the message by the length of the keyword. Remember to multiply by 1.0 when performing this division . Once you have this comparison value, you want to determine the next largest integer value. An effective way of doing this is to use the mathematical ceiling function. For example, ceiling applied to 5.279 will produce a value of 6 . In Java, we must use the Math class to use the ceiling function: int num = Math.ceil(x) Code Distribution Description File Size File Name Java Source Code for Vigenere Cipher 6.1KB pset11.zip Contents of pset11.zip : PSet11VigenereCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VigenereCipher.class \u251c\u2500\u2500 VigenereCipher.ctxt \u251c\u2500\u2500 VigenereCipher.java \u251c\u2500\u2500 VigenereCipherJUnitTest.class \u251c\u2500\u2500 VigenereCipherJUnitTest.ctxt \u2514\u2500\u2500 VigenereCipherJUnitTest.java Specification Write a Java program in the file VigenereCipher.java that encrypts a message using the Vigenere Cipher. You will write your solution in a function called encrypt(String message, String key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", \"abc\") is executed, the output of the program should be: hfnlp Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file VigenereCipher.java to the Web-CAT automated grading platform.","title":"Problem Set 11: Vigenere Cipher"},{"location":"pset11/#problem-set-11-vigenere-cipher","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 11: Vigenere Cipher"},{"location":"pset11/#task-outline","text":"Due Date: Monday, December 2, 2019 Total Points: 10 Implement a Java program that encrypts a message using the Vigenere Cipher.","title":"Task Outline"},{"location":"pset11/#background-theory","text":"The Vigenere Cipher improves upon the Caesar Cipher by encrypting a message using a sequence of keys, also known as a keyword . A keyword is an alphabetical string, where a represents 0 , b represents 1 , c represents 2 , and so on, all the way up to z which represents 25 . In other words, if p p is some plaintext, and k k is a keyword, then each letter c_i c_i in the ciphertext c c is computed as: c_i = (p_i + k_j)\\, \\mbox{mod}\\, 26 c_i = (p_i + k_j)\\, \\mbox{mod}\\, 26 Note that the Vigenere Cipher uses k_j k_j in constrast to the Caesar Cipher, which just uses k k . Also, if k k is shorter than the plaintext message p p (which is usually the case), then the letters in k k must be reused cyclically as many times as it takes to encrypt p p .","title":"Background Theory"},{"location":"pset11/#example-case","text":"Consider the case where the plaintext message is hello , and the keyword is abc . With this keyword, the h would be encrypted with a key of 0 , the e with a key of 1 , and the first l with a key of 2 . At this point, we have exhausted all of the letters in the keyword, so we must resuse part of it to encrypt the rest of the plaintext message. The second l would be encrypted with a key of 0 , and the o would be encrypted with a key of 1 . After the encryption is complete, the result would be the ciphertext hfnlp .","title":"Example Case"},{"location":"pset11/#hints","text":"In order to solve this problem set, a clever strategy may be to figure out how many times you need to repeat the keyword so that it matches up with the message. One way to do this is to divide the length of the message by the length of the keyword. Remember to multiply by 1.0 when performing this division . Once you have this comparison value, you want to determine the next largest integer value. An effective way of doing this is to use the mathematical ceiling function. For example, ceiling applied to 5.279 will produce a value of 6 . In Java, we must use the Math class to use the ceiling function: int num = Math.ceil(x)","title":"Hints"},{"location":"pset11/#code-distribution","text":"Description File Size File Name Java Source Code for Vigenere Cipher 6.1KB pset11.zip Contents of pset11.zip : PSet11VigenereCipher/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 VigenereCipher.class \u251c\u2500\u2500 VigenereCipher.ctxt \u251c\u2500\u2500 VigenereCipher.java \u251c\u2500\u2500 VigenereCipherJUnitTest.class \u251c\u2500\u2500 VigenereCipherJUnitTest.ctxt \u2514\u2500\u2500 VigenereCipherJUnitTest.java","title":"Code Distribution"},{"location":"pset11/#specification","text":"Write a Java program in the file VigenereCipher.java that encrypts a message using the Vigenere Cipher. You will write your solution in a function called encrypt(String message, String key) right below the place where it says: YOUR CODE HERE When the function call encrypt(\"hello\", \"abc\") is executed, the output of the program should be: hfnlp","title":"Specification"},{"location":"pset11/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset11/#submission","text":"Upload the file VigenereCipher.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset12/","text":"Problem Set 12: Library Rental(Winter Break Assignment) Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, March 2nd, 2020 Total Points: 10 Implement a Java program that manages an electronic book rental system for a library. Background Theory The libraries of SmallTownX need a new electronic book rental system, and it is up to you to build it. SmallTownX has two libraries. Each library offers many books to rent. Customers can print the list of available books, borrow, and return books. Four classes have been given: Book , Library , LibraryTest , and LibraryJUnitTest . These classes provide the functionality for the book database. You must implement the missing methods in the file Library.java to make these classes work. The Problem Scope Your task for this problem set is to implement the Library class. It is the class that will represent each library, and manage a collection of books. All libraries have the same hours: 9AM to 5PM daily. However, they have different addresses and book collections (i.e., ArrayLists of Book objects). The files Book.java , Library.java , LibraryTest.java and LibraryJUnitTest.java have been provided for you. public static void main(String[] args) method is included in LibraryTest.java which creates two libraries, and then performs some operations on the books. However, most of the necessary methods in the file Library.java are missing. Specifically, the methods you will need to define and implement are the following: public static String displayOpeningHours() public String displayAddress() public String addBook(Book novel) public String borrowBook(String novelName) public String returnBook(String textName) Hints Note that all of these methods return a String . If you examine the output of the program run, you will notice that every time some method is called, it returns a confirmation message. Do not include any System.out.println() statements to display a confirmation message to the output. These String messages are return values from each method, which are then printed out in the file LibraryTest.java . Be careful when comparing String objects. Use first.equals(second) for comparing the contents of first and second . You should get a small part working at a time. Start by commenting out the entire public static void main(String[] args) , then uncomment it line by line. Run the program, get the first lines working, then uncomment the next line, get that working, etc. You must not modify the code in Book.java , LibraryTest.java , and LibraryJUnitTest.java . This is a much tougher assignment than what you are accustomed to. Start working on this project as soon as possible, and leave plenty of time for debugging. Also, I will be checking carefully for plaigiarism violations. Example Case The output when you run this program should be similar to the following: Adding books to the first library: You have successfully added The Da Vinci Code You have successfully added Le Petit Prince You have successfully added A Tale of Two Cities You have successfully added The Lord of the Rings Library hours: Libraries are open daily from 9am to 5pm. Library addresses: 10 Main St. 228 Liberty St. Borrowing The Lord of the Rings: You have successfully borrowed The Lord of the Rings Sorry, this book is already borrowed. Sorry, this book is not in our catalog. Books available in the first library: The Da Vinci Code Le Petit Prince A Tale of Two Cities Books available in the second library: No books in our catalog. Returning The Lord of the Rings to the second library: Sorry, this book is not in our catalog. Returning The Lord of the Rings to the first library: You have successfully returned The Lord of the Rings Books available in the first library: The Da Vinci Code Le Petit Prince A Tale of Two Cities The Lord of the Rings Code Distribution Description File Size File Name Java Source Code for Library Rental 12KB pset12.zip Contents of pset12.zip : PSet12LibraryRental/ \u251c\u2500\u2500 Book.class \u251c\u2500\u2500 Book.ctxt \u251c\u2500\u2500 Book.java \u251c\u2500\u2500 Library.class \u251c\u2500\u2500 Library.ctxt \u251c\u2500\u2500 Library.java \u251c\u2500\u2500 LibraryJUnitTest.class \u251c\u2500\u2500 LibraryJUnitTest.ctxt \u251c\u2500\u2500 LibraryJUnitTest.java \u251c\u2500\u2500 LibraryTest.class \u251c\u2500\u2500 LibraryTest.ctxt \u251c\u2500\u2500 LibraryTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file Library.java that manages an electronic book rental system for a library. You will write your solutions in the following functions where it states: YOUR CODE HERE public static String displayOpeningHours() public String displayAddress() public String addBook(Book novel) public String borrowBook(String novelName) public String returnBook(String textName) Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file Library.java to the Web-CAT automated grading platform.","title":"Problem Set 12: Library Rental"},{"location":"pset12/#problem-set-12-library-rentalwinter-break-assignment","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 12: Library Rental(Winter Break Assignment)"},{"location":"pset12/#task-outline","text":"Due Date: Monday, March 2nd, 2020 Total Points: 10 Implement a Java program that manages an electronic book rental system for a library.","title":"Task Outline"},{"location":"pset12/#background-theory","text":"The libraries of SmallTownX need a new electronic book rental system, and it is up to you to build it. SmallTownX has two libraries. Each library offers many books to rent. Customers can print the list of available books, borrow, and return books. Four classes have been given: Book , Library , LibraryTest , and LibraryJUnitTest . These classes provide the functionality for the book database. You must implement the missing methods in the file Library.java to make these classes work.","title":"Background Theory"},{"location":"pset12/#the-problem-scope","text":"Your task for this problem set is to implement the Library class. It is the class that will represent each library, and manage a collection of books. All libraries have the same hours: 9AM to 5PM daily. However, they have different addresses and book collections (i.e., ArrayLists of Book objects). The files Book.java , Library.java , LibraryTest.java and LibraryJUnitTest.java have been provided for you. public static void main(String[] args) method is included in LibraryTest.java which creates two libraries, and then performs some operations on the books. However, most of the necessary methods in the file Library.java are missing. Specifically, the methods you will need to define and implement are the following: public static String displayOpeningHours() public String displayAddress() public String addBook(Book novel) public String borrowBook(String novelName) public String returnBook(String textName)","title":"The Problem Scope"},{"location":"pset12/#hints","text":"Note that all of these methods return a String . If you examine the output of the program run, you will notice that every time some method is called, it returns a confirmation message. Do not include any System.out.println() statements to display a confirmation message to the output. These String messages are return values from each method, which are then printed out in the file LibraryTest.java . Be careful when comparing String objects. Use first.equals(second) for comparing the contents of first and second . You should get a small part working at a time. Start by commenting out the entire public static void main(String[] args) , then uncomment it line by line. Run the program, get the first lines working, then uncomment the next line, get that working, etc. You must not modify the code in Book.java , LibraryTest.java , and LibraryJUnitTest.java . This is a much tougher assignment than what you are accustomed to. Start working on this project as soon as possible, and leave plenty of time for debugging. Also, I will be checking carefully for plaigiarism violations.","title":"Hints"},{"location":"pset12/#example-case","text":"The output when you run this program should be similar to the following: Adding books to the first library: You have successfully added The Da Vinci Code You have successfully added Le Petit Prince You have successfully added A Tale of Two Cities You have successfully added The Lord of the Rings Library hours: Libraries are open daily from 9am to 5pm. Library addresses: 10 Main St. 228 Liberty St. Borrowing The Lord of the Rings: You have successfully borrowed The Lord of the Rings Sorry, this book is already borrowed. Sorry, this book is not in our catalog. Books available in the first library: The Da Vinci Code Le Petit Prince A Tale of Two Cities Books available in the second library: No books in our catalog. Returning The Lord of the Rings to the second library: Sorry, this book is not in our catalog. Returning The Lord of the Rings to the first library: You have successfully returned The Lord of the Rings Books available in the first library: The Da Vinci Code Le Petit Prince A Tale of Two Cities The Lord of the Rings","title":"Example Case"},{"location":"pset12/#code-distribution","text":"Description File Size File Name Java Source Code for Library Rental 12KB pset12.zip Contents of pset12.zip : PSet12LibraryRental/ \u251c\u2500\u2500 Book.class \u251c\u2500\u2500 Book.ctxt \u251c\u2500\u2500 Book.java \u251c\u2500\u2500 Library.class \u251c\u2500\u2500 Library.ctxt \u251c\u2500\u2500 Library.java \u251c\u2500\u2500 LibraryJUnitTest.class \u251c\u2500\u2500 LibraryJUnitTest.ctxt \u251c\u2500\u2500 LibraryJUnitTest.java \u251c\u2500\u2500 LibraryTest.class \u251c\u2500\u2500 LibraryTest.ctxt \u251c\u2500\u2500 LibraryTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset12/#specification","text":"Write a Java program in the file Library.java that manages an electronic book rental system for a library. You will write your solutions in the following functions where it states: YOUR CODE HERE public static String displayOpeningHours() public String displayAddress() public String addBook(Book novel) public String borrowBook(String novelName) public String returnBook(String textName)","title":"Specification"},{"location":"pset12/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset12/#submission","text":"Upload the file Library.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset13/","text":"Problem Set 13: Stock Broker Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, March 9, 2020 Total Points: 10 Implement a Java program that manages the value of an investor's stock portfolio. Background Theory Stocks are a type of security that gives stockholders a share of ownership in a company. They are issued by companies in order to raise capital, so that they may grow their business, or undertake new projects. Investors can buy and sell stocks on an open exchange called the stock market. It contains an indexed list of every company that has issued stock. It also provides the price of every company's stock at the current time, which is the stock's market value. The price of a stock can fluctuate dramatically according to market forces, and the concept of supply and demand. If a company is perfoming well, then the price of its stock tends to rise. However, if a company is doing poorly, then its stock price can drop. Investors can make money on the stock market by purchasing stock at a certain price, and then selling it later at a higher price, in which case they have earned a profit. However, if an investor sells a stock for a lower price than they have purchased it, then they shall incur a loss. The Problem Scope In order to simplify matters, we will assume that the investor is only purchasing shares in a single company. Also, we will only deal with the purchasing of shares, not the selling of them. Your StockBroker class should have the following properties: Instance variables: private ArrayList<Integer> shares; This data structure stores the quantity of shares that a investor has purchased, and each purchase is recorded as a separate event. private ArrayList<Double> cost; This data structure stores the price per share for each transaction that an investor has engaged in. In general, these two ArrayLists form a transaction history for the investor, as they store the quantity of shares purchased and the price per share for every purchase event, which occurs at every index. Constructor: public StockBroker() This is a default constructor, as it has no parameters. It is responsible for initializing the two ArrayLists , shares and cost . Accessor method: public double getProfit(double currentPrice) This method indicates the amount of money that has been gained or lost on the investor's stock holdings. The method has one parameter, which is the current price per share of the stock, which is a double . If the investor has earned money on his stock investments(market value is greater than total cost), then the result will be a positive value. However, if the investor has lost money on the stock(market value is smaller than total cost), then the result will be a negative value. The profit is computed in the following manner: Compute the current market value of all the shares of the stock(which is the total number of shares purchased so far, times the current price passed to the method). Subtract the total cost of all the shares of the stock(the total amount of money that the person has paid for all the shares of stock purchased so far). Mutator method: public void purchase(int amount, double price) This method executes a purchase transaction, in which an investor buys some shares of stock at a given price. The method has two parameters: amount , which is the number of shares as an int , and price , which is the price per share as a double . Code Distribution Description File Size File Name Java Source Code for Stock Broker 7.5KB pset13.zip Contents of pset13.zip : PSet13StockBroker/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 StockBroker.class \u251c\u2500\u2500 StockBroker.ctxt \u251c\u2500\u2500 StockBroker.java \u251c\u2500\u2500 StockBrokerJUnitTest.class \u251c\u2500\u2500 StockBrokerJUnitTest.ctxt \u251c\u2500\u2500 StockBrokerJUnitTest.java \u251c\u2500\u2500 StockBrokerTest.class \u251c\u2500\u2500 StockBrokerTest.ctxt \u2514\u2500\u2500 StockBrokerTest.java Specification Write a Java program in the file StockBroker.java that keeps track of an investor's purchases of stock in a particular company. The price of a stock changes frequently, so stocks bought at different times are usually purchased at different prices. You will write your solution in a class called public class StockBroker , right below the place where it says: YOUR CODE HERE . The program StockBrokerTest includes method calls to purchase() and getProfit() . It depicts an investor making a net profit of $30.00. This is because the investor buys a total of 30 shares(20 + 10) for a total of $90.00 cost($70.00 + $20.00), but the new current share price is $4.00, meaning that the shares are now worth $120.00. The output of the program should be: Profit earned = 30.0 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file StockBroker.java to the Web-CAT automated grading platform.","title":"Problem Set 13: Stock Broker"},{"location":"pset13/#problem-set-13-stock-broker","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 13: Stock Broker"},{"location":"pset13/#task-outline","text":"Due Date: Monday, March 9, 2020 Total Points: 10 Implement a Java program that manages the value of an investor's stock portfolio.","title":"Task Outline"},{"location":"pset13/#background-theory","text":"Stocks are a type of security that gives stockholders a share of ownership in a company. They are issued by companies in order to raise capital, so that they may grow their business, or undertake new projects. Investors can buy and sell stocks on an open exchange called the stock market. It contains an indexed list of every company that has issued stock. It also provides the price of every company's stock at the current time, which is the stock's market value. The price of a stock can fluctuate dramatically according to market forces, and the concept of supply and demand. If a company is perfoming well, then the price of its stock tends to rise. However, if a company is doing poorly, then its stock price can drop. Investors can make money on the stock market by purchasing stock at a certain price, and then selling it later at a higher price, in which case they have earned a profit. However, if an investor sells a stock for a lower price than they have purchased it, then they shall incur a loss.","title":"Background Theory"},{"location":"pset13/#the-problem-scope","text":"In order to simplify matters, we will assume that the investor is only purchasing shares in a single company. Also, we will only deal with the purchasing of shares, not the selling of them. Your StockBroker class should have the following properties:","title":"The Problem Scope"},{"location":"pset13/#instance-variables","text":"private ArrayList<Integer> shares; This data structure stores the quantity of shares that a investor has purchased, and each purchase is recorded as a separate event. private ArrayList<Double> cost; This data structure stores the price per share for each transaction that an investor has engaged in. In general, these two ArrayLists form a transaction history for the investor, as they store the quantity of shares purchased and the price per share for every purchase event, which occurs at every index.","title":"Instance variables:"},{"location":"pset13/#constructor","text":"public StockBroker() This is a default constructor, as it has no parameters. It is responsible for initializing the two ArrayLists , shares and cost .","title":"Constructor:"},{"location":"pset13/#accessor-method","text":"public double getProfit(double currentPrice) This method indicates the amount of money that has been gained or lost on the investor's stock holdings. The method has one parameter, which is the current price per share of the stock, which is a double . If the investor has earned money on his stock investments(market value is greater than total cost), then the result will be a positive value. However, if the investor has lost money on the stock(market value is smaller than total cost), then the result will be a negative value. The profit is computed in the following manner: Compute the current market value of all the shares of the stock(which is the total number of shares purchased so far, times the current price passed to the method). Subtract the total cost of all the shares of the stock(the total amount of money that the person has paid for all the shares of stock purchased so far).","title":"Accessor method:"},{"location":"pset13/#mutator-method","text":"public void purchase(int amount, double price) This method executes a purchase transaction, in which an investor buys some shares of stock at a given price. The method has two parameters: amount , which is the number of shares as an int , and price , which is the price per share as a double .","title":"Mutator method:"},{"location":"pset13/#code-distribution","text":"Description File Size File Name Java Source Code for Stock Broker 7.5KB pset13.zip Contents of pset13.zip : PSet13StockBroker/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 README.TXT \u251c\u2500\u2500 StockBroker.class \u251c\u2500\u2500 StockBroker.ctxt \u251c\u2500\u2500 StockBroker.java \u251c\u2500\u2500 StockBrokerJUnitTest.class \u251c\u2500\u2500 StockBrokerJUnitTest.ctxt \u251c\u2500\u2500 StockBrokerJUnitTest.java \u251c\u2500\u2500 StockBrokerTest.class \u251c\u2500\u2500 StockBrokerTest.ctxt \u2514\u2500\u2500 StockBrokerTest.java","title":"Code Distribution"},{"location":"pset13/#specification","text":"Write a Java program in the file StockBroker.java that keeps track of an investor's purchases of stock in a particular company. The price of a stock changes frequently, so stocks bought at different times are usually purchased at different prices. You will write your solution in a class called public class StockBroker , right below the place where it says: YOUR CODE HERE . The program StockBrokerTest includes method calls to purchase() and getProfit() . It depicts an investor making a net profit of $30.00. This is because the investor buys a total of 30 shares(20 + 10) for a total of $90.00 cost($70.00 + $20.00), but the new current share price is $4.00, meaning that the shares are now worth $120.00. The output of the program should be: Profit earned = 30.0","title":"Specification"},{"location":"pset13/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset13/#submission","text":"Upload the file StockBroker.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset14/","text":"Problem Set 14: Gene Extraction Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, March 16, 2020 Total Points: 10 Implement a Java program that determines whether a gene is present in a DNA sequence. Background Theory Deoxyribonucleic acid (DNA) is a complex biochemical macromolecule that carries genetic information for cellular life forms and some viruses. DNA is also the mechanism through which genetic information from parents is passed on during reproduction. DNA consists of long chains of chemical compounds called nucleotides . Four nucleotides are present in DNA: Adenine (A), Cytosine (C), Guanine (G), and Thymine (T). DNA has a double-helix structure(see diagram below) containing complementary chains of these four nucleotides connected by hydrogen bonds. Certain regions of the DNA are called genes . Most genes encode instructions for building proteins (these are called protein-coding genes). These proteins are responsible for carrying out most of the life processes of the organism. Nucleotides in a gene are organized into codons . Codons are groups of three nucleotides and are written as the first letters of their nucleotides(e.g., TAC or GGA). Each codon uniquely encodes a single amino acid, a building block of proteins. The process of building proteins from DNA has two major phases called transcription and translation , in which a gene is replicated into an intermediate form called mRNA , which is then processed by a structure called a ribosome to build the chain of amino acids encoded by the codons of the gene. The sequences of DNA that encode proteins occur between a start codon (which we will assume to be ATG) and a stop codon (which is any of TAA, TAG, or TGA). Not all regions of DNA are genes; large portions that do not lie between a valid start and stop codon are called intergenic DNA and have other(possibly unknown) functions. Computational biologists examine large DNA data files to find patterns and important information, such as which regions are genes. Sometimes, they are interested in the percentages of mass accounted for by each of the four nucleotide types. Often, high percentages of Cytosine (C) and Guanine (G) are indicators of important genetic data. For example, consider the following DNA sequence: GTCATGCTACGTACGTATCGAGTCTCGTAACTG The start codon is ATG , and the stop codon for this example is TAA . In order for this to qualify as a valid gene, it must have a minimum of 9 nucleotides between the start and stop codons. This particular example has 21 nucleotides between its start and stop codons, so it does qualify. GTC[ATG]CTACGTACGTATCGAGTCTCG[TAA]CTG The nucleotide sequence that is present between the start and stop codons is as follows: GTC[ATGCTACGTACGTATCGAGTCTCGTAA]CTG Now, we must calculate the percentage composition of Cytosine (C) and Guanine (G) in the nucleotide sequence, also known as the CG ratio . \\mbox{CG ratio} = 1.0\\times\\frac{\\mbox{quantity of C and G nucleotides}}{\\mbox{quantity of all nucleotides}} \\mbox{CG ratio} = 1.0\\times\\frac{\\mbox{quantity of C and G nucleotides}}{\\mbox{quantity of all nucleotides}} In this case, the quantity of C and G nucleotides is 12. The count of all the nucleotides in the sequence is 27. Therefore, the CG ratio is calculated as follows: \\mbox{CG ratio} = 1.0\\times\\frac{12}{27} \\\\ \\mbox{CG ratio} = 0.444444 \\mbox{CG ratio} = 1.0\\times\\frac{12}{27} \\\\ \\mbox{CG ratio} = 0.444444 Since the CG ratio is greater than 0.3, we can conclude that this nucleotide sequence is a valid, protein-coding gene. Note that we need to multiply this ratio by 1.0, in order to force a decimal division. Hints Your program must examine each of the provided DNA sequences, and determine if a valid, protein-coding gene is present. This gene must satisfy the following constraints: It must begin with a valid start codon : ATG It must end with a valid stop codon : TAA, TAG, or TGA It must contain at least 5 codons, including its initial start codon, and its final stop codon. The size of the gene must be a multiple of 3 . The nucleotides Cytosine (C) and Guanine (G) must make up at least 30% of the gene's total composition. First, you should examine the provided DNA sequence for the index of the start codon, ATG. If this start codon is not present in the DNA sequence, then you simply cannot have any gene in there. Note that all of the DNA sequences under consideration will only contain zero or one ATG start codons. In other words, we will not consider cases where the DNA sequence contains more than one gene. Once you have the index of the ATG start codon, you should scan through the rest of the DNA sequence for a stop codon. There are only two possibilities here: either you find a stop codon, or you reach the end of the DNA sequence(in which case you didn't find a stop codon). As you are scanning through the DNA sequence, you should probably examine it in string chunks of size three. This makes it easy to compare each string chunk with each of the stop codon varieties. Once you have found a stop codon, you should check that the gene contains at least 5 codons in total, including the start and stop codons. Then, you should perform a simple calculation to verify that at least 30% of the gene's nucleotides are Cytosine (C) or Guanine (G). At various points in your program, especially during the evaluation of certain conditional statements, you may come to the conclusion that you don't have a valid gene. In such cases, there is no need to continue with the rest of the program, and you can simply exit the method with the statement: return \"INVALID\" Code Distribution Description File Size File Name Java Source Code for Gene Extraction 6.6KB pset14.zip Contents of pset14.zip : PSet14GeneExtraction/ \u251c\u2500\u2500 GeneExtraction.class \u251c\u2500\u2500 GeneExtraction.ctxt \u251c\u2500\u2500 GeneExtraction.java \u251c\u2500\u2500 GeneExtractionJUnitTest.class \u251c\u2500\u2500 GeneExtractionJUnitTest.ctxt \u251c\u2500\u2500 GeneExtractionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file GeneExtraction.java that determines whether a valid gene is present in a DNA sequence. If this is the case, then your program should return the sequence of nucleotide letters that represents the gene. Otherwise, it should return the string: INVALID You will write your solution in a function called geneSequence(String dna) right below the place where it says: YOUR CODE HERE When the function call geneSequence(\"GTCATGCTACGTACGTATCGAGTCTCGTAACTG\") is executed, the output of the program should be: ATGCTACGTACGTATCGAGTCTCGTAA Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file GeneExtraction.java to the Web-CAT automated grading platform.","title":"Problem Set 14: Gene Extraction"},{"location":"pset14/#problem-set-14-gene-extraction","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 14: Gene Extraction"},{"location":"pset14/#task-outline","text":"Due Date: Monday, March 16, 2020 Total Points: 10 Implement a Java program that determines whether a gene is present in a DNA sequence.","title":"Task Outline"},{"location":"pset14/#background-theory","text":"Deoxyribonucleic acid (DNA) is a complex biochemical macromolecule that carries genetic information for cellular life forms and some viruses. DNA is also the mechanism through which genetic information from parents is passed on during reproduction. DNA consists of long chains of chemical compounds called nucleotides . Four nucleotides are present in DNA: Adenine (A), Cytosine (C), Guanine (G), and Thymine (T). DNA has a double-helix structure(see diagram below) containing complementary chains of these four nucleotides connected by hydrogen bonds. Certain regions of the DNA are called genes . Most genes encode instructions for building proteins (these are called protein-coding genes). These proteins are responsible for carrying out most of the life processes of the organism. Nucleotides in a gene are organized into codons . Codons are groups of three nucleotides and are written as the first letters of their nucleotides(e.g., TAC or GGA). Each codon uniquely encodes a single amino acid, a building block of proteins. The process of building proteins from DNA has two major phases called transcription and translation , in which a gene is replicated into an intermediate form called mRNA , which is then processed by a structure called a ribosome to build the chain of amino acids encoded by the codons of the gene. The sequences of DNA that encode proteins occur between a start codon (which we will assume to be ATG) and a stop codon (which is any of TAA, TAG, or TGA). Not all regions of DNA are genes; large portions that do not lie between a valid start and stop codon are called intergenic DNA and have other(possibly unknown) functions. Computational biologists examine large DNA data files to find patterns and important information, such as which regions are genes. Sometimes, they are interested in the percentages of mass accounted for by each of the four nucleotide types. Often, high percentages of Cytosine (C) and Guanine (G) are indicators of important genetic data. For example, consider the following DNA sequence: GTCATGCTACGTACGTATCGAGTCTCGTAACTG The start codon is ATG , and the stop codon for this example is TAA . In order for this to qualify as a valid gene, it must have a minimum of 9 nucleotides between the start and stop codons. This particular example has 21 nucleotides between its start and stop codons, so it does qualify. GTC[ATG]CTACGTACGTATCGAGTCTCG[TAA]CTG The nucleotide sequence that is present between the start and stop codons is as follows: GTC[ATGCTACGTACGTATCGAGTCTCGTAA]CTG Now, we must calculate the percentage composition of Cytosine (C) and Guanine (G) in the nucleotide sequence, also known as the CG ratio . \\mbox{CG ratio} = 1.0\\times\\frac{\\mbox{quantity of C and G nucleotides}}{\\mbox{quantity of all nucleotides}} \\mbox{CG ratio} = 1.0\\times\\frac{\\mbox{quantity of C and G nucleotides}}{\\mbox{quantity of all nucleotides}} In this case, the quantity of C and G nucleotides is 12. The count of all the nucleotides in the sequence is 27. Therefore, the CG ratio is calculated as follows: \\mbox{CG ratio} = 1.0\\times\\frac{12}{27} \\\\ \\mbox{CG ratio} = 0.444444 \\mbox{CG ratio} = 1.0\\times\\frac{12}{27} \\\\ \\mbox{CG ratio} = 0.444444 Since the CG ratio is greater than 0.3, we can conclude that this nucleotide sequence is a valid, protein-coding gene. Note that we need to multiply this ratio by 1.0, in order to force a decimal division.","title":"Background Theory"},{"location":"pset14/#hints","text":"Your program must examine each of the provided DNA sequences, and determine if a valid, protein-coding gene is present. This gene must satisfy the following constraints: It must begin with a valid start codon : ATG It must end with a valid stop codon : TAA, TAG, or TGA It must contain at least 5 codons, including its initial start codon, and its final stop codon. The size of the gene must be a multiple of 3 . The nucleotides Cytosine (C) and Guanine (G) must make up at least 30% of the gene's total composition. First, you should examine the provided DNA sequence for the index of the start codon, ATG. If this start codon is not present in the DNA sequence, then you simply cannot have any gene in there. Note that all of the DNA sequences under consideration will only contain zero or one ATG start codons. In other words, we will not consider cases where the DNA sequence contains more than one gene. Once you have the index of the ATG start codon, you should scan through the rest of the DNA sequence for a stop codon. There are only two possibilities here: either you find a stop codon, or you reach the end of the DNA sequence(in which case you didn't find a stop codon). As you are scanning through the DNA sequence, you should probably examine it in string chunks of size three. This makes it easy to compare each string chunk with each of the stop codon varieties. Once you have found a stop codon, you should check that the gene contains at least 5 codons in total, including the start and stop codons. Then, you should perform a simple calculation to verify that at least 30% of the gene's nucleotides are Cytosine (C) or Guanine (G). At various points in your program, especially during the evaluation of certain conditional statements, you may come to the conclusion that you don't have a valid gene. In such cases, there is no need to continue with the rest of the program, and you can simply exit the method with the statement: return \"INVALID\"","title":"Hints"},{"location":"pset14/#code-distribution","text":"Description File Size File Name Java Source Code for Gene Extraction 6.6KB pset14.zip Contents of pset14.zip : PSet14GeneExtraction/ \u251c\u2500\u2500 GeneExtraction.class \u251c\u2500\u2500 GeneExtraction.ctxt \u251c\u2500\u2500 GeneExtraction.java \u251c\u2500\u2500 GeneExtractionJUnitTest.class \u251c\u2500\u2500 GeneExtractionJUnitTest.ctxt \u251c\u2500\u2500 GeneExtractionJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset14/#specification","text":"Write a Java program in the file GeneExtraction.java that determines whether a valid gene is present in a DNA sequence. If this is the case, then your program should return the sequence of nucleotide letters that represents the gene. Otherwise, it should return the string: INVALID You will write your solution in a function called geneSequence(String dna) right below the place where it says: YOUR CODE HERE When the function call geneSequence(\"GTCATGCTACGTACGTATCGAGTCTCGTAACTG\") is executed, the output of the program should be: ATGCTACGTACGTATCGAGTCTCGTAA","title":"Specification"},{"location":"pset14/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset14/#submission","text":"Upload the file GeneExtraction.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset15/","text":"Problem Set 15: Bar Code Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, March 23, 2020 Total Points: 10 Implement a Java program that determines whether a particular bar code pattern is valid. Background Theory The Universal Product Code(UPC-A) is a bar code system that was first used in an Ohio grocery store back in 1974, to automate the checkout process. The UPC-A system has since been much more widely adopted, and it is now seen on virtually every product in existence. For example, the UPC code shown below is for a box of tissues made by a US company called Kleenex. Every UPC code contains 12 digits in total, and this code would be read as: 036000291452 In recent years, a new system has emerged called the European Article Number(EAN-13), which is backwards compatible with UPC-A. However, in this problem set, we will deal exclusively with the UPC-A system. Consider the following detailed diagram of a UPC-A code. It corresponds to a 2 Liter bottle of Pepsi. Each of the vertical bars in the UPC-A code represents a binary digit, where a black vertical bar represents a 1 , and a white vertical bar represents a 0 . You may have noticed that the middle and ends of a UPC-A code have several bars which are longer than the others. These longer bars serve to separate the UPC-A code into two distinct sections. The Left Hand Guard Bars and the Right Hand Guard Bars each consist of the bit pattern 101 . The Tall Center Bars have the pattern 01010 . The UPC-A code is separated into two distinct sections: The part to the left of the Tall Center Bars , and the part to the right of them. Each section has its own unique encoding scheme for describing the decimal number data which is contained within it. The reason for this is to allow bar codes to be read upside down, as well as right side up. The following is a description of each section's encoding scheme, where each decimal number appears on top, and its corresponding bar pattern follows below it. Note that consecutive black bars have no dividing markers, so they just appear to be thicker. Also note that the white bars encode data(binary digit 0 ) just like the black bars(binary digit 1 ). Left Section The data in this section appears between the Right Hand Guard Bars and the Tall Center Bars . It contains the Number System Character and the Manufacturer ID Number . The encoding scheme for this section is as follows: Right Section The data in this section appears between the Tall Center Bars and the Left Hand Guard Bars . It contains the Item Number and the Modulo Check Character . The encoding scheme for this section is as follows: Lookup Table We can represent these two encoding schemes with a lookup table: These encoding schemes will be used to represent an entire UPC-A bar code, where a 0 represents a white bar, and a 1 represents a black bar. In other words, the previously indicated Pepsi bar code, corresponding to the decimal number 012000002304 , can be represented by the following binary string of digits: 10100011010011001001001100011010001101000110101010111001011100101101100100001011100101011100101 Example Case One of your tasks is to convert this string of binary digits to its corresponding UPC-A number, in decimal form. You will have to contend with the Guard Bars , the Tall Center Bars , and the different encoding schemes. Once you have the decimal form of the UPC-A number, you must verify that it is valid. Fortunately, UPC-A codes have a checksum built into them, which is a mathematical relationship between the digits, that enables us to perform a verification algorithm. According to this algorithm, you can determine if a UPC-A number is valid by executing the following steps: Add together all of the numbers corresponding to an even index, starting with the number at index 0 . Take this result, and multiply it by 3 . Add together all of the numbers corresponding to an odd index, starting with the number at index 1 , but excluding the last digit(the Modulo Check Character ) from this calculation. Add together these two results. From this sum, find the remainder when it is divided by 10. If the result is 0 , then your Check Digit is 0 . Otherwise, calculate the Check Digit by subtracting the result from 10 . Compare your Check Digit to the Modulo Check Character . If they are equal, then the UPC-A number is VALID . Applying the Algorithm Consider an example of the UPC-A verification algorithm with the following number: 012000002304 . Note that the Modulo Check Character is 4. For the sake of clarity, I have underlined every other digit, starting with the number's first digit: \\underline{0}1\\underline{2}0\\underline{0}0\\underline{0}0\\underline{2}3\\underline{0}4 \\underline{0}1\\underline{2}0\\underline{0}0\\underline{0}0\\underline{2}3\\underline{0}4 Then, add together each of the underlined digits(the ones corresponding to even indexes): 0 + 2 + 0 + 0 + 2 + 0 = 4 0 + 2 + 0 + 0 + 2 + 0 = 4 Next, multiply this sum by 3: 4 * 3 = 12 4 * 3 = 12 Add together each of the non-underlined digits(the ones corresponding to odd indexes), except for the final digit: 1 + 0 + 0 + 0 + 3 = 4 1 + 0 + 0 + 0 + 3 = 4 Then, add these two results together: 12 + 4 = 16 12 + 4 = 16 Determine the remainder when this result is divided by 10( Hint: use the modulus operator): 16 \\,\\,\\texttt{%}\\,\\, 10 = 6 16 \\,\\,\\texttt{%}\\,\\, 10 = 6 The result is not equal to 0, so subtract it from 10: 10 - 6 = 4 10 - 6 = 4 Notice that the resulting number 4 is exactly the same as the Modulo Check Character , so the UPC-A number is legitimate. Hints Note that the UPC-A bar code pattern is being brought into the function as a String. This means that you will have to use the substring() method throughout your program, to extract the necessary bit patterns. Also, remember to use the Integer.parseInt(String sample) method to convert from a String to an integer. The UPC-A bar code pattern includes the End Guard Bars and the Tall Center Bars with the numerical data. You must take these into account, when you are extracting the bit patterns corresponding to the numerical data. The following diagram outlines each of the sections that are contained in the bit code pattern: You are provided with two String arrays that describe both the left-hand encoding scheme, and the right-hand encoding scheme. Note that the index of each bit pattern corresponds to its equivalent decimal value. You will have to perform a lookup with the bit pattern on its respective array, to retrieve its index. Code Distribution Description File Size File Name Java Source Code for Bar Code 5.8KB pset15.zip Contents of pset15.zip : PSet15BarCode/ \u251c\u2500\u2500 BarCode.class \u251c\u2500\u2500 BarCode.ctxt \u251c\u2500\u2500 BarCode.java \u251c\u2500\u2500 BarCodeJUnitTest.class \u251c\u2500\u2500 BarCodeJUnitTest.ctxt \u251c\u2500\u2500 BarCodeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file BarCode.java that determines whether a UPC-A bar code pattern is legitimate or not. You will write your solution in a function called validate(String barPattern) , right below the place where it says: YOUR CODE HERE . If the UPC-A number is valid, then your validate function should return a String VALID . Otherwise, if the UPC-A number is not valid, then your validate function should return the String INVALID . When the function call validate(\"10100011010011001001001100011010001101000110101010111001011100101101100100001011100101011100101\") is executed, the output of the program should be: VALID Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file BarCode.java to the Web-CAT automated grading platform.","title":"Problem Set 15: Bar Code"},{"location":"pset15/#problem-set-15-bar-code","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 15: Bar Code"},{"location":"pset15/#task-outline","text":"Due Date: Monday, March 23, 2020 Total Points: 10 Implement a Java program that determines whether a particular bar code pattern is valid.","title":"Task Outline"},{"location":"pset15/#background-theory","text":"The Universal Product Code(UPC-A) is a bar code system that was first used in an Ohio grocery store back in 1974, to automate the checkout process. The UPC-A system has since been much more widely adopted, and it is now seen on virtually every product in existence. For example, the UPC code shown below is for a box of tissues made by a US company called Kleenex. Every UPC code contains 12 digits in total, and this code would be read as: 036000291452 In recent years, a new system has emerged called the European Article Number(EAN-13), which is backwards compatible with UPC-A. However, in this problem set, we will deal exclusively with the UPC-A system. Consider the following detailed diagram of a UPC-A code. It corresponds to a 2 Liter bottle of Pepsi. Each of the vertical bars in the UPC-A code represents a binary digit, where a black vertical bar represents a 1 , and a white vertical bar represents a 0 . You may have noticed that the middle and ends of a UPC-A code have several bars which are longer than the others. These longer bars serve to separate the UPC-A code into two distinct sections. The Left Hand Guard Bars and the Right Hand Guard Bars each consist of the bit pattern 101 . The Tall Center Bars have the pattern 01010 . The UPC-A code is separated into two distinct sections: The part to the left of the Tall Center Bars , and the part to the right of them. Each section has its own unique encoding scheme for describing the decimal number data which is contained within it. The reason for this is to allow bar codes to be read upside down, as well as right side up. The following is a description of each section's encoding scheme, where each decimal number appears on top, and its corresponding bar pattern follows below it. Note that consecutive black bars have no dividing markers, so they just appear to be thicker. Also note that the white bars encode data(binary digit 0 ) just like the black bars(binary digit 1 ).","title":"Background Theory"},{"location":"pset15/#left-section","text":"The data in this section appears between the Right Hand Guard Bars and the Tall Center Bars . It contains the Number System Character and the Manufacturer ID Number . The encoding scheme for this section is as follows:","title":"Left Section"},{"location":"pset15/#right-section","text":"The data in this section appears between the Tall Center Bars and the Left Hand Guard Bars . It contains the Item Number and the Modulo Check Character . The encoding scheme for this section is as follows:","title":"Right Section"},{"location":"pset15/#lookup-table","text":"We can represent these two encoding schemes with a lookup table: These encoding schemes will be used to represent an entire UPC-A bar code, where a 0 represents a white bar, and a 1 represents a black bar. In other words, the previously indicated Pepsi bar code, corresponding to the decimal number 012000002304 , can be represented by the following binary string of digits: 10100011010011001001001100011010001101000110101010111001011100101101100100001011100101011100101","title":"Lookup Table"},{"location":"pset15/#example-case","text":"One of your tasks is to convert this string of binary digits to its corresponding UPC-A number, in decimal form. You will have to contend with the Guard Bars , the Tall Center Bars , and the different encoding schemes. Once you have the decimal form of the UPC-A number, you must verify that it is valid. Fortunately, UPC-A codes have a checksum built into them, which is a mathematical relationship between the digits, that enables us to perform a verification algorithm. According to this algorithm, you can determine if a UPC-A number is valid by executing the following steps: Add together all of the numbers corresponding to an even index, starting with the number at index 0 . Take this result, and multiply it by 3 . Add together all of the numbers corresponding to an odd index, starting with the number at index 1 , but excluding the last digit(the Modulo Check Character ) from this calculation. Add together these two results. From this sum, find the remainder when it is divided by 10. If the result is 0 , then your Check Digit is 0 . Otherwise, calculate the Check Digit by subtracting the result from 10 . Compare your Check Digit to the Modulo Check Character . If they are equal, then the UPC-A number is VALID .","title":"Example Case"},{"location":"pset15/#applying-the-algorithm","text":"Consider an example of the UPC-A verification algorithm with the following number: 012000002304 . Note that the Modulo Check Character is 4. For the sake of clarity, I have underlined every other digit, starting with the number's first digit: \\underline{0}1\\underline{2}0\\underline{0}0\\underline{0}0\\underline{2}3\\underline{0}4 \\underline{0}1\\underline{2}0\\underline{0}0\\underline{0}0\\underline{2}3\\underline{0}4 Then, add together each of the underlined digits(the ones corresponding to even indexes): 0 + 2 + 0 + 0 + 2 + 0 = 4 0 + 2 + 0 + 0 + 2 + 0 = 4 Next, multiply this sum by 3: 4 * 3 = 12 4 * 3 = 12 Add together each of the non-underlined digits(the ones corresponding to odd indexes), except for the final digit: 1 + 0 + 0 + 0 + 3 = 4 1 + 0 + 0 + 0 + 3 = 4 Then, add these two results together: 12 + 4 = 16 12 + 4 = 16 Determine the remainder when this result is divided by 10( Hint: use the modulus operator): 16 \\,\\,\\texttt{%}\\,\\, 10 = 6 16 \\,\\,\\texttt{%}\\,\\, 10 = 6 The result is not equal to 0, so subtract it from 10: 10 - 6 = 4 10 - 6 = 4 Notice that the resulting number 4 is exactly the same as the Modulo Check Character , so the UPC-A number is legitimate.","title":"Applying the Algorithm"},{"location":"pset15/#hints","text":"Note that the UPC-A bar code pattern is being brought into the function as a String. This means that you will have to use the substring() method throughout your program, to extract the necessary bit patterns. Also, remember to use the Integer.parseInt(String sample) method to convert from a String to an integer. The UPC-A bar code pattern includes the End Guard Bars and the Tall Center Bars with the numerical data. You must take these into account, when you are extracting the bit patterns corresponding to the numerical data. The following diagram outlines each of the sections that are contained in the bit code pattern: You are provided with two String arrays that describe both the left-hand encoding scheme, and the right-hand encoding scheme. Note that the index of each bit pattern corresponds to its equivalent decimal value. You will have to perform a lookup with the bit pattern on its respective array, to retrieve its index.","title":"Hints"},{"location":"pset15/#code-distribution","text":"Description File Size File Name Java Source Code for Bar Code 5.8KB pset15.zip Contents of pset15.zip : PSet15BarCode/ \u251c\u2500\u2500 BarCode.class \u251c\u2500\u2500 BarCode.ctxt \u251c\u2500\u2500 BarCode.java \u251c\u2500\u2500 BarCodeJUnitTest.class \u251c\u2500\u2500 BarCodeJUnitTest.ctxt \u251c\u2500\u2500 BarCodeJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset15/#specification","text":"Write a Java program in the file BarCode.java that determines whether a UPC-A bar code pattern is legitimate or not. You will write your solution in a function called validate(String barPattern) , right below the place where it says: YOUR CODE HERE . If the UPC-A number is valid, then your validate function should return a String VALID . Otherwise, if the UPC-A number is not valid, then your validate function should return the String INVALID . When the function call validate(\"10100011010011001001001100011010001101000110101010111001011100101101100100001011100101011100101\") is executed, the output of the program should be: VALID","title":"Specification"},{"location":"pset15/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset15/#submission","text":"Upload the file BarCode.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"resources/","text":"Tutorials The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf Installing the Dr. Java IDE (for a Windows system) Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe Resource Material Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf Exam Preparation Guide, 8th Edition Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"Resources"},{"location":"resources/#tutorials","text":"The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf","title":"Tutorials"},{"location":"resources/#installing-the-dr-java-idefor-a-windows-system","text":"Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe","title":"Installing the Dr. Java IDE(for a Windows system)"},{"location":"resources/#resource-material","text":"Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf","title":"Resource Material"},{"location":"resources/#exam-preparation-guide-8th-edition","text":"Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"Exam Preparation Guide, 8th Edition"},{"location":"syllabus/","text":"Syllabus AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources. Course Location Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login Teaching Assistant Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets. Course Description Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike. Reference Material Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class. Hardware Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported. Homework Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 . Plagiarism Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 . Grading Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment. Assignment Weighting Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40% Course Websites Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Syllabus"},{"location":"syllabus/#syllabus","text":"AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources.","title":"Syllabus"},{"location":"syllabus/#course-location","text":"Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login","title":"Course Location"},{"location":"syllabus/#teaching-assistant","text":"Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets.","title":"Teaching Assistant"},{"location":"syllabus/#course-description","text":"Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike.","title":"Course Description"},{"location":"syllabus/#reference-material","text":"Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class.","title":"Reference Material"},{"location":"syllabus/#hardware","text":"Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported.","title":"Hardware"},{"location":"syllabus/#homework","text":"Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 .","title":"Homework"},{"location":"syllabus/#plagiarism","text":"Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 .","title":"Plagiarism"},{"location":"syllabus/#grading","text":"Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment.","title":"Grading"},{"location":"syllabus/#assignment-weighting","text":"Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40%","title":"Assignment Weighting"},{"location":"syllabus/#course-websites","text":"Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Course Websites"},{"location":"techsupport/","text":"Technical Support What happens if the Mock Exam Webpage becomes unaccessable? Check your email. As a failsafe measure, the Mock Exam has been distributed to all students as the following email attachments: Description File Size File Name The Mock Exam Questions, in PDF format 94KB mockExamQuestions.pdf Java Source Code for the Mock Exam 19KB mockexamcode.zip My BlueJ application has crashed, and won't reopen! You may use another IDE if you have one available, such as IntelliJ, Eclipse or NetBeans. However, don't waste your time downloading and installing them on short notice. You may also develop your Java programs using a simple text editor, such as Notepad++, Submlime, Vim, Emacs or Gedit. I can't access the Web-CAT autograder website! If you can't seem to log in to Web-CAT, for whatever reason, then just send me your completed Java code responses as email attachments. I can view the timestamps on the email, to ensure that it was sent within the Mock Exam time limit. My computer has crashed, and refuses to boot up again! Access the Mock Exam Website, or the Mock Exam email attachments, using your cell phone. Write your Java responses on a piece of paper, and use your phone to take a photo of them. Send the photos to me as email attachments. Only do this as an absolute last resort. Every piece of technology that I own(desktop/laptop/tablet/phone) has failed! I will be monitoring my emails during the exam period. Send me an email detailing the specific troubles that you have encountered, and I will assess the situation on a case-by-case basis.","title":"Technical Support"},{"location":"techsupport/#technical-support","text":"","title":"Technical Support"},{"location":"techsupport/#what-happens-if-the-mock-exam-webpage-becomes-unaccessable","text":"Check your email. As a failsafe measure, the Mock Exam has been distributed to all students as the following email attachments: Description File Size File Name The Mock Exam Questions, in PDF format 94KB mockExamQuestions.pdf Java Source Code for the Mock Exam 19KB mockexamcode.zip","title":"What happens if the Mock Exam Webpage becomes unaccessable?"},{"location":"techsupport/#my-bluej-application-has-crashed-and-wont-reopen","text":"You may use another IDE if you have one available, such as IntelliJ, Eclipse or NetBeans. However, don't waste your time downloading and installing them on short notice. You may also develop your Java programs using a simple text editor, such as Notepad++, Submlime, Vim, Emacs or Gedit.","title":"My BlueJ application has crashed, and won't reopen!"},{"location":"techsupport/#i-cant-access-the-web-cat-autograder-website","text":"If you can't seem to log in to Web-CAT, for whatever reason, then just send me your completed Java code responses as email attachments. I can view the timestamps on the email, to ensure that it was sent within the Mock Exam time limit.","title":"I can't access the Web-CAT autograder website!"},{"location":"techsupport/#my-computer-has-crashed-and-refuses-to-boot-up-again","text":"Access the Mock Exam Website, or the Mock Exam email attachments, using your cell phone. Write your Java responses on a piece of paper, and use your phone to take a photo of them. Send the photos to me as email attachments. Only do this as an absolute last resort.","title":"My computer has crashed, and refuses to boot up again!"},{"location":"techsupport/#every-piece-of-technology-that-i-owndesktoplaptoptabletphone-has-failed","text":"I will be monitoring my emails during the exam period. Send me an email detailing the specific troubles that you have encountered, and I will assess the situation on a case-by-case basis.","title":"Every piece of technology that I own(desktop/laptop/tablet/phone) has failed!"}]}