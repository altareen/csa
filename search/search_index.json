{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AP Computer Science A Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes. Announcements Problem Set 4 is due on Tuesday, October 8th. picoCTF 2019: Use this link to register with my team, Digital Dragons. Note that you must use a VPN to overcome the reCAPTCHA. Course Calendar: Semester One Academic dates are in italics , course assessment deadlines are in bold . September 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Opening Ceremony 2 First Day of School 3 4 5 6 7 8 9 PSet 1 Due 10 Teachers' Day 11 12 Lab 1 Due 13 Mid-Autumn Holiday 14 15 16 PSet 2 Due 17 Quiz 1 Due 18 19 20 Lab 2 Due 21 22 23 PSet 3 Due 24 25 Senior Week 26 Senior Week 27 Senior Week 28 29 Make-up Day Senior Week 30 Senior Week October 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 National Day Holiday 2 National Day Holiday 3 National Day Holiday 4 National Day Holiday 5 SAT 6 7 National Day Holiday 8 PSet 4 Due 9 10 11 12 Make-up Day Sport Events 13 14 15 16 17 18 19 20 21 22 23 24 25 Field Trip 26 27 28 29 30 31 Halloween November 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 SAT II 3 4 5 6 7 8 End of First Quarter 9 10 11 Remembrance Day 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Thanksgiving 29 30 December 2019 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 SAT 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Xmas Break 24 Xmas Break 25 Xmas Break 26 27 28 29 30 31 NYE Carnival January 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 New Year's Day 2 3 4 5 6 Final Exams 7 Final Exams 8 Final Exams 9 Final Exams 10 Final Exams 11 12 13 Final Exams 14 15 16 17 Winter Break Begins 18 19 20 21 22 23 24 25 Chinese New Year 26 27 28 29 30 31 Course Calendar: Semester Two Academic dates are in italics , course assessment deadlines are in bold . February 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 School Resumes 18 19 20 21 22 23 24 25 26 27 28 29 March 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 St. Patrick's Day 18 19 20 21 22 23 24 25 26 27 28 29 30 31 April 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 Tomb Sweeping Day 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 May 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 May Day 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 June 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Dragon Boat Festival 26 27 28 29 30 July 2020 Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 Summer Break Begins 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"Home"},{"location":"#ap-computer-science-a","text":"Web-CAT: Submit Java programs to this automated grading platform. GitHub Code Repository: Java code examples covered in class. AP Classroom: CollegeBoard's question bank and exam registration portal. Sakai Learning Management System: Platform for taking online quizzes.","title":"AP Computer Science A"},{"location":"#announcements","text":"Problem Set 4 is due on Tuesday, October 8th. picoCTF 2019: Use this link to register with my team, Digital Dragons. Note that you must use a VPN to overcome the reCAPTCHA.","title":"Announcements"},{"location":"#course-calendar-semester-one","text":"Academic dates are in italics , course assessment deadlines are in bold .","title":"Course Calendar: Semester One"},{"location":"#september-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 Opening Ceremony 2 First Day of School 3 4 5 6 7 8 9 PSet 1 Due 10 Teachers' Day 11 12 Lab 1 Due 13 Mid-Autumn Holiday 14 15 16 PSet 2 Due 17 Quiz 1 Due 18 19 20 Lab 2 Due 21 22 23 PSet 3 Due 24 25 Senior Week 26 Senior Week 27 Senior Week 28 29 Make-up Day Senior Week 30 Senior Week","title":"September 2019"},{"location":"#october-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 National Day Holiday 2 National Day Holiday 3 National Day Holiday 4 National Day Holiday 5 SAT 6 7 National Day Holiday 8 PSet 4 Due 9 10 11 12 Make-up Day Sport Events 13 14 15 16 17 18 19 20 21 22 23 24 25 Field Trip 26 27 28 29 30 31 Halloween","title":"October 2019"},{"location":"#november-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 SAT II 3 4 5 6 7 8 End of First Quarter 9 10 11 Remembrance Day 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Thanksgiving 29 30","title":"November 2019"},{"location":"#december-2019","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 SAT 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Xmas Break 24 Xmas Break 25 Xmas Break 26 27 28 29 30 31 NYE Carnival","title":"December 2019"},{"location":"#january-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 New Year's Day 2 3 4 5 6 Final Exams 7 Final Exams 8 Final Exams 9 Final Exams 10 Final Exams 11 12 13 Final Exams 14 15 16 17 Winter Break Begins 18 19 20 21 22 23 24 25 Chinese New Year 26 27 28 29 30 31","title":"January 2020"},{"location":"#course-calendar-semester-two","text":"Academic dates are in italics , course assessment deadlines are in bold .","title":"Course Calendar: Semester Two"},{"location":"#february-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 School Resumes 18 19 20 21 22 23 24 25 26 27 28 29","title":"February 2020"},{"location":"#march-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 St. Patrick's Day 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"March 2020"},{"location":"#april-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 Tomb Sweeping Day 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30","title":"April 2020"},{"location":"#may-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 May Day 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"May 2020"},{"location":"#june-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Dragon Boat Festival 26 27 28 29 30","title":"June 2020"},{"location":"#july-2020","text":"Sunday Monday Tuesday Wednesday Thursday Friday Saturday 1 2 3 4 5 6 7 8 9 10 Summer Break Begins 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","title":"July 2020"},{"location":"frqs/","text":"Free Response Questions The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB pair.zip tester.zip apCSA2019.pdf 279KB","title":"FRQs"},{"location":"frqs/#free-response-questions","text":"The following are the official AP free response questions from previous years' examinations. The zip files contain each question's code framework, complete with JUnit test cases. PDF File File Size Q1 Q2 Q3 Q4 apCSA2010.pdf 74KB cookie.zip trail.zip N/A apCSA2013.pdf 207KB music.zip N/A sky.zip apCSA2014.pdf 265KB mixed.zip N/A apCSA2015.pdf 346KB hidden.zip apCSA2016.pdf 368KB crossword.zip formatter.zip apCSA2017.pdf 264KB phrase.zip apCSA2018.pdf 312KB pair.zip tester.zip apCSA2019.pdf 279KB","title":"Free Response Questions"},{"location":"lab01/","text":"Lab 1: Easter Sunday Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears. Code Distribution Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE . Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#lab-1-easter-sunday","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 1: Easter Sunday"},{"location":"lab01/#background","text":"Due Date: Thursday, September 12, 2019 Total Points: 10 In this lab, you must write a Java program that determines which particular day and month that Easter Sunday appears.","title":"Background"},{"location":"lab01/#code-distribution","text":"Description File Size File Name Java Source Code for Easter Sunday 4.8KB lab01.zip Contents of lab01.zip : Lab01EasterSunday/ \u251c\u2500\u2500 EasterSunday.class \u251c\u2500\u2500 EasterSunday.ctxt \u251c\u2500\u2500 EasterSunday.java \u251c\u2500\u2500 EasterSundayJUnitTest.class \u251c\u2500\u2500 EasterSundayJUnitTest.ctxt \u251c\u2500\u2500 EasterSundayJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab01/#specification","text":"Write a Java program in the file EasterSunday.java that computes the date of Easter Sunday, given a particular year. Easter Sunday is a holiday which falls on the first Sunday after the first full moon of Spring. This algorithm was discovered by Carl Friedrich Gauss. The parameter year is the variable for the year in question. In the provided code, year takes on the value 2001 . Your program must perform the following calculations: Divide year by 19 and call the remainder a . Ignore the quotient. Divide year by 100 to get a quotient b and a remainder c . Divide b by 4 to get a quotient d and a remainder e . Divide (8 * b + 13) by 25 to get a quotient g . Ignore the remainder. Divide (19 * a + b - d - g + 15) by 30 to get a remainder h . Ignore the quotient. Divide c by 4 to get a quotient j and a remainder k . Divide (a + 11 * h) by 319 to get a quotient m . Ignore the remainder. Divide (2 * e + 2 * j - k - h + m + 32) by 7 to get a remainder r . Ignore the quotient. Divide (h - m + r + 90) by 25 to get a quotient n . Ignore the remainder. Divide (h - m + r + n + 19) by 32 to get a remainder p . Ignore the quotient. The result is that Easter Sunday falls on day: p of the month: n . For example, given the year 2001 , we find that the result is: n = 4 and p = 15 . This means that Easter Sunday was on April 15 in the year 2001. You will write your solution in a function called retrieveDate(int year) , right below the place where it says: YOUR CODE HERE .","title":"Specification"},{"location":"lab01/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab01/#submission","text":"Upload the file EasterSunday.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"lab02/","text":"Lab 2: Movie Critic Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie. Background Theory You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned. Code Distribution Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#lab-2-movie-critic","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Lab 2: Movie Critic"},{"location":"lab02/#task-outline","text":"Due Date: Friday, September 20, 2019 Total Points: 10 In this lab, you must write a Java program that determines the user's interest in seeing a particular movie.","title":"Task Outline"},{"location":"lab02/#background-theory","text":"You interest in a movie depends upon the following two factors: The price of the movie's ticket, in dollars. The rating which the movie received, which can be any decimal number from 0 to 5, inclusive. Your level of interest in a movie is shown by the following indicators: extremely interested very interested moderately interested barely interested completely uninterested The following are the criteria upon which you make your movie viewing decisions. Hint: Implement these in Java using an if-else if-else code structure. You like bargains. Any movie that costs less than $5.00 is one that you are extremely interested in viewing, as long as that movie has received 2 or more stars. You dislike expensive movies. If a movie costs $12.00 or more, then you are completely uninterested in seeing it. However, if that movie happened to recieve 5 stars, then you are barely interested in seeing it. You enjoy high quality movies. You are very interested in seeing any movie that has a price below $12.00, and is rated greater than 4 stars. You are moderately interested in seeing any movie which costs between $5.00 and $11.99, as long as those movies received between 2 and 4 stars, inclusive. You dislike poorly rated movies. Any movie that has received less than 2 stars is one that you are barely interested in seeing, as long as it costs less than $5.00. If any movie falls outside of the previously mentioned criteria, then you are completely uninterested in seeing it. Note that the function selectFilm() returns the variable outcome . You must assign the corresponding interest String to the variable outcome , before it is returned.","title":"Background Theory"},{"location":"lab02/#code-distribution","text":"Description File Size File Name Java Source Code for Movie Critic 4.8KB lab02.zip Contents of lab02.zip : Lab02MovieCritic/ \u251c\u2500\u2500 MovieCritic.class \u251c\u2500\u2500 MovieCritic.ctxt \u251c\u2500\u2500 MovieCritic.java \u251c\u2500\u2500 MovieCriticJUnitTest.class \u251c\u2500\u2500 MovieCriticJUnitTest.ctxt \u251c\u2500\u2500 MovieCriticJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"lab02/#specification","text":"Write a Java program in the file MovieCritic.java that produces an output which corresponds to your particular interest in a certain movie. You will write your solution in a function called selectFilm(double price, double rating) right below the place where it says: YOUR CODE HERE When the function call selectFilm(6.5, 3,5) is executed, the output of the program should be: moderately interested","title":"Specification"},{"location":"lab02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"lab02/#submission","text":"Upload the file MovieCritic.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"notes/","text":"Course Notes Semester 1 Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf","title":"Course Notes"},{"location":"notes/#course-notes","text":"","title":"Course Notes"},{"location":"notes/#semester-1","text":"Description File Size File Name Java Syntax: An overview of variables, primitive data types, and the kinds of mathematical operators that are present in Java . 193KB csaNotes01JavaSyntax.pdf Conditionals and Looping: We explore the decision-making capabilities of Java with if statements. Also, we examine iteration and looping with the while and for constructs. 289KB csaNotes02Conditionals.pdf Strings: Creating and manipulating text data. 164KB csaNotes03Strings.pdf Methods, Arguments, and Parameters: Structuring your programs for code reuse. 148KB csaNotes04Methods.pdf The Math Class: Providing common mathematical functions. 134KB csaNotes05MathClass.pdf Arrays: A collection of data for simple access. 237KB csaNotes06Arrays.pdf Object Oriented Programming: Creating classes with state and behavior. 290KB csaNotes07ObjectOriented.pdf Object References: Aliasing and its associated effects. 151KB csaNotes08ObjectReferences.pdf","title":"Semester 1"},{"location":"pastexams/","text":"Past Exams Semester 1 Test 1: Java Syntax and Strings Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf","title":"Past Exams"},{"location":"pastexams/#past-exams","text":"","title":"Past Exams"},{"location":"pastexams/#semester-1","text":"","title":"Semester 1"},{"location":"pastexams/#test-1-java-syntax-and-strings","text":"Description File Size File Name Fall 2014 104KB csaTest01Fall2014.pdf Fall 2015 115KB csaTest01Fall2015.pdf Fall 2016 93KB csaTest01Fall2016.pdf Fall 2017 118KB csaTest01Fall2017.pdf Fall 2018 147KB csaTest01Fall2018.pdf","title":"Test 1: Java Syntax and Strings"},{"location":"pset01/","text":"Problem Set 1: HelloWorld Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework. Code Distribution Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Using the Assignment Operator Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save . Compiling your Java Program Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon. Executing your Java Program Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase. Testing Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit. Submission Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Problem Set 1: Hello World"},{"location":"pset01/#problem-set-1-helloworld","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 1: HelloWorld"},{"location":"pset01/#background","text":"Due Date: Monday, September 9, 2019 Total Points: 10 This problem set introduces you to the write-compile-run software development cycle, with a very simple code framework.","title":"Background"},{"location":"pset01/#code-distribution","text":"Description File Size File Name Java Source Code for HelloWorld 3.9KB pset01.zip Contents of pset01.zip : PSet01SourceCode/ \u251c\u2500\u2500 HelloWorld.class \u251c\u2500\u2500 HelloWorld.ctxt \u251c\u2500\u2500 HelloWorld.java \u251c\u2500\u2500 HelloWorldJUnitTest.class \u251c\u2500\u2500 HelloWorldJUnitTest.ctxt \u251c\u2500\u2500 HelloWorldJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset01/#specification","text":"","title":"Specification"},{"location":"pset01/#using-the-assignment-operator","text":"Write a Java program in the file HelloWorld.java that uses the assignment operator to assign the message hello world to the String variable greetings . You will write your solution in a method called displayMessage() , right below the place where it says: YOUR CODE HERE . Make sure that the phrase hello world is placed in the variable greetings . Save your code by clicking on the Project menu and selecting Save .","title":"Using the Assignment Operator"},{"location":"pset01/#compiling-your-java-program","text":"Now, you must compile your Java program. Go to the BlueJ project window and click on the Compile button. I have indicated it with my cursor in the following screenshot. If you have made an error in your code, then you must correct it before your code will successfully compile. For example, in the screenshot below, this is how BlueJ reacts when I leave off the terminating semicolon.","title":"Compiling your Java Program"},{"location":"pset01/#executing-your-java-program","text":"Now, you must run your Java program. Right-click on the HelloWorld module in the BlueJ project window, and a small menu box will appear. Select the option listed as void main(String[] args) . I have indicated it in the screenshot below with my cursor. Then, a Method Call dialog box should appear, like in the following screenshot. Click on the Ok button. Next, a Terminal Window should appear. You should see the text hello world being displayed in the Terminal Window . This is exactly what we intended this program to do. If your result is something other than this, then you need to correct your program before the testing phase.","title":"Executing your Java Program"},{"location":"pset01/#testing","text":"Now, we are going to verify that we have a correct Java program by using the JUnit testing feature of BlueJ. In order to run the JUnit test bench, simply click on the Run Tests button. I have indicated it in the following screenshot with my cursor. Immediately after clicking on the Run Tests button, you should see a BlueJ: Test Results window appear. Since this in an example of a successful test, you should see a green bar appear. Also, the specific function that was tested has a green checkmark in front of it. Click on the Close button to exit.","title":"Testing"},{"location":"pset01/#submission","text":"Upload the file HelloWorld.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset02/","text":"Problem Set 2: Fahrenheit Web-CAT: Submit Java programs to this automated grading platform. Background Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion. Code Distribution Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0 Hints Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer. Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#problem-set-2-fahrenheit","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 2: Fahrenheit"},{"location":"pset02/#background","text":"Due Date: Monday, September 16, 2019 Total Points: 10 In this problem set, you must write a Java program that performs a simple temperature conversion.","title":"Background"},{"location":"pset02/#code-distribution","text":"Description File Size File Name Java Source Code for Fahrenheit 4.1KB pset02.zip Contents of pset02.zip : PSet02SourceCode/ \u251c\u2500\u2500 Fahrenheit.class \u251c\u2500\u2500 Fahrenheit.ctxt \u251c\u2500\u2500 Fahrenheit.java \u251c\u2500\u2500 FahrenheitJUnitTest.class \u251c\u2500\u2500 FahrenheitJUnitTest.ctxt \u251c\u2500\u2500 FahrenheitJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset02/#specification","text":"Write a Java program in the file Fahrenheit.java that converts a temperature from celsius to fahrenheit. The formula for this conversion is as follows: Take the temperature in celsius, multiply it by 9, divide the result by 5, and add 32. The equation can be expressed as: \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 \\mbox{fahrenheit} = \\frac{\\mbox{celsius} \\times 9}{5} + 32 You will write your solution in a function called calculateFahrenheit(double celsius) , right below the place where it says: YOUR CODE HERE . When the function call calculateFahrenheit(100) is executed, the output of the program should be: 212.0","title":"Specification"},{"location":"pset02/#hints","text":"Recall that Java performs integer division. You may have to multiply one of the constants in the equation by 1.0 to obtain the correct answer.","title":"Hints"},{"location":"pset02/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset02/#submission","text":"Upload the file Fahrenheit.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset03/","text":"Problem Set 3: Note Frequency Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class. Background Theory One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9 Code Distribution Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#problem-set-3-note-frequency","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 3: Note Frequency"},{"location":"pset03/#task-outline","text":"Due Date: Monday, September 23, 2019 Total Points: 10 Implement a Java program that calculates the frequency of a particular music note, given its octave and pitch class.","title":"Task Outline"},{"location":"pset03/#background-theory","text":"One of the oldest problems in music theory is how to map the notes of a musical piece to a set of audio frequencies. Your task is to write a Java program that performs a particular kind of mapping. First, we must define a form of musical note notation. One common way of accomplishing this is to use the octave pitch notation. This notation represents each note as a number pair, where the first number indicates which octave the note belongs to, and the second number indicates which semitone the pitch corresponds to. There are 12 semitone notes within each octave on the keyboard, as in the following diagram: octave pitch representations are written in decimal format. For example, the 5th octave and 9th semitone(corresponding to note A) would be written as: 5.9 In order to map a sound frequency to this octave pitch representation, we must begin by selecting a reference note. In the Western musical scale, we assign the frequency 440Hz to the octave pitch reference note of 4.9. This corresponds to the 4th octave, 9th semitone, which is note A. Our mapping must ensure that the same note in the next higher octave has double the frequency. In other words, 5.9 corresponds to 880Hz, and 3.9 corresponds to 220Hz. This mapping system assumes that each of the semitones within an octave is equally spaced, and this is known as a tempered scale. The formula we use to calculate the frequency from a given octave pitch note is as follows: In Java , this formula would be implemented as: frequency = ref * Math.pow(2, (octa + (semi/12.0))); double frequency : The result of the calculation, in Hertz. int ref : The frequency of the reference note, which is: 440 Hertz. int octa : The octave note minus the reference note, which is: octave - 4 int semi : The pitch semitone minus the reference semitone, which is: pitch - 9","title":"Background Theory"},{"location":"pset03/#code-distribution","text":"Description File Size File Name Java Source Code for Note Frequency 4.8KB pset03.zip Contents of pset03.zip : PSet03NoteFrequency/ \u251c\u2500\u2500 NoteFrequency.class \u251c\u2500\u2500 NoteFrequency.ctxt \u251c\u2500\u2500 NoteFrequency.java \u251c\u2500\u2500 NoteFrequencyJUnitTest.class \u251c\u2500\u2500 NoteFrequencyJUnitTest.ctxt \u251c\u2500\u2500 NoteFrequencyJUnitTest.java \u251c\u2500\u2500 package.bluej \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset03/#specification","text":"Write a Java program in the file NoteFrequency.java that calculates the frequency of a particular musical note, given its octave and pitch class. You will write your solution in a function called temperedScale(int octave, int pitch) right below the place where it says: YOUR CODE HERE When the function call temperedScale(0, 0) is executed, the output of the program should be: 16.351597831287414","title":"Specification"},{"location":"pset03/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset03/#submission","text":"Upload the file NoteFrequency.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"pset04/","text":"Problem Set 4: Quarterback Rating Web-CAT: Submit Java programs to this automated grading platform. Task Outline Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football. Background Theory The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100 Code Distribution Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT Specification Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288 Testing Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar. Submission Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#problem-set-4-quarterback-rating","text":"Web-CAT: Submit Java programs to this automated grading platform.","title":"Problem Set 4: Quarterback Rating"},{"location":"pset04/#task-outline","text":"Due Date: Tuesday, October 8, 2019 Total Points: 10 Implement a Java program that calculates the quarterback rating, which is a measure of the performance of a quarterback, in the game of American football.","title":"Task Outline"},{"location":"pset04/#background-theory","text":"The game of American football is one of the more popular sports that is played in the U.S. The objective of the game is to advance the ball into a special region called the end zone. One of the more effective ways to accomplish this task, is for one of the players to throw the ball down the field. The player who is responsible for throwing the ball is called the quarterback. Throwing a football is a highly specialized skill, and some players are better at it than others. There is an equation which objectively evaluates how good a quarterback has performed during a particular game, based on a series of factors. This quarterback rating equation is based on the following four factors: completion percentage, yards per attempt, touchdowns per attempt, and interceptions per attempt. Each of those factors is scaled to a value between 0 and 2.375 . A description of each of these factors is as follows: Completion Percentage: This reflects the quantity of successful passes that the quarterback has made, compared with the number of attempted passes. a = (1.0*comps/attempts - 0.3) * 5 Yards Per Attempt: This indicates the number of yards that the quarterback has obtained by passing the football, compared with the number of attempted passes. b = (1.0*yards/attempts - 3) * 0.25 Touchdowns Per Attempt: This indicates the quantity of touchdowns that the quarterback has achieved, compared with the number of attempted passes. c = 20.0 * tdowns/attempts Interceptions Per Attempt: This details the number of times that an opposing player has inadvertently caught the football, compared with the number of attempted passes. An interception is also known as a pick. d = 2.375 - (25.0 * picks/attempts) The following is an explanation of the variables used in the above mentioned equations: attempts : The number of passing attempts. comps : The number of completions, or successful passes. yards : The quantity of yards gained by passing the football. tdowns : The number of touchdowns obtained by passing the football. picks : The number of interceptions, that is, when the football is caught by a member of the opposing team. Note: If the result of any one of the above equations is greater than 2.375 , then that factor is set to 2.375 . Also, if the result of any one of those equations is a negative number, then that factor is set to 0 . The above calculations are used to determine the quarterback rating in the following manner: rating = ((a + b + c + d) / 6.0) * 100","title":"Background Theory"},{"location":"pset04/#code-distribution","text":"Description File Size File Name Java Source Code for Quarterback Rating 5.2KB pset04.zip Contents of pset04.zip : PSet04QuarterbackRating/ \u251c\u2500\u2500 package.bluej \u251c\u2500\u2500 QuarterbackRating.class \u251c\u2500\u2500 QuarterbackRating.ctxt \u251c\u2500\u2500 QuarterbackRating.java \u251c\u2500\u2500 QuarterbackRatingJUnitTest.class \u251c\u2500\u2500 QuarterbackRatingJUnitTest.ctxt \u251c\u2500\u2500 QuarterbackRatingJUnitTest.java \u2514\u2500\u2500 README.TXT","title":"Code Distribution"},{"location":"pset04/#specification","text":"Write a Java program in the file QuarterbackRating.java that calculates the quarterback rating, which reflects the performance of a quarterback in a particular game. You will write your solution in a function called calculateRating(int attempts, int comps, int yards, int tdowns, int picks) right below the place where it says: YOUR CODE HERE When the function call calculateRating(35, 26, 235, 2, 1) is executed, the output of the program should be: 99.10714285714288","title":"Specification"},{"location":"pset04/#testing","text":"Click on the Run Tests button to execute the JUnit test bench. JUnit indicates a successful test with a green bar, and an unsuccessful test with a red bar.","title":"Testing"},{"location":"pset04/#submission","text":"Upload the file QuarterbackRating.java to the Web-CAT automated grading platform.","title":"Submission"},{"location":"references/","text":"Tutorials The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf Installing the Dr. Java IDE (for a Windows system) Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe Reference Material Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf Exam Preparation Guide, 8th Edition Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"References"},{"location":"references/#tutorials","text":"The following are some detailed guides that will assist you in setting up your computer for Java software development. Windows , Mac OS , and Linux operating systems are supported. Description File Size File Name Installing BlueJ for Java development 1.8MB installingBlueJ.pdf Using the JUnit testing framework 530KB runTestsButton.pdf Submitting your Java program to Web-CAT 2.7MB submittingJavaCode.pdf Setting up the KeePass password manager 3.1KB keePassManager.pdf","title":"Tutorials"},{"location":"references/#installing-the-dr-java-idefor-a-windows-system","text":"Download and install the Java Runtime Environment(64-bit, 75.92MB): jre-8u221-windows-x64.exe Download and run the Dr. Java Windows executable(19.1MB): drjava-stable-20120818-r5686.exe","title":"Installing the Dr. Java IDE(for a Windows system)"},{"location":"references/#reference-material","text":"Description File Size File Name Blue Pelican Java, Version 7.0.1A 8.3MB bpjVersion701A.pdf","title":"Reference Material"},{"location":"references/#exam-preparation-guide-8th-edition","text":"Description File Size File Name Chapter 1: Exam Strategies 968KB chapter01ExamStrategies8e.pdf Chapter 2: Java Syntax 3.6MB chapter02JavaSyntax8e.pdf Chapter 3: Classes and Objects 3.9MB chapter03ClassesAndObjects8e.pdf Chapter 4: Inheritance 4.6MB chapter04Inheritance8e.pdf Chapter 5: Standard Classes 3.4MB chapter05StandardClasses8e.pdf Chapter 6: Software Development 3.1MB chapter06SoftwareDevelopment8e.pdf Chapter 7: Arrays and ArrayLists 5.7MB chapter07ArraysAndArrayLists8e.pdf Chapter 8: Recursion 3.4MB chapter08Recursion8e.pdf Chapter 9: Sorting and Searching 3.2MB chapter09SortingAndSearching8e.pdf","title":"Exam Preparation Guide, 8th Edition"},{"location":"syllabus/","text":"Syllabus AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources. Course Location Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login Teaching Assistant Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets. Course Description Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike. Reference Material Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class. Hardware Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported. Homework Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 . Plagiarism Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 . Grading Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment. Assignment Weighting Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40% Course Websites Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Syllabus"},{"location":"syllabus/#syllabus","text":"AP Central: Link to CollegeBoard's official course descriptions, reference materials, and exam resources.","title":"Syllabus"},{"location":"syllabus/#course-location","text":"Course Title: AP Computer Science A Meeting Place: Room 308 Instructor: Mr. Alwin Tareen Course Website: https://altareen.github.io/csa GitHub Code Repository: https://github.com/altareen/csa Engage Grading Website: http://engage.bnds.cn AP Classroom: https://myap.collegeboard.org/login","title":"Course Location"},{"location":"syllabus/#teaching-assistant","text":"Nick XuYangZhou is the teaching assistant(TA) for this course. He will be conducting extra study sessions to assist students with understanding the course content and debugging the problem sets.","title":"Teaching Assistant"},{"location":"syllabus/#course-description","text":"Introduction to the theory of computer science, and the craft of programming in Java . This course teaches students how to think algorithmically, and to solve problems efficiently. Topics include Java syntax, arithmetic expressions, text processing, object-oriented programming, arrays and ArrayLists , sorting algorithms, inheritance and recursion. Problem sets and labs are inspired by the real-world domains of biology, cryptography, finance, forensics, and gaming. This course is designed for both beginner and expert programmers alike.","title":"Course Description"},{"location":"syllabus/#reference-material","text":"Barron's AP Computer Science A, 8th Edition, Roselyn Teukolsky. This will be the primary textbook used in this course. The entire textbook will be provided to students free of charge. Blue Pelican Java, Version 7.0.1A, Charles E. Cook. This textbook contains additional material that will be useful in this course. It will be provided to students free of charge. Head First Java, 2nd Edition, K. Sierra and B. Bates. This textbook provides an in-depth study of the Java language. It is useful as a reference guide, but it won't be used in class.","title":"Reference Material"},{"location":"syllabus/#hardware","text":"Each student is required to bring their laptop computer to class. Windows, Mac OS and Linux operating systems are supported.","title":"Hardware"},{"location":"syllabus/#homework","text":"Homework assignments will be posted regularly on the class website. Students are required to download and complete the assignment in electronic form. Homework submission instructions will be described within the assignment overview. Students are expected to submit their homework before the due date. Late Policy If a student submits their homework within 24 hours after the due date has passed, I will impose a 50% grading penalty . After that time frame, the homework will be assigned a grade of 0 .","title":"Homework"},{"location":"syllabus/#plagiarism","text":"Copying all or part of a programming solution, from another student, or from an Internet source, is a violation of the BNDS Academic Dishonesty Policy. Any assignment that has been found to be plagiarized will receive a grade of 0 .","title":"Plagiarism"},{"location":"syllabus/#grading","text":"Homework: Students are encouraged to put forth their best effort, even if the result does not compile, or produces an incorrect output. Students will receive partial credit in such cases. Labs: Students will be expected to demonstrate their programming proficiency by working through coding problems in class. Quizzes: Short 15 minute quizzes on current topics. These will be announced in advance. Tests: An extensive test of the topics covered in the section. Tests will be graded with partial credit, and carefully analyzed for understanding and general knowledge. Tests will consist of problems similar to examples covered in class and homework. Students will be informed of a test at least one week in advance. A missed test with and unexcused absence will receive a grade of 0. A missed test with an excused absence can be made up by appointment.","title":"Grading"},{"location":"syllabus/#assignment-weighting","text":"Assignment Weight Homework 20% Labs 20% Quizzes 20% Tests 40%","title":"Assignment Weighting"},{"location":"syllabus/#course-websites","text":"Students will be required to visit the class website on a regular basis to obtain homework assignments and other course materials: http://altareen.github.io/csa Any Java programs that are covered in class, such as AP code examples, case studies and homework solutions will be posted in the public GitHub code repository: https://github.com/altareen/csa Grades, student score averages, and the results of homeworks, quizzes and tests will be available at the school's Engage grading website: http://engage.bnds.cn An online question bank and AP exam registration is available at CollegeBoard's AP Classroom portal: https://myap.collegeboard.org/login","title":"Course Websites"}]}